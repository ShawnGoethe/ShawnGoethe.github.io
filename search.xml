<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>递归优化</title>
    <url>/2019/01/23/2019-01-23-%E9%80%92%E5%BD%92%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h1 id="递归优化"><a href="#递归优化" class="headerlink" title="递归优化"></a>递归优化</h1><h2 id="原因："><a href="#原因：" class="headerlink" title="原因："></a>原因：</h2><p>在 Java 中，每个线程都有独立的 Java 虚拟机栈。栈具有后入先出的特点，递归调用也是需要后调用的方法先返回，因此使用栈来存储递归调用的信息。这些信息存储在栈帧中，每个 Java 方法在执行时都会创建一个栈帧，用来存储<strong>局部变量表</strong>、<strong>操作数栈</strong>、<strong>常量池引用</strong>等信息。在调用方法时，对应着一个栈帧入栈，而方法返回时，对应着一个栈帧出栈。</p>
<p><img src="https://diycode.b0.upaiyun.com/photo/2019/46adce788e4fe23ed9e196deb76d8d71.png" alt="img"></p>
<p>随着栈帧frame的增多，将会导致Stack Overflow的报错，例如</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i == <span class="number">1</span> || i == <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> (f(i - <span class="number">1</span>) + f(i - <span class="number">2</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="解决方法1：递归–-gt-非递归"><a href="#解决方法1：递归–-gt-非递归" class="headerlink" title="解决方法1：递归–&gt;非递归"></a>解决方法1：递归–&gt;非递归</h2><p>其实很简单，就是用一个临时变量，来保存中间的值，而不是压入堆栈中，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//费波纳列数列，前两位是1，之后没位数是前两位数的和</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fibonacci</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp1=<span class="number">1</span>,temp2=<span class="number">1</span>,temp;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;=n ; i++) &#123;</span><br><span class="line">        temp=temp1+temp2;</span><br><span class="line">        temp1=temp2;</span><br><span class="line">        temp2=temp;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//粘贴于网上</span></span><br></pre></td></tr></table></figure>
<h2 id="解决办法2：递归–-gt-尾递归"><a href="#解决办法2：递归–-gt-尾递归" class="headerlink" title="解决办法2：递归–&gt;尾递归"></a>解决办法2：递归–&gt;尾递归</h2><p>尾递归就是当函数在最后一步（尾部）调用自身，如：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">function <span class="title">f</span><span class="params">(x)</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> g(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以下算法来自阮一峰教程：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">function <span class="title">factorial</span><span class="params">(n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> n * factorial(n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">factorial(<span class="number">5</span>) <span class="comment">// 120</span></span><br></pre></td></tr></table></figure>
<p>该算法并非是尾递归，因为其在返回值的时候进行了一个乘法操作，所以还是普通的递归，复杂度为O(n)，而如果改成尾递归，则：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">function <span class="title">factorial</span><span class="params">(n, total)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">1</span>) <span class="keyword">return</span> total;</span><br><span class="line">  <span class="keyword">return</span> factorial(n - <span class="number">1</span>, n * total);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">factorial(<span class="number">5</span>, <span class="number">1</span>) <span class="comment">// 120</span></span><br></pre></td></tr></table></figure>
<p>该算法只需要计算</p>
<p>factorial(5,1)</p>
<p>factorial(4,5)</p>
<p>factorial(3,20)</p>
<p>factorial(2,60)</p>
<p>factorial(1,120)</p>
<p>在进入新的递归函数时，尾递归不再需要使用栈帧保存数据，允许抛弃旧的栈帧，那么只需要保存一个栈帧即可</p>
<h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><ul>
<li>[阮一峰尾递归]（<a href="http://www.ruanyifeng.com/blog/2015/04/tail-call.html）">http://www.ruanyifeng.com/blog/2015/04/tail-call.html）</a></li>
</ul>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>regreesion</tag>
      </tags>
  </entry>
  <entry>
    <title>为什么使用消息队列MQ</title>
    <url>/2019/01/24/2019-01-24-%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%BF%E7%94%A8%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97MQ/</url>
    <content><![CDATA[<p>从实习到后来的两份工作也写了不少的项目，在最近的一份工作用到了大量的消息队列（客服系统，会有大量的访客咨询消息），让我重新回顾了一下在大数据面前，为什么要用消息队列，怎么用好消息队列</p>
<h2 id="理由"><a href="#理由" class="headerlink" title="理由"></a>理由</h2><ul>
<li>解耦</li>
<li>异步</li>
<li>削峰</li>
</ul>
<h2 id="解耦"><a href="#解耦" class="headerlink" title="解耦"></a>解耦</h2><p>通过一个 MQ，Pub/Sub 发布订阅消息这么一个模型，不同微服务之间通信会更加解耦，A给BCDEF发送消息的时候，就不需要考虑他们是否宕机，如何重发等，只需要将信息发送到队列里，让他们自己去取就好了</p>
<h2 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h2><p>假设用户请求需要写表，那么吧任务放进队列里，等待写入，前端可以先返回，可以减少用户的等待时间，或者采用多个机器同时写数据的不同部分，加快数据的处理</p>
<h2 id="削峰"><a href="#削峰" class="headerlink" title="削峰"></a>削峰</h2><p>就和平时用电一样，晚上电网的压力肯定会很大，如果直接把大量请求压到服务器，会直接宕机，但如果把请求排成队列，然后服务器从里面顺序取，虽然会增加延迟，但是不会宕机，满负荷运作而已</p>
<h2 id="实际生产环境"><a href="#实际生产环境" class="headerlink" title="实际生产环境"></a>实际生产环境</h2><p>咨询系统大致分为：咨询核心，端模块，微信模块，分配模块等等，访客发送的咨询信息（web）可能先经过端模块，在咨询核心模块处理前进入队列，然后，分配模块根据用户的设置，如接入客服还是机器人，按什么权重进行分配，分配给哪一个业务组进行操作，来减轻咨询核心的压力</p>
<h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>1.系统可用性降低（MQ挂了咋整）</p>
<p>2.复杂度提升（消息没有重复消费，不会丢失）</p>
<p>3.一致性问题有待解决</p>
<table>
<thead>
<tr>
<th>特性</th>
<th>ActiveMQ</th>
<th>RabbitMQ</th>
<th>RocketMQ</th>
<th style="text-align:center">Kafka</th>
</tr>
</thead>
<tbody>
<tr>
<td>单机吞吐量</td>
<td>万级，比 RocketMQ、Kafka 低一个数量级</td>
<td>同 ActiveMQ</td>
<td>10 万级，支撑高吞吐</td>
<td style="text-align:center">10 万级，高吞吐，一般配合大数据类的系统来进行实时数据计算、日志采集等场景</td>
</tr>
<tr>
<td>topic 数量对吞吐量的影响</td>
<td></td>
<td></td>
<td>topic 可以达到几百/几千的级别，吞吐量会有较小幅度的下降，这是 RocketMQ 的一大优势，在同等机器下，可以支撑大量的 topic</td>
<td style="text-align:center">topic 从几十到几百个时候，吞吐量会大幅度下降，在同等机器下，Kafka 尽量保证 topic 数量不要过多，如果要支撑大规模的 topic，需要增加更多的机器资源</td>
</tr>
<tr>
<td>时效性</td>
<td>ms 级</td>
<td>微秒级，这是 RabbitMQ 的一大特点，延迟最低</td>
<td>ms 级</td>
<td style="text-align:center">延迟在 ms 级以内</td>
</tr>
<tr>
<td>可用性</td>
<td>高，基于主从架构实现高可用</td>
<td>同 ActiveMQ</td>
<td>非常高，分布式架构</td>
<td style="text-align:center">非常高，分布式，一个数据多个副本，少数机器宕机，不会丢失数据，不会导致不可用</td>
</tr>
<tr>
<td>消息可靠性</td>
<td>有较低的概率丢失数据</td>
<td>基本不丢</td>
<td>经过参数优化配置，可以做到 0 丢失</td>
<td style="text-align:center">同 RocketMQ</td>
</tr>
<tr>
<td>功能支持</td>
<td>MQ 领域的功能极其完备</td>
<td>基于 erlang 开发，并发能力很强，性能极好，延时很低</td>
<td>MQ 功能较为完善，还是分布式的，扩展性好</td>
<td style="text-align:center">功能较为简单，主要支持简单的 MQ 功能，在大数据领域的实时计算以及日志采集被大规模使用</td>
</tr>
</tbody>
</table>
<p>所以<strong>中小型公司</strong>，用 RabbitMQ 是不错的选择</p>
<p><strong>大型公司</strong>，基础架构研发实力较强，用 RocketMQ 是很好的选择</p>
<p>如果是<strong>大数据领域</strong>的实时计算、日志采集等场景，用 Kafka 是业内标准的，绝对没问题，社区活跃度很高，绝对不会黄，何况几乎是全世界这个领域的事实性规范。</p>
]]></content>
      <categories>
        <category>high_availability</category>
      </categories>
      <tags>
        <tag>MQ</tag>
      </tags>
  </entry>
  <entry>
    <title>ReverseInteger</title>
    <url>/2019/02/17/2019-02-17-ReverseInteger/</url>
    <content><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p>Given a 32-bit signed integer, reverse digits of an integer.</p>
<p>Example 1:</p>
<p>Input: 123<br>Output: 321<br>Example 2:</p>
<p>Input: -123<br>Output: -321<br>Example 3:</p>
<p>Input: 120<br>Output: 21<br>Note:<br>Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−231,  231 − 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.</p>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (x == <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> result =<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">long</span> result_l = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span> (x != <span class="number">0</span>) &#123;</span><br><span class="line">			result_l = result_l * <span class="number">10</span> + x % <span class="number">10</span>;</span><br><span class="line">			x = x / <span class="number">10</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(result_l &gt;= Integer.MAX_VALUE||result_l &lt;= Integer.MIN_VALUE) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			result = (<span class="keyword">int</span>) result_l;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="keys"><a href="#keys" class="headerlink" title="keys"></a>keys</h1><p>1.倒序很简单，取余赋给新数就可以了，不过注意JavaScript或者Python的int–&gt;float的情况</p>
<p>2.题目下面其实提示了int的范围，改题目1032个测试数据，有大概7个是超范围的验证数据，所以java中可以巧利用Integer.MAX来进行处理。</p>
<h1 id="perfect"><a href="#perfect" class="headerlink" title="perfect"></a>perfect</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (x != <span class="number">0</span>) &#123;</span><br><span class="line">            res = res * <span class="number">10</span> + x % <span class="number">10</span>;</span><br><span class="line">            x = x / <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>)res == res ? (<span class="keyword">int</span>)res : <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Easy</tag>
      </tags>
  </entry>
  <entry>
    <title>LongestCommonPrefix</title>
    <url>/2019/02/18/2019-02-18-LongestCommonPrefix/</url>
    <content><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><blockquote>
<p>Write a function to find the longest common prefix string amongst an array of strings.</p>
<p>If there is no common prefix, return an empty string <code>&quot;&quot;</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: [&quot;flower&quot;,&quot;flow&quot;,&quot;flight&quot;]</span><br><span class="line">Output: &quot;fl&quot;</span><br></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: [&quot;dog&quot;,&quot;racecar&quot;,&quot;car&quot;]</span><br><span class="line">Output: &quot;&quot;</span><br><span class="line">Explanation: There is no common prefix among the input strings.</span><br></pre></td></tr></table></figure>
<p><strong>Note:</strong></p>
<p>All given inputs are in lowercase letters <code>a-z</code>.</p>
</blockquote>
<h1 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">longestCommonPrefix</span><span class="params">(String[] strs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> minLength = minLength(strs);</span><br><span class="line">		String same = <span class="string">&quot;&quot;</span>;</span><br><span class="line">		<span class="keyword">boolean</span> isSame=<span class="keyword">false</span>;</span><br><span class="line">		outer:<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;minLength;i++) &#123;</span><br><span class="line">			<span class="keyword">char</span> sameCharacter = strs[<span class="number">0</span>].charAt(i);</span><br><span class="line">			isSame = <span class="keyword">false</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;strs.length;j++) &#123;</span><br><span class="line">				<span class="keyword">if</span>(strs[j].charAt(i)==sameCharacter) &#123;</span><br><span class="line">					isSame = <span class="keyword">true</span>;</span><br><span class="line">				&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">					isSame = <span class="keyword">false</span>;</span><br><span class="line">					<span class="keyword">break</span> outer;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(isSame=<span class="keyword">true</span>)same+=sameCharacter;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> same;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">minLength</span><span class="params">(String[] strs)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="keyword">if</span>(strs.length==<span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> min = strs[<span class="number">0</span>].length();</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;strs.length;i++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(strs[i].length()&lt;min) &#123;</span><br><span class="line">				min = strs[i].length();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> min;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="key"><a href="#key" class="headerlink" title="key"></a>key</h1><p>数学题，没什么关键，但是这个解法，还是存在优化空间</p>
<h1 id="Perfect"><a href="#Perfect" class="headerlink" title="Perfect"></a>Perfect</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">longestCommonPrefix</span><span class="params">(String[] strs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (strs == <span class="keyword">null</span> || strs.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        String prefix = strs[<span class="number">0</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; strs.length; ++i) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!strs[i].startsWith(prefix)) &#123;</span><br><span class="line">                prefix = prefix.substring(<span class="number">0</span>, prefix.length() - <span class="number">1</span>);</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> (prefix.isEmpty()) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> prefix;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
  </entry>
  <entry>
    <title>如何生成tag和categories</title>
    <url>/2019/02/17/2019-02-17-%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90tag%E5%92%8Ccategories/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new page tags</span><br><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>others</category>
      </categories>
  </entry>
  <entry>
    <title>ThreeSum</title>
    <url>/2019/02/19/2019-02-19-15ThreeSum/</url>
    <content><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Given an array nums of n integers, are there elements a, b, c in nums such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.</span><br><span class="line"></span><br><span class="line">Note:</span><br><span class="line"></span><br><span class="line">The solution set must not contain duplicate triplets.</span><br><span class="line"></span><br><span class="line">Example:</span><br><span class="line"></span><br><span class="line">Given array nums = [-1, 0, 1, 2, -1, -4],</span><br><span class="line"></span><br><span class="line">A solution set is:</span><br><span class="line">[</span><br><span class="line">  [-1, 0, 1],</span><br><span class="line">  [-1, -1, 2]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; threeSum(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        ArrayList&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length - <span class="number">2</span>; i++)&#123;</span><br><span class="line">            <span class="comment">// 跳过重复元素</span></span><br><span class="line">            <span class="keyword">if</span>(i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i-<span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="comment">// 计算2Sum</span></span><br><span class="line">            ArrayList&lt;List&lt;Integer&gt;&gt; curr = twoSum(nums, i, <span class="number">0</span> - nums[i]);</span><br><span class="line">            res.addAll(curr);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;List&lt;Integer&gt;&gt; twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> i, <span class="keyword">int</span> target)&#123;</span><br><span class="line">        <span class="keyword">int</span> left = i + <span class="number">1</span>, right = nums.length - <span class="number">1</span>;</span><br><span class="line">        ArrayList&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line">        <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[left] + nums[right] == target)&#123;</span><br><span class="line">                ArrayList&lt;Integer&gt; curr = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">                curr.add(nums[i]);</span><br><span class="line">                curr.add(nums[left]);</span><br><span class="line">                curr.add(nums[right]);</span><br><span class="line">                res.add(curr);</span><br><span class="line">                <span class="keyword">do</span> &#123;</span><br><span class="line">                    left++;</span><br><span class="line">                &#125;<span class="keyword">while</span>(left &lt; nums.length &amp;&amp; nums[left] == nums[left-<span class="number">1</span>]);</span><br><span class="line">                <span class="keyword">do</span> &#123;</span><br><span class="line">                    right--;</span><br><span class="line">                &#125; <span class="keyword">while</span>(right &gt;= <span class="number">0</span> &amp;&amp; nums[right] == nums[right+<span class="number">1</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[left] + nums[right] &gt; target)&#123;</span><br><span class="line">                right--;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Key"><a href="#Key" class="headerlink" title="Key"></a>Key</h1><p>tips：很久没有写Java了，花了点时间去整理了一些知识，所以上面的算法其实是ctrl+v的，现在整理一下list相关的知识：</p>
<p>1.List&lt;List<Integer>&gt;为嵌套的list集合，声明方式</p>
<blockquote>
<p><em>List&lt;List<strong><Interger></strong>&gt; list = new Array<strong><Interger></strong>()</em></p>
<p>or</p>
<p>List&lt;List<Integer>&gt; list = new ArrayList&lt;&gt;();//recomend</p>
</blockquote>
<p>2.List是一个接口，而ArrayList是List接口的一个实现类</p>
<blockquote>
<p>List list = new List();//是错误的用法</p>
<p>List list = new ArrayList();//list会丢失ArrayList的trimToSize()方法</p>
<p>ArrayList list=newArrayList()</p>
</blockquote>
<p>3.然后明天再回来重新写这道题</p>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
  </entry>
  <entry>
    <title>树的后序遍历</title>
    <url>/2019/02/19/2019-02-19-%E6%A0%91%E7%9A%84%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86/</url>
    <content><![CDATA[<h1 id="definition"><a href="#definition" class="headerlink" title="definition"></a>definition</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">private static class BinaryNode&lt;AnyType&gt;</span><br><span class="line">&#123;</span><br><span class="line">    BinaryNode(AnyType theElement)</span><br><span class="line">    &#123;</span><br><span class="line">        this(theElement, null, null);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    BinaryNode(AnyType theElement, BinaryNode&lt;AnyType&gt; lt, BinaryNode&lt;AnyType&gt; rt)</span><br><span class="line">    &#123;</span><br><span class="line">        element = theElement;</span><br><span class="line">        left = lt;</span><br><span class="line">        right = rt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    AnyType element;</span><br><span class="line">    BinaryNode&lt;AnyType&gt; left;</span><br><span class="line">    BinaryNode&lt;AnyType&gt; right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private BinaryNode&lt;AnyType&gt; root;</span><br></pre></td></tr></table></figure>
<h1 id="posOrder"><a href="#posOrder" class="headerlink" title="posOrder"></a>posOrder</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">posOrder</span><span class="params">(BinaryNode&lt;AnyType&gt; Node)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Node != <span class="keyword">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            posOrder(Node.left);</span><br><span class="line">            posOrder(Node.right);</span><br><span class="line">            System.out.print(Node.element + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public void posOrder(BinaryNode&lt;AnyType&gt; Node)</span><br><span class="line">&#123;</span><br><span class="line">    Stack&lt;BinaryNode&gt; stack1 = new Stack&lt;&gt;();</span><br><span class="line">    Stack&lt;Integer&gt; stack2 = new Stack&lt;&gt;();</span><br><span class="line">    int i = 1;</span><br><span class="line">    while(Node != null || !stack1.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        while (Node != null)</span><br><span class="line">        &#123;</span><br><span class="line">            stack1.push(Node);</span><br><span class="line">            stack2.push(0);</span><br><span class="line">            Node = Node.left;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        while(!stack1.empty() &amp;&amp; stack2.peek() == i)</span><br><span class="line">        &#123;</span><br><span class="line">            stack2.pop();</span><br><span class="line">            System.out.print(stack1.pop().element + &quot;   &quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if(!stack1.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            stack2.pop();</span><br><span class="line">            stack2.push(1);</span><br><span class="line">            Node = stack1.peek();</span><br><span class="line">            Node = Node.right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
  </entry>
  <entry>
    <title>联合索引</title>
    <url>/2019/02/19/2019-02-19-%E8%81%94%E5%90%88%E7%B4%A2%E5%BC%95/</url>
    <content><![CDATA[<h1 id="key"><a href="#key" class="headerlink" title="key"></a>key</h1><p>当具备多个索引的时候，如：KEY <code>联合索引</code> (<code>a</code>,<code>b</code>,<code>c</code>)为索引，除(b,c)条件索引不会触发该索引表外，(a,b),(a,c),(a,b,c)均会触发上述联合索引，具体可参见explain的key类型，理论应该显示联立索引</p>
<p>如：</p>
<blockquote>
<p>EXPLAIN SELECT <em> FROM TABLENAME WHERE a=’2222’ AND b=</em>‘222’*</p>
</blockquote>
<p>如果你设置多个单列索引，在explain下，key的值就为其单列的索引，如上述的a列</p>
]]></content>
      <categories>
        <category>database</category>
      </categories>
      <tags>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>缓存</title>
    <url>/2019/02/19/2019-02-19-%E7%BC%93%E5%AD%98/</url>
    <content><![CDATA[<h1 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h1><h2 id="why"><a href="#why" class="headerlink" title="why"></a>why</h2><ul>
<li><p>高性能</p>
<p>例如：把查完的值缓存，下次直接访问</p>
</li>
<li><p>高并发</p>
<p>例如：把请求排队</p>
</li>
</ul>
<h2 id="difference（vs-memcached"><a href="#difference（vs-memcached" class="headerlink" title="difference（vs memcached)"></a>difference（vs memcached)</h2><table>
<thead>
<tr>
<th>特征</th>
<th>redis</th>
<th>memchched</th>
</tr>
</thead>
<tbody>
<tr>
<td>数据结构</td>
<td>更复杂的数据结构，更丰富的数据操作</td>
<td></td>
</tr>
<tr>
<td>集群</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr>
<td>性能</td>
<td>单核</td>
<td>多核</td>
</tr>
</tbody>
</table>
<h2 id="redis线程模型"><a href="#redis线程模型" class="headerlink" title="redis线程模型"></a>redis线程模型</h2><p>redis 内部使用文件事件处理器 <code>file event handler</code>，这个文件事件处理器是单线程的，所以 redis 才叫做单线程的模型。它采用 IO 多路复用机制同时监听多个 socket，根据 socket 上的事件来选择对应的事件处理器进行处理。</p>
<p>假设一个 Redis 服务器正在运作， 那么这个服务器的监听套接字的 <code>AE_READABLE</code> 事件应该正处于监听状态之下， 而该事件所对应的处理器为连接应答处理器。</p>
<p>如果这时有一个 Redis 客户端向服务器发起连接， 那么监听套接字将产生 <code>AE_READABLE</code> 事件， 触发连接应答处理器执行： 处理器会对客户端的连接请求进行应答， 然后创建客户端套接字， 以及客户端状态， 并将客户端套接字的 <code>AE_READABLE</code> 事件与命令请求处理器进行关联， 使得客户端可以向主服务器发送命令请求。</p>
<p>之后， 假设客户端向主服务器发送一个命令请求， 那么客户端套接字将产生 <code>AE_READABLE</code> 事件， 引发命令请求处理器执行， 处理器读取客户端的命令内容， 然后传给相关程序去执行。</p>
<p><img src="https://github.com/doocs/advanced-java/raw/master/images/redis-single-thread-model.png" alt="redis-single-thread-model"></p>
<p>执行命令将产生相应的命令回复， 为了将这些命令回复传送回客户端， 服务器会将客户端套接字的 <code>AE_WRITABLE</code> 事件与命令回复处理器进行关联： 当客户端尝试读取命令回复的时候， 客户端套接字将产生 <code>AE_WRITABLE</code> 事件， 触发命令回复处理器执行， 当命令回复处理器将命令回复全部写入到套接字之后， 服务器就会解除客户端套接字的 <code>AE_WRITABLE</code> 事件与命令回复处理器之间的关联。</p>
]]></content>
      <categories>
        <category>high_availability</category>
      </categories>
  </entry>
  <entry>
    <title>表内关联</title>
    <url>/2019/02/19/2019-02-19-%E8%A1%A8%E5%86%85%E5%85%B3%E8%81%94/</url>
    <content><![CDATA[<h1 id="Inner-Join"><a href="#Inner-Join" class="headerlink" title="Inner Join"></a>Inner Join</h1><blockquote>
<p>SELECT column_list<br>FROM t1<br>INNER JOIN t2 ON join_condition1<br>INNER JOIN t3 ON join_condition2<br>…<br>WHERE where_conditions;</p>
</blockquote>
<h1 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h1><table>
<thead>
<tr>
<th>id</th>
<th>name</th>
<th>parentid</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>北京市</td>
<td>0</td>
</tr>
<tr>
<td>2</td>
<td>海淀区</td>
<td>1</td>
</tr>
<tr>
<td>3</td>
<td>北京xx大学</td>
<td>2</td>
</tr>
</tbody>
</table>
<blockquote>
<p>select a.name 市,b.name 区,c.name 名<br>from address a<br>join address  b on b.parentid = a.id<br>join address  c on c.parentid = b.id<br>join address  d on d.parentid = c.id</p>
</blockquote>
]]></content>
      <categories>
        <category>database</category>
      </categories>
      <tags>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>Egg支持JS智能提醒</title>
    <url>/2019/02/23/2019-02-23-Egg%E6%94%AF%E6%8C%81JSTS%E6%99%BA%E8%83%BD%E6%8F%90%E9%86%92/</url>
    <content><![CDATA[<blockquote>
<p>本文章思路来自<a href="https://zhuanlan.zhihu.com/p/56780733">https://zhuanlan.zhihu.com/p/56780733</a></p>
</blockquote>
<h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><p>其实由于Egg本身的动态加载机制，所以JavaScript很难去做智能提醒（如变量定义检查），本次借鉴TS的动态生成d.ts，使用ts的Declaration Merging（声明合并）特性，读取JSDoc注释。</p>
<h2 id="获取"><a href="#获取" class="headerlink" title="获取"></a>获取</h2><ul>
<li>更新egg-bin模块</li>
<li>package.json 添加 “egg”: { “declarations”: true } </li>
</ul>
<p>实操，升级个人GitHub项目<a href="https://github.com/ShawnGoethe/chum">chum</a>,执行</p>
<blockquote>
<p>npm i egg-bin</p>
</blockquote>
<p>将其从4.9.0–&gt;4.11.0并在package.json的尾部加上上述egg的kv，在根目录下生成tpyping文件夹，将app目录下的controller，model，以及根目录下的index，config目录都进行了ts文件生成</p>
<p><img src="C:\Users\56932\AppData\Roaming\Typora\typora-user-images\1550905277423.png" alt="1550905277423"></p>
<p>其实egg原生支持JavaScript，对于TS只是支持不推荐的态度，并没有使用TS去重构，本次智能提醒，应该是对JS一个劣势的补齐，解决方案也似乎借鉴了TS的方式，但又保留了人们书写JS的习惯</p>
]]></content>
      <categories>
        <category>framework</category>
      </categories>
      <tags>
        <tag>egg</tag>
      </tags>
  </entry>
  <entry>
    <title>LineageOS16.0-RELEASE</title>
    <url>/2019/03/02/2019-03-02-LineageOS16-0-RELEASE/</url>
    <content><![CDATA[<h2 id="16-0正式发布"><a href="#16-0正式发布" class="headerlink" title="16.0正式发布"></a>16.0正式发布</h2><p>我们从去年八月开始，努力将我们LineageOs的新特性移植到新版本的安卓上，非常感谢之前版本中的工作者们，我们才能够在这次的版本新特性中投入更多的精力，尤其是，隐私守护（Privacy Guard）和插件（su addon）上收到了了大量的提升建议。<br>通过对Styles API的一些细微更改，他现在可以兼容安卓暗黑模式的默认实现，在未来，越来越多的三方应用将遵循系统风格，这意味着Styles API将允许在跨应用程序时获得更一致的体验。<br>正如我们发布夏季第二次调研结果那样，我们将介绍Trust的新特性，首先是设备锁定时阻止新USB设备连接。请注意，由于基于底层，所以这个特性必须在每个设备底层中启用。Trebuchet现在还可以隐藏app以及在打开app前进行身份验证。该限制也仅在Trebuchet中，并非系统范围。<br>我们认为16.0的分支已经达到了15.1版本的特性测试并做好了发布准备。随着16.0分支成为最新最活跃的分支，在2019.3.1，它将开始日更新构建，并且15.1将会移动到周更新。<br>16.0版本将会从小部分机器开始运行，一些其他的机子如果准备好了，我们也会做一些小改动，开始构建，并通过改动构建脚本来更好地处理我们最新手机的，独特feature，以及由此产生的复杂问题</p>
<h2 id="支持更新名单"><a href="#支持更新名单" class="headerlink" title="支持更新名单"></a>支持更新名单</h2><ul>
<li>Asus</li>
<li>BQ</li>
<li>Fairphone</li>
<li>Google</li>
<li>HTC</li>
<li>Huawei</li>
<li>LeEco</li>
<li>Lenovo</li>
<li>LG</li>
<li>Moto</li>
<li>Nextbit</li>
<li>Nubia</li>
<li>Nvdia</li>
<li>OnePlus(my oneplus 5T receive 16.0)</li>
<li>Oppo</li>
<li>Samsung</li>
<li>Sony</li>
<li>Wileyfox</li>
<li>Wingtech</li>
<li>Xiaomi</li>
<li>YU</li>
<li>ZTE</li>
<li>Zuk</li>
<li>more</li>
</ul>
<h2 id="其他热门的ROM"><a href="#其他热门的ROM" class="headerlink" title="其他热门的ROM"></a>其他热门的ROM</h2><ul>
<li><a href="https://www.mokeedev.com/">MoKee</a>]</li>
<li><a href="https://crdroid.net/">crDroid</a></li>
<li><a href="http://www.miui.com/">MIUI</a></li>
<li><a href="https://www.flyme.cn/">Flyme</a></li>
<li><a href="https://pixelexperience.org/">PixelExperience</a></li>
</ul>
<h2 id="原文"><a href="#原文" class="headerlink" title="原文"></a>原文</h2><blockquote>
<h2 id="Hello-LineageOS-16-0"><a href="#Hello-LineageOS-16-0" class="headerlink" title="Hello LineageOS 16.0"></a>Hello LineageOS 16.0</h2><p>We’ve been working hard since August to port our unique features to this new version of Android. Thanks to the major cleanup and refactoring done in the previous version, we were able to focus more on features and reliability this time; in particular, both Privacy Guard and the su addon received a sizeable amount of improvements.</p>
<p>With some minor changes made to the <a href="https://wiki.lineageos.org/sdk/api/styles.html">Styles API</a>, it is now compatible with what will eventually become the default implementation of dark mode in Android. In the future, more and more third party apps will follow the system style, meaning our Styles API will allow you to have a more coherent experience across apps.</p>
<p>As we announced when the <a href="https://lineageos.org/Summer-Survey-2-Results/">Summer Survey 2 results</a> were posted, we will be introducing new features to <a href="https://lineageos.org/Trust-me/">Trust</a>, beginning with the ability to block new USB device connections when device is locked. Please note that this feature has to be enabled on a per-device basis due to the layer at which this was implemented. Trebuchet is also now able to hide apps and require authentication before opening them. Please note that this restriction is limited to Trebuchet and is not system-wide.</p>
<p>We feel that the 16.0 branch has reached feature parity with 15.1 and is ready for initial release. With 16.0 being the most recent and most actively-developed branch, on March 1st, 2019 it will begin receiving builds nightly and 15.1 will be moved to weekly builds.</p>
<p>LineageOS 16.0 will be launching with a small selection of devices. Additional devices will begin receiving builds as they are ready and after we make minor change to our build scripts to better handle the unique features, and resulting complications, of the most modern devices.</p>
<h3 id="Upgrading-to-LineageOS-16-0"><a href="#Upgrading-to-LineageOS-16-0" class="headerlink" title="Upgrading to LineageOS 16.0"></a>Upgrading to LineageOS 16.0</h3><ol>
<li><p>(Optional) Make a backup of your important data</p>
</li>
<li><p>Download the build either from</p>
</li>
</ol>
<p>   download portal</p>
<p>   or built in Updater app</p>
<ul>
<li>You can export the downloaded package from the Updater app to the sdcard by long-pressing it and then selecting <em>“Export”</em> in the popup menu</li>
</ul>
<ol start="3">
<li><p>Download proper addons packages (<a href="https://wiki.lineageos.org/gapps.html">GApps</a>, <a href="https://download.lineageos.org/extras">su</a>…) for Android 9.0/Lineage OS 16.0</p>
</li>
<li><p>Make sure your recovery and firmware are up to date</p>
</li>
<li><p>Format your system partition</p>
</li>
<li><p>Follow the “Installing LineageOS from recovery” section <a href="https://wiki.lineageos.org/install_guides.html">on your device’s installation page</a></p>
</li>
</ol>
<p>Please note that if you’re currently on an official build, you <em>DO NOT</em> need to wipe your device.</p>
<p>If you are installing from an unofficial build, you <em>MUST</em> wipe data from recovery before installing.</p>
</blockquote>
]]></content>
      <categories>
        <category>phones</category>
      </categories>
  </entry>
  <entry>
    <title>Node10值得关注的升级</title>
    <url>/2019/02/23/2019-02-23-Node10%E5%80%BC%E5%BE%97%E5%85%B3%E6%B3%A8%E7%9A%84%E5%8D%87%E7%BA%A7/</url>
    <content><![CDATA[<h1 id="http2"><a href="#http2" class="headerlink" title="http2"></a>http2</h1><h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><ul>
<li>更有效的网络利用率</li>
<li>引入 HTTP Header 压缩减小报文体积</li>
<li>在同一个连接中支持多路并发</li>
<li>支持 Server Push</li>
</ul>
<h2 id="多路复用（Multiplexing）"><a href="#多路复用（Multiplexing）" class="headerlink" title="多路复用（Multiplexing）"></a>多路复用（Multiplexing）</h2><p>由于HTTP连接，起初有要求限制同一域名下的请求有数量限制，超过则被阻塞，而HTTP2可以发起多重请求，如同时请求样式文件和脚本文件</p>
<h2 id="二进制分帧"><a href="#二进制分帧" class="headerlink" title="二进制分帧"></a>二进制分帧</h2><p><img src="https://pic4.zhimg.com/80/906e22193e61cd561325d93aae0f1e07_hd.jpg" alt="img"></p>
<p>HTTP/2 通过让所有数据流共用同一个连接，可以更有效地使用 TCP 连接，让高带宽也能真正的服务于 HTTP 的性能提升。</p>
<p><img src="https://pic1.zhimg.com/80/4bc1ad44e91207d56493003bf3805048_hd.png" alt="img"></p>
<p>http2.0的格式定义更接近tcp层的方式，这张二机制的方式十分高效且精简。length定义了整个frame的开始到结束，type定义frame的类型（一共10种），flags用bit位定义一些重要的参数，stream id用作流控制，剩下的payload就是request的正文了。</p>
<h2 id="server-Push"><a href="#server-Push" class="headerlink" title="server Push"></a>server Push</h2><p>http2.0能通过push的方式将客户端需要的内容预先推送过去</p>
<h2 id="首部压缩（Header-Compression"><a href="#首部压缩（Header-Compression" class="headerlink" title="首部压缩（Header Compression)"></a>首部压缩（Header Compression)</h2><hr>
<h2 id="BigInt"><a href="#BigInt" class="headerlink" title="BigInt"></a><strong>BigInt</strong></h2><hr>
<h2 id="fs-mkdir-和-fs-mkdirSync-支持递归参数"><a href="#fs-mkdir-和-fs-mkdirSync-支持递归参数" class="headerlink" title="*fs.mkdir 和 fs.mkdirSync 支持递归参数"></a>*<em>fs.mkdir 和 fs.mkdirSync 支持递归参数</em></h2><hr>
<h2 id="CLI-Flag-自动补全"><a href="#CLI-Flag-自动补全" class="headerlink" title="CLI Flag 自动补全"></a><strong>CLI Flag 自动补全</strong></h2><hr>
<h2 id="Windows-安装包优化"><a href="#Windows-安装包优化" class="headerlink" title="Windows 安装包优化"></a><strong>Windows 安装包优化</strong></h2><hr>
]]></content>
  </entry>
  <entry>
    <title>ShoppingOffers</title>
    <url>/2019/03/02/2019-03-02-ShoppingOffers/</url>
    <content><![CDATA[<h1 id="problem"><a href="#problem" class="headerlink" title="problem"></a>problem</h1><blockquote>
<p>In LeetCode Store, there are some kinds of items to sell. Each item has a price.</p>
<p>However, there are some special offers, and a special offer consists of one or more different kinds of items with a sale price.</p>
<p>You are given the each item’s price, a set of special offers, and the number we need to buy for each item. The job is to output the lowest price you have to pay for <strong>exactly</strong> certain items as given, where you could make optimal use of the special offers.</p>
<p>Each special offer is represented in the form of an array, the last number represents the price you need to pay for this special offer, other numbers represents how many specific items you could get if you buy this offer.</p>
<p>You could use any of special offers as many times as you want.</p>
</blockquote>
<h1 id="examples"><a href="#examples" class="headerlink" title="examples"></a>examples</h1><blockquote>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: [2,5], [[3,0,5],[1,2,10]], [3,2]</span><br><span class="line">Output: 14</span><br><span class="line">Explanation: </span><br><span class="line">There are two kinds of items, A and B. Their prices are $2 and $5 respectively. </span><br><span class="line">In special offer 1, you can pay $5 for 3A and 0B</span><br><span class="line">In special offer 2, you can pay $10 for 1A and 2B. </span><br><span class="line">You need to buy 3A and 2B, so you may pay $10 for 1A and 2B (special offer #2), and $4 for 2A.</span><br></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: [2,3,4], [[1,1,0,4],[2,2,1,9]], [1,2,1]</span><br><span class="line">Output: 11</span><br><span class="line">Explanation: </span><br><span class="line">The price of A is $2, and $3 for B, $4 for C. </span><br><span class="line">You may pay $4 for 1A and 1B, and $9 for 2A ,2B and 1C. </span><br><span class="line">You need to buy 1A ,2B and 1C, so you may pay $4 for 1A and 1B (special offer #1), and $3 for 1B, $4 for 1C. </span><br><span class="line">You cannot add more items, though only $9 for 2A ,2B and 1C.</span><br></pre></td></tr></table></figure>
</blockquote>
<h1 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShoppingOffers</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">	<span class="comment">/*以下贴出测试方式，因为对ArrayList不熟悉，如有更好的方式，欢迎指出*/</span></span><br><span class="line">		List&lt;Integer&gt; price = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">		List&lt;List&lt;Integer&gt;&gt; special = <span class="keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line">		List&lt;Integer&gt; needs = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">		price.add(<span class="number">0</span>, <span class="number">2</span>);price.add(<span class="number">1</span>, <span class="number">5</span>);</span><br><span class="line">		Integer[][] arr = <span class="keyword">new</span> Integer[][] &#123;&#123;<span class="number">3</span>,<span class="number">0</span>,<span class="number">5</span>&#125;,&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">10</span>&#125;&#125;;</span><br><span class="line">		special.add((List&lt;Integer&gt;)Arrays.asList(arr[<span class="number">0</span>]));</span><br><span class="line">		special.add((List&lt;Integer&gt;)Arrays.asList(arr[<span class="number">1</span>]));</span><br><span class="line">		needs.add(<span class="number">0</span>,<span class="number">3</span>);needs.add(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">		ShoppingOffers so = <span class="keyword">new</span> ShoppingOffers();</span><br><span class="line">		<span class="keyword">int</span> res = so.shoppingOffers(price, special, needs);</span><br><span class="line">		System.out.println(res);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span>  <span class="keyword">int</span> <span class="title">shoppingOffers</span><span class="params">(List &lt; Integer &gt; price, List &lt; List &lt; Integer &gt;&gt; special, List &lt; Integer &gt; needs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> shopping(price, special, needs);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">int</span> <span class="title">shopping</span><span class="params">(List &lt; Integer &gt; price, List &lt; List &lt; Integer &gt;&gt; special, List &lt; Integer &gt; needs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">0</span>, res = dot(needs, price);</span><br><span class="line">        <span class="keyword">for</span> (List &lt; Integer &gt; s: special) &#123;</span><br><span class="line">            ArrayList &lt; Integer &gt; clone = <span class="keyword">new</span> ArrayList &lt; &gt; (needs);</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; needs.size(); j++) &#123;</span><br><span class="line">                <span class="keyword">int</span> diff = clone.get(j) - s.get(j);</span><br><span class="line">                <span class="keyword">if</span> (diff &lt; <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                clone.set(j, diff);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (j == needs.size())</span><br><span class="line">                res = Math.min(res, s.get(j) + shopping(price, special, clone));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">dot</span><span class="params">(List &lt; Integer &gt; needs, List &lt; Integer &gt; price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; needs.size(); i++) &#123;</span><br><span class="line">            sum += needs.get(i) * price.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="key"><a href="#key" class="headerlink" title="key"></a>key</h1><p>本题目采用动态规划的思路，我们带入测试样例1的</p>
<blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;Input: [2,5], [[3,0,5],[1,2,10]], [3,2]</span><br><span class="line">&gt;即A=$2,B=$5</span><br><span class="line">&gt;3A=5$,1A+2B=10$</span><br><span class="line">&gt;需购买3A+2B</span><br></pre></td></tr></table></figure>
</blockquote>
<table>
<thead>
<tr>
<th style="text-align:left">尝试</th>
<th>price</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">1:单买</td>
<td>16</td>
</tr>
<tr>
<td style="text-align:left">2单买302套餐，还差2个B，则先算出2B的res为10，先试305套餐，A买超了，则退出305套餐，此时还有1210套餐，A买多了，退出套餐，两个套餐试完了，得到了单买两个B，$10的套餐，总价就为15元，</td>
<td>15（覆盖16）</td>
</tr>
<tr>
<td style="text-align:left">3单买1210套餐，还差2A，0B，费用目前10元，先单买2A，费用4元，总价14元，然后先尝试305套餐，发现超，然后再试1210套餐，发现B超了，得到目前最低费用为14元</td>
<td>14（覆盖15）</td>
</tr>
</tbody>
</table>
<p>问题的关键就在于clone的精髓之处，用来记录还需要多少零件的个数，使用递归，进行操作。如果不符合，（如买超了）直接break后，重新计算clone，直到special方法都试完了，然后才返回，如果一直都是break的状态则会返回单买的价格。</p>
<h1 id="perfect"><a href="#perfect" class="headerlink" title="perfect"></a>perfect</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Integer res;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">shoppingOffers</span><span class="params">(List&lt;Integer&gt; price, List&lt;List&lt;Integer&gt;&gt; special, List&lt;Integer&gt; needs)</span> </span>&#123;</span><br><span class="line">        res=Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">int</span>[] parr=<span class="keyword">new</span> <span class="keyword">int</span>[price.size()];</span><br><span class="line">        <span class="keyword">int</span>[] aarr=<span class="keyword">new</span> <span class="keyword">int</span>[needs.size()];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;parr.length; i++)&#123;</span><br><span class="line">            parr[i]=price.get(i);</span><br><span class="line">            aarr[i]=needs.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        findMinimum(special, <span class="number">0</span>, aarr, parr, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">findMinimum</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; special, <span class="keyword">int</span> curOffer, <span class="keyword">int</span>[] remain, <span class="keyword">int</span>[] single, <span class="keyword">int</span> total)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(total&gt;=res||curOffer==special.size()) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> buyNow=buySingle(remain, single, total);</span><br><span class="line">        <span class="keyword">if</span>(buyNow&lt;res) res=buyNow;</span><br><span class="line">        <span class="keyword">int</span>[] newRemain=remainAfterUse(special.get(curOffer), remain);</span><br><span class="line">        <span class="keyword">if</span>(newRemain!=<span class="keyword">null</span>) findMinimum(special, curOffer, newRemain, single, total+special.get(curOffer).get(remain.length));</span><br><span class="line">        findMinimum(special, curOffer+<span class="number">1</span>, remain, single, total);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] remainAfterUse(List&lt;Integer&gt; special, <span class="keyword">int</span>[] remain)&#123;</span><br><span class="line">        <span class="keyword">int</span>[] res=<span class="keyword">new</span> <span class="keyword">int</span>[remain.length];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;remain.length;i++)&#123;</span><br><span class="line">            res[i]=remain[i]-special.get(i);</span><br><span class="line">            <span class="keyword">if</span>(res[i]&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">buySingle</span><span class="params">(<span class="keyword">int</span>[] remain, <span class="keyword">int</span>[] single, <span class="keyword">int</span> total)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;remain.length; i++)&#123;</span><br><span class="line">            total+=remain[i]*single[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> total;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
  </entry>
  <entry>
    <title>NoSql-introduction</title>
    <url>/2019/03/04/2019-03-04-NoSql-introduction/</url>
    <content><![CDATA[<h1 id="why-nosql"><a href="#why-nosql" class="headerlink" title="why nosql"></a>why nosql</h1><p>NoSql可以处理结构化，非结构化的数据，可以水平伸缩，在实时和批量数据分析中具有优势</p>
<h1 id="difference"><a href="#difference" class="headerlink" title="difference"></a>difference</h1>]]></content>
      <categories>
        <category>database</category>
      </categories>
  </entry>
  <entry>
    <title>java类的加载机制</title>
    <url>/2019/03/02/2019-03-02-java%E7%B1%BB%E7%9A%84%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<blockquote>
<p>写在最前面：该文章为笔记，来自<a href="http://www.ityouknow.com">纯洁的微笑</a></p>
</blockquote>
<h1 id="what-is-the-loading-of-class"><a href="#what-is-the-loading-of-class" class="headerlink" title="what is the loading of class"></a>what is the loading of class</h1><p>类加载即：</p>
<p>将编译class文件中的二进制数据读到内存中方法区，然后在堆区通过java.lang.Class实例化对象，对方法区的数据进行操作</p>
<p><img src="http://www.itmind.net/assets/images/2017/jvm/jvm-1.png" alt="img"></p>
<p>该加载过程包含首次使用加载，以及预加载</p>
<h2 id="加载class文件的方式"><a href="#加载class文件的方式" class="headerlink" title="加载class文件的方式"></a>加载class文件的方式</h2><ul>
<li>本地</li>
<li>网络</li>
<li>zip，jar文件中</li>
<li>数据库</li>
<li>动态编译</li>
</ul>
<h1 id="类的生命周期"><a href="#类的生命周期" class="headerlink" title="类的生命周期"></a>类的生命周期</h1><p><img src="http://www.itmind.net/assets/images/2017/jvm/class.png" alt="img"></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>dockerfile</title>
    <url>/2019/03/04/2019-03-04-dockerfile/</url>
    <content><![CDATA[<h1 id="what"><a href="#what" class="headerlink" title="what"></a>what</h1><p>通过dockerfile写入程序、库、资源、配置参数等，来生成image文件，可以类比node的package.json或者nginx.conf的文件</p>
<h1 id="format"><a href="#format" class="headerlink" title="format"></a>format</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#  Dockerfile文件格式</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> This dockerfile uses the ubuntu image</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> VERSION 2 - EDITION 1</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Author: docker_user</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Command format: Instruction [arguments / <span class="built_in">command</span>] ..</span></span><br><span class="line"><span class="meta"> </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 1、第一行必须指定 基础镜像信息</span></span><br><span class="line">FROM ubuntu</span><br><span class="line"><span class="meta"> </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2、维护者信息</span></span><br><span class="line">MAINTAINER docker_user docker_user@email.com</span><br><span class="line"><span class="meta"> </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3、镜像操作指令</span></span><br><span class="line">RUN echo &quot;deb http://archive.ubuntu.com/ubuntu/ raring main universe&quot; &gt;&gt; /etc/apt/sources.list</span><br><span class="line">RUN apt-get update &amp;&amp; apt-get install -y nginx</span><br><span class="line">RUN echo &quot;\ndaemon off;&quot; &gt;&gt; /etc/nginx/nginx.conf</span><br><span class="line"><span class="meta"> </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 4、容器启动执行指令</span></span><br><span class="line">CMD /usr/sbin/nginx</span><br></pre></td></tr></table></figure>
<h2 id="build-image"><a href="#build-image" class="headerlink" title="build image"></a>build image</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker build</span><br></pre></td></tr></table></figure>
<p>运行该命令时，根据dockerfile文件及上下文构建新的docker镜像，其中上下文是指dockerfile所在的本地路径或者网络路径url。</p>
<p>ps:dokcer build时候，会在后台守护进程daemon中进行，而不是cli（common line interface）中，构建前，构建进程将全部内容递归放到守护进程，将dockerfile文件放在（本就在空目录下构建）该目录下</p>
<p>还可以通过.dockerignore的文件来忽略上下文目录中的部分文件和目录，同.gitignore</p>
<p>通过-f命令指定文件位置，如：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker buid -f /path/to/dockerfile .</span><br></pre></td></tr></table></figure>
<h1 id="image-tag"><a href="#image-tag" class="headerlink" title="image tag"></a>image tag</h1><p>镜像标签docker build -t ngix/v3</p>
<h1 id="cache"><a href="#cache" class="headerlink" title="cache"></a>cache</h1><p>Docker 守护进程会一条一条的执行 Dockerfile 中的指令，而且会在每一步提交并生成一个新镜像，最后会输出最终镜像的ID。生成完成后，Docker 守护进程会自动清理你发送的上下文。 Dockerfile文件中的每条指令会被独立执行，并会创建一个新镜像，RUN cd /tmp等命令不会对下条指令产生影响。 <strong>Docker 会重用已生成的中间镜像</strong>，以加速docker build的构建速度。</p>
<h1 id="example"><a href="#example" class="headerlink" title="example"></a>example</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir mynginx</span><br><span class="line">cd mynginx</span><br><span class="line">vi Dockerfile</span><br><span class="line"></span><br><span class="line">//制作dokcerfile</span><br><span class="line">FROM nginx</span><br><span class="line">RUN echo &#x27;&lt;h1&gt;Hello, Docker!&lt;/h1&gt;&#x27; &gt; /usr/share/nginx/html/index.html</span><br><span class="line"></span><br><span class="line">//save &amp;&amp; run this code in mynginx</span><br><span class="line">docker build -t nginx:v1 .</span><br><span class="line">//v1 后面有一个空格和一个点</span><br><span class="line">//点代表当前目录</span><br><span class="line">//查看image</span><br><span class="line">dokcer images</span><br><span class="line"></span><br><span class="line">//run</span><br><span class="line">dokcer run --name docker_nginx_v1 -d -p 80:80 nginx:v1</span><br><span class="line">//docker_nginx_v1为容器名</span><br><span class="line">//nginx:v1为image名</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>docker</title>
    <url>/2019/03/04/2019-03-04-docker/</url>
    <content><![CDATA[<h1 id="why-docker"><a href="#why-docker" class="headerlink" title="why docker"></a>why docker</h1><ol>
<li>解决“在我的机子上可以正常工作”的问题</li>
<li>运维更好地管理服务</li>
<li>更好地迁移和拓展（任意平台运行）</li>
</ol>
<h1 id="what-is-docker"><a href="#what-is-docker" class="headerlink" title="what is docker"></a>what is docker</h1><p>docker属于Linux容器的一种封装，和VM类似，但他不像VM一样虚拟在操作系统之上，而是和操作系统平级，程序运行在容器里，就和在真实的物理机上面运行一样</p>
<p><img src="http://www.itmind.net/assets/images/2018/docker/docker_vs_vm.png" alt="img"></p>
<p>简单一点理解就是：程序运行在docker上和真机上几乎误差，将程序包装起来管理</p>
<h2 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h2><ul>
<li><strong>daemon</strong>：守护进程</li>
<li><strong>Client</strong>：命令行</li>
<li><strong>image</strong>：镜像，用来创建容器</li>
<li><strong>container</strong>：运行组件，启动的image就是容器</li>
<li><strong>registry</strong>：管理image的地方</li>
</ul>
<h1 id="install"><a href="#install" class="headerlink" title="install"></a>install</h1><blockquote>
<p>#<a href="https://docs.docker.com/install/linux/docker-ce/ubuntu/">ubuntu</a></p>
<p>$ sudo apt-get install docker-ce docker-ce-cli containerd.io</p>
</blockquote>
<h1 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h1><blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo docker container run hello-world</span><br><span class="line">//他会先找本地，然后再去仓库下载</span><br><span class="line">//该过程将image变成容器，即image文件产生container文件</span><br></pre></td></tr></table></figure>
</blockquote>
<h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><blockquote>
<p>docker pull image_name//拉取镜像</p>
<p>docker images//本地镜像</p>
<p>docker rmi xxx//remove image</p>
<p>docker ps//view what docker is running</p>
<p>docker ps -a</p>
</blockquote>
<blockquote>
<p>//以下使用<strong>cn</strong>代替 container_name/container_id</p>
<p>docker start|stop|restart cn</p>
<p>docker attach cn//启动后进入容器</p>
<p>dokcer rm cn</p>
<p>docker info</p>
<p>docker search nginx</p>
</blockquote>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>我在一个不属于我的地方游荡</title>
    <url>/2019/03/06/2019-03-06-%E6%88%91%E5%9C%A8%E4%B8%80%E4%B8%AA%E4%B8%8D%E5%B1%9E%E4%BA%8E%E6%88%91%E7%9A%84%E5%9C%B0%E6%96%B9%E6%B8%B8%E8%8D%A1/</url>
    <content><![CDATA[<h1 id="我在一个不属于我的地方游荡"><a href="#我在一个不属于我的地方游荡" class="headerlink" title="我在一个不属于我的地方游荡"></a>我在一个不属于我的地方游荡</h1><p>2019年的3月6日，距离我上一份工作离职，已经37天，日子过得虽然不好，但也不算差，好消息是阿len还陪着我，坏消息是一直过着异地恋的生活，不知道是为什么，是我进入了焦虑的状态，每天的日常就是投简历，思考人生，发呆，看up主秀恩爱</p>
<p>其实回顾前三次的找工作经历，哪次不是觉得自己快要变成咸鱼了，然后收到了一两个offer，不过今年的不同点就是，有三家，我已经过了用人单位的面试，却被卡在了人力资源部门的审核上，我时常恨自己的学历，却无法去原谅曾经高考的自己，写这篇文章的时候，我刚刚从清华的北门进入校园，下午两点半的宿舍区，没有一点噪音，天空的乌鸦鸣叫在空旷的校园回荡，仿佛，在感叹今日的好天气，阳光那么明亮，洒在光秃秃的树枝上。</p>
<p><img src="\img\微信图片_20190310214720.jpg" alt="1552225241907"></p>
<p>17年考研复习期间埋下来的雷，最终还是爆炸了，18年，19年，20年，似乎时间过得很快，我丢失了那一次机会后，我似乎再也没有机会去投入身心去复习，每天的大脑里更多的是，好累啊，好烦啊，什么时候发工资啊。越生是怀念起无忧无虑的本科生活，天天不用担心我是谁，我在哪儿，学什么，可能唯一需要费点脑经的就是，中午吃啥</p>
<p><img src="\img\微信图片_20190310214704.jpg" alt="1552225254472"></p>
<p>而现在，我走在一个不属于我的世界里，熟悉又陌生，我什么都不知道，因为我不知道我要干嘛，前方一个是找不到工作的工作方向，一个是会饿死的考研方向，世界很精彩，我却显得那么渺小，就深深想起来用人部门发信息和我说：</p>
<blockquote>
<p>从技术层面上，我认为从工作年限上，你的水平是够的。对于候选人的学历背景上，央企有自身的痼疾，用人部门的话语权不一定大于人力部门，这个你也无须介怀。</p>
<p>工作的前三年对于一个工程师来说是至关重要的，如果喜欢这条路，就多花点时间，加油！江湖不大，有缘再见！</p>
</blockquote>
<p>不知道接下来应该做什么，或许这就是应试教育的悲哀，我也只能许愿，三月份能够拿到一个不错的offer，先活下来，我是子苏，一个快要得抑郁症的人。</p>
]]></content>
      <categories>
        <category>mood</category>
      </categories>
      <tags>
        <tag>diary</tag>
      </tags>
  </entry>
  <entry>
    <title>docker+springboot</title>
    <url>/2019/03/05/2019-03-05-docker-springboot/</url>
    <content><![CDATA[<h1 id="what"><a href="#what" class="headerlink" title="what"></a>what</h1><p>在 <code>pom.xml-properties</code>中添加 Docker 镜像名称</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;properties&gt;</span><br><span class="line">	&lt;docker.image.prefix&gt;springboot&lt;/docker.image.prefix&gt;</span><br><span class="line">&lt;/properties&gt;</span><br></pre></td></tr></table></figure>
<p>plugins 中添加 Docker 构建插件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;build&gt;</span><br><span class="line">	&lt;plugins&gt;</span><br><span class="line">		&lt;plugin&gt;</span><br><span class="line">			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">			&lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">		&lt;/plugin&gt;</span><br><span class="line">		&lt;!-- Docker maven plugin --&gt;</span><br><span class="line">		&lt;plugin&gt;</span><br><span class="line">			&lt;groupId&gt;com.spotify&lt;/groupId&gt;</span><br><span class="line">			&lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">			&lt;version&gt;1.0.0&lt;/version&gt;</span><br><span class="line">			&lt;configuration&gt;</span><br><span class="line">				&lt;imageName&gt;$&#123;docker.image.prefix&#125;/$&#123;project.artifactId&#125;&lt;/imageName&gt;</span><br><span class="line">				&lt;dockerDirectory&gt;src/main/docker&lt;/dockerDirectory&gt;</span><br><span class="line">				&lt;resources&gt;</span><br><span class="line">					&lt;resource&gt;</span><br><span class="line">						&lt;targetPath&gt;/&lt;/targetPath&gt;</span><br><span class="line">						&lt;directory&gt;$&#123;project.build.directory&#125;&lt;/directory&gt;</span><br><span class="line">						&lt;include&gt;$&#123;project.build.finalName&#125;.jar&lt;/include&gt;</span><br><span class="line">					&lt;/resource&gt;</span><br><span class="line">				&lt;/resources&gt;</span><br><span class="line">			&lt;/configuration&gt;</span><br><span class="line">		&lt;/plugin&gt;</span><br><span class="line">		&lt;!-- Docker maven plugin --&gt;</span><br><span class="line">	&lt;/plugins&gt;</span><br><span class="line">&lt;/build&gt;</span><br></pre></td></tr></table></figure>
<p>在目录<code>src/main/docker</code>下创建 Dockerfile 文件，Dockerfile 文件用来说明如何来构建镜像。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FROM openjdk:8-jdk-alpine</span><br><span class="line">VOLUME /tmp</span><br><span class="line">ADD spring-boot-docker-1.0.jar app.jar</span><br><span class="line">ENTRYPOINT [&quot;java&quot;,&quot;-Djava.security.egd=file:/dev/./urandom&quot;,&quot;-jar&quot;,&quot;/app.jar&quot;]</span><br></pre></td></tr></table></figure>
<p>这个 Dockerfile 文件很简单，构建 Jdk 基础环境，添加 Spring Boot Jar 到镜像中，简单解释一下:</p>
<ul>
<li>FROM ，表示使用 Jdk8 环境 为基础镜像，如果镜像不是本地的会从 DockerHub 进行下载</li>
<li>VOLUME ，VOLUME 指向了一个<code>/tmp</code>的目录，由于 Spring Boot 使用内置的Tomcat容器，Tomcat 默认使用<code>/tmp</code>作为工作目录。这个命令的效果是：在宿主机的<code>/var/lib/docker</code>目录下创建一个临时文件并把它链接到容器中的<code>/tmp</code>目录</li>
<li>ADD ，拷贝文件并且重命名</li>
<li>ENTRYPOINT ，为了缩短 Tomcat 的启动时间，添加<code>java.security.egd</code>的系统属性指向<code>/dev/urandom</code>作为 ENTRYPOINT</li>
</ul>
<blockquote>
<p>这样 Spring Boot 项目添加 Docker 依赖就完成了。</p>
</blockquote>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
  </entry>
  <entry>
    <title>MaximumSubarray</title>
    <url>/2019/03/10/2019-03-10-MaximumSubarray/</url>
    <content><![CDATA[<h1 id="problem"><a href="#problem" class="headerlink" title="problem"></a>problem</h1><blockquote>
<p>Maximum Subarray</p>
<p>Easy</p>
<p>Given an integer array <code>nums</code>, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.</p>
<p><strong>Example:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: [-2,1,-3,4,-1,2,1,-5,4],</span><br><span class="line">Output: 6</span><br><span class="line">Explanation: [4,-1,2,1] has the largest sum = 6.</span><br></pre></td></tr></table></figure>
<p><strong>Follow up:</strong></p>
<p>If you have figured out the O(<em>n</em>) solution, try coding another solution using the divide and conquer approach, which is more subtle.</p>
</blockquote>
<h1 id="key"><a href="#key" class="headerlink" title="key"></a>key</h1><p>我们定义一个和为第一位数，然后用curSum来保存递增量</p>
<p>ps ans–&gt;answer  cur–&gt;cursor</p>
<h1 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans=nums[<span class="number">0</span>], curSum=<span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nums.length; i++) &#123;</span><br><span class="line">            curSum = curSum + nums[i];</span><br><span class="line">            ans = Math.max(ans, curSum);</span><br><span class="line">            curSum = Math.max(<span class="number">0</span>, curSum);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="perfect"><a href="#perfect" class="headerlink" title="perfect"></a>perfect</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> dp = nums[<span class="number">0</span>], maxSum=nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;nums.length; i++) &#123;</span><br><span class="line">            dp = dp&lt;<span class="number">0</span>?nums[i]:nums[i]+dp;</span><br><span class="line">            maxSum=Math.max(maxSum, dp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxSum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
  </entry>
  <entry>
    <title>pow(x,n)</title>
    <url>/2019/03/10/2019-03-10-pow-x-n/</url>
    <content><![CDATA[<h1 id="problem"><a href="#problem" class="headerlink" title="problem"></a>problem</h1><blockquote>
<p>\50. Pow(x, n)</p>
<p>Medium</p>
<p>Implement <a href="http://www.cplusplus.com/reference/valarray/pow/">pow(<em>x</em>, <em>n</em>)</a>, which calculates <em>x</em> raised to the power <em>n</em> (xn).</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: 2.00000, 10</span><br><span class="line">Output: 1024.00000</span><br></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: 2.10000, 3</span><br><span class="line">Output: 9.26100</span><br></pre></td></tr></table></figure>
<p><strong>Example 3:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: 2.00000, -2</span><br><span class="line">Output: 0.25000</span><br><span class="line">Explanation: 2-2 = 1/22 = 1/4 = 0.25</span><br></pre></td></tr></table></figure>
<p><strong>Note:</strong></p>
<ul>
<li>-100.0 &lt; <em>x</em> &lt; 100.0</li>
<li><em>n</em> is a 32-bit signed integer, within the range [−231, 231 − 1]</li>
</ul>
</blockquote>
<h1 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">myPow</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">long</span> N = n;</span><br><span class="line">		<span class="keyword">if</span> (N &lt; <span class="number">0</span>) &#123;</span><br><span class="line">			x = <span class="number">1</span> / x;</span><br><span class="line">			N = -N;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">double</span> ans = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">double</span> cur = x;<span class="comment">//2</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">long</span> i = N; i &gt; <span class="number">0</span>; i /= <span class="number">2</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">1</span>)</span><br><span class="line">				ans = ans * cur;</span><br><span class="line">			cur = cur * cur;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> ans;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"><span class="comment">//偷懒方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">myPow</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> Math.pow(x, n);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<h1 id="key"><a href="#key" class="headerlink" title="key"></a>key</h1><p>其实先使用了偷懒的方法，调用Math库的pow方法，然后写过一版</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">long</span> i=N;i&gt;<span class="number">0</span>;i--) &#123;</span><br><span class="line">	ans=ans*cur;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个会直接报超时的错误，因为的计算量会非常大，在计算（-1.00000，-2147483648）时候超时了，虽然我们可以通过判断x来避免这一个超时，但是我想到了，可以通过n/2来迅速减少相乘的次数。时间大概是8ms</p>
<h1 id="perfect"><a href="#perfect" class="headerlink" title="perfect"></a>perfect</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">findPower</span><span class="params">(<span class="keyword">double</span> x,<span class="keyword">long</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n == Long.valueOf(<span class="number">1</span>))</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        <span class="keyword">if</span>(n % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">double</span> half_pow = findPower(x,n/<span class="number">2</span>);</span><br><span class="line">            <span class="keyword">return</span> half_pow * half_pow;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">double</span> half_pow = findPower(x,(n-<span class="number">1</span>)/<span class="number">2</span>);</span><br><span class="line">            <span class="keyword">return</span> half_pow * half_pow * x;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">myPow</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>( n==<span class="number">0</span> )</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">         </span><br><span class="line">            <span class="keyword">long</span> n_long = (<span class="keyword">long</span>) n;</span><br><span class="line">            <span class="keyword">if</span>( n &gt; <span class="number">0</span> )</span><br><span class="line">                <span class="keyword">return</span> findPower(x,n);</span><br><span class="line">            </span><br><span class="line">            x = <span class="number">1</span> / x;</span><br><span class="line">            <span class="keyword">long</span> n_long_abs =  (<span class="keyword">long</span>) Math.abs((<span class="keyword">long</span>)n);</span><br><span class="line">            <span class="keyword">if</span>(n_long_abs == <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">return</span> x;</span><br><span class="line">            <span class="keyword">return</span> findPower(x,n_long_abs);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
  </entry>
  <entry>
    <title>SpiralMatrix</title>
    <url>/2019/03/12/2019-03-12-SpiralMatrix/</url>
    <content><![CDATA[<h1 id="54-problem"><a href="#54-problem" class="headerlink" title="54.problem"></a>54.problem</h1><blockquote>
<p>Given a matrix of <em>m</em> x <em>n</em> elements (<em>m</em> rows, <em>n</em> columns), return all elements of the matrix in spiral order.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">[</span><br><span class="line"> [ 1, 2, 3 ],</span><br><span class="line"> [ 4, 5, 6 ],</span><br><span class="line"> [ 7, 8, 9 ]</span><br><span class="line">]</span><br><span class="line">Output: [1,2,3,6,9,8,7,4,5]</span><br></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">[</span><br><span class="line">  [1, 2, 3, 4],</span><br><span class="line">  [5, 6, 7, 8],</span><br><span class="line">  [9,10,11,12]</span><br><span class="line">]</span><br><span class="line">Output: [1,2,3,4,8,12,11,10,9,5,6,7]</span><br></pre></td></tr></table></figure>
</blockquote>
<h1 id="key"><a href="#key" class="headerlink" title="key"></a>key</h1><p>很简单的循环输出的例子，从【0,0】的位置顺时针扫一圈，然后缩小一圈，继续扫描，不过有一个细节就是第三次第四循环前，要判断一下,防止最后一层循环只有一行</p>
<h1 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">spiralOrder</span><span class="params">(<span class="keyword">int</span>[][] matrix)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		List&lt;Integer&gt; ans = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">		<span class="keyword">if</span> (matrix.length == <span class="number">0</span>)</span><br><span class="line">			<span class="keyword">return</span> ans;</span><br><span class="line">		<span class="keyword">int</span> rs = <span class="number">0</span>, re = matrix.length - <span class="number">1</span>;<span class="comment">// rowStart rowEnd</span></span><br><span class="line">		<span class="keyword">int</span> cs = <span class="number">0</span>, ce = matrix[<span class="number">0</span>].length - <span class="number">1</span>;<span class="comment">// columnStart columnEnd</span></span><br><span class="line">		<span class="keyword">while</span> (rs &lt;= re &amp;&amp; cs &lt;= ce) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = cs; i &lt;= ce; i++) &#123;</span><br><span class="line">				ans.add(matrix[rs][i]);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=rs+<span class="number">1</span>;j&lt;=re;j++) &#123;</span><br><span class="line">				ans.add(matrix[j][ce]);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(rs&lt;re&amp;&amp;cs&lt;ce) &#123;</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> k=ce-<span class="number">1</span>;k&gt;cs;k--) &#123;</span><br><span class="line">					ans.add(matrix[re][k]);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> l=re;l&gt;rs;l--) &#123;</span><br><span class="line">					ans.add(matrix[l][cs]);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			rs++;</span><br><span class="line">			re--;</span><br><span class="line">			cs++;</span><br><span class="line">			ce--;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> ans;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<h1 id="perfect"><a href="#perfect" class="headerlink" title="perfect"></a>perfect</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yehh,I&#x27;m the perfect</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Medium</tag>
      </tags>
  </entry>
  <entry>
    <title>如何将域名绑定到hexo</title>
    <url>/2019/03/12/2019-03-12-%E5%A6%82%E4%BD%95%E5%B0%86%E5%9F%9F%E5%90%8D%E7%BB%91%E5%AE%9A%E5%88%B0hexo/</url>
    <content><![CDATA[<h1 id="problem"><a href="#problem" class="headerlink" title="problem"></a>problem</h1><p>很多人可能都有hexo博客，会有一个githubname.github.io的地址，然后自己可能想去买一个域名，方便记忆，但是解析后迟迟用不了，该文章就来详细描述一下步骤。</p>
<h1 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h1><p>1.拥有一个githubname.github.io可以正常访问的域名，如我的GitHub博客：<a href="https://shawngoethe.github.io">https://shawngoethe.github.io</a></p>
<p>2.购买域名，个人推荐阿里云，首年年费比较便宜，适合个人折腾，博客建议com,me,info,pro（专家）,mobi(kindle电子书的格式)，再不济可以选择tech，cc之类的，国外可以参考Linost之类的网页</p>
<p>3.购买域名进行实名认证，否则无法使用</p>
<p>4.进行解析：记录类型CNAME（进行转发），主机记录@（避免主机记录选择www，输入域名要多写www），记录值为shawngoethe.github.io,TTL选择10分钟就可以了</p>
<blockquote>
<p>上述方法属于将我购买的zehai.info转发到了shawngoethe.github.io,还可以“记录类型”选择“A”来填写IPv4的地址，地址可以通过ping shawngoethe.github.io 来获得</p>
</blockquote>
<p>5.<strong>修改代码</strong>：很多人忽视了要在源代码/hexoblog/source/目录下添加CNAME文件（注意没有尾缀），然后在该文件下填写zehai.info（可以兼容，<a href="http://www.zehai.info">www.zehai.info</a>  和 zehai.info 两种访问方式，但如果填写 <a href="http://www.zehai.info">www.zehai.info</a> 则只支持 <a href="http://www.zehai.info">www.zehai.info</a> 一种访问方式）</p>
<p>6.等十分钟左右，让解析生效，好了，你可以访问<a href="zehai.info"><strong>我的hexo</strong></a>获取更多内容</p>
]]></content>
      <categories>
        <category>others</category>
      </categories>
  </entry>
  <entry>
    <title>如何设置hexo的favico</title>
    <url>/2019/03/12/2019-03-12-%E5%A6%82%E4%BD%95%E8%AE%BE%E7%BD%AEhexo%E7%9A%84favico/</url>
    <content><![CDATA[<h1 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h1><p>source 下放置32*32的favico.icon文件并在根目录的_config.yml中设置</p>
<blockquote>
<p>favicon: /favicon.ico</p>
</blockquote>
]]></content>
      <categories>
        <category>others</category>
      </categories>
  </entry>
  <entry>
    <title>Java问题排查工具</title>
    <url>/2019/03/13/2019-03-13-Java%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<blockquote>
<p>一下文字摘自JAVA公众号</p>
</blockquote>
<h2 id="Linux命令类"><a href="#Linux命令类" class="headerlink" title="Linux命令类"></a>Linux命令类</h2><h3 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h3><p>最常用的tail -f</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tail -300f shopbase.log #倒数300行并进入实时监听文件写入模式</span><br></pre></td></tr></table></figure>
<h3 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">grep forest f.txt     #文件查找</span><br><span class="line">grep forest f.txt cpf.txt #多文件查找</span><br><span class="line">grep &#x27;log&#x27; /home/admin -r -n #目录下查找所有符合关键字的文件</span><br><span class="line">cat f.txt | grep -i shopbase    </span><br><span class="line">grep &#x27;shopbase&#x27; /home/admin -r -n --include *.&#123;vm,java&#125; #指定文件后缀</span><br><span class="line">grep &#x27;shopbase&#x27; /home/admin -r -n --exclude *.&#123;vm,java&#125; #反匹配</span><br><span class="line">seq 10 | grep 5 -A 3    #上匹配</span><br><span class="line">seq 10 | grep 5 -B 3    #下匹配</span><br><span class="line">seq 10 | grep 5 -C 3    #上下匹配，平时用这个就妥了</span><br><span class="line">cat f.txt | grep -c &#x27;SHOPBASE&#x27;</span><br></pre></td></tr></table></figure>
<h3 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h3><p>1 基础命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">awk &#x27;&#123;print $4,$6&#125;&#x27; f.txt</span><br><span class="line">awk &#x27;&#123;print NR,$0&#125;&#x27; f.txt cpf.txt    </span><br><span class="line">awk &#x27;&#123;print FNR,$0&#125;&#x27; f.txt cpf.txt</span><br><span class="line">awk &#x27;&#123;print FNR,FILENAME,$0&#125;&#x27; f.txt cpf.txt</span><br><span class="line">awk &#x27;&#123;print FILENAME,&quot;NR=&quot;NR,&quot;FNR=&quot;FNR,&quot;$&quot;NF&quot;=&quot;$NF&#125;&#x27; f.txt cpf.txt</span><br><span class="line">echo 1:2:3:4 | awk -F: &#x27;&#123;print $1,$2,$3,$4&#125;&#x27;</span><br></pre></td></tr></table></figure>
<p>2 匹配</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">awk &#x27;/ldb/ &#123;print&#125;&#x27; f.txt   #匹配ldb</span><br><span class="line">awk &#x27;!/ldb/ &#123;print&#125;&#x27; f.txt  #不匹配ldb</span><br><span class="line">awk &#x27;/ldb/ &amp;&amp; /LISTEN/ &#123;print&#125;&#x27; f.txt   #匹配ldb和LISTEN</span><br><span class="line">awk &#x27;$5 ~ /ldb/ &#123;print&#125;&#x27; f.txt #第五列匹配ldb</span><br></pre></td></tr></table></figure>
<p>3 内建变量</p>
<p>NR:NR表示从awk开始执行后，按照记录分隔符读取的数据次数，默认的记录分隔符为换行符，因此默认的就是读取的数据行数，NR可以理解为Number of Record的缩写。</p>
<p>FNR:在awk处理多个输入文件的时候，在处理完第一个文件后，NR并不会从1开始，而是继续累加，因此就出现了FNR，每当处理一个新文件的时候，FNR就从1开始计数，FNR可以理解为File Number of Record。</p>
<p>NF: NF表示目前的记录被分割的字段的数目，NF可以理解为Number of Field。</p>
<h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo -u admin find /home/admin /tmp /usr -name \*.log(多个目录去找)</span><br><span class="line">find . -iname \*.txt(大小写都匹配)</span><br><span class="line">find . -type d(当前目录下的所有子目录)</span><br><span class="line">find /usr -type l(当前目录下所有的符号链接)</span><br><span class="line">find /usr -type l -name &quot;z*&quot; -ls(符号链接的详细信息 eg:inode,目录)</span><br><span class="line">find /home/admin -size +250000k(超过250000k的文件，当然+改成-就是小于了)</span><br><span class="line">find /home/admin f -perm 777 -exec ls -l &#123;&#125; \; (按照权限查询文件)</span><br><span class="line">find /home/admin -atime -1  1天内访问过的文件</span><br><span class="line">find /home/admin -ctime -1  1天内状态改变过的文件    </span><br><span class="line">find /home/admin -mtime -1  1天内修改过的文件</span><br><span class="line">find /home/admin -amin -1  1分钟内访问过的文件</span><br><span class="line">find /home/admin -cmin -1  1分钟内状态改变过的文件    </span><br><span class="line">find /home/admin -mmin -1  1分钟内修改过的文件</span><br></pre></td></tr></table></figure>
<h3 id="pgm"><a href="#pgm" class="headerlink" title="pgm"></a>pgm</h3><p>批量查询vm-shopbase满足条件的日志</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pgm -A -f vm-shopbase &#x27;cat /home/admin/shopbase/logs/shopbase.log.2017-01-17|grep 2069861630&#x27;</span><br></pre></td></tr></table></figure>
<h3 id="tsar"><a href="#tsar" class="headerlink" title="tsar"></a>tsar</h3><p>tsar是咱公司自己的采集工具。很好用, 将历史收集到的数据持久化在磁盘上，所以我们快速来查询历史的系统数据。当然实时的应用情况也是可以查询的啦。大部分机器上都有安装。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tsar  ##可以查看最近一天的各项指标</span><br></pre></td></tr></table></figure>
<p><img src="http://ata2-img.cn-hangzhou.img-pub.aliyun-inc.com/fc25b8f22e53818d5576c5d00dd52618.png" alt="screenshot.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tsar --live ##可以查看实时指标，默认五秒一刷</span><br></pre></td></tr></table></figure>
<p><img src="http://ata2-img.cn-hangzhou.img-pub.aliyun-inc.com/b68910c5416fd85a99a49a092fc9ffbb.png" alt="screenshot.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tsar -d 20161218 ##指定查看某天的数据，貌似最多只能看四个月的数据</span><br></pre></td></tr></table></figure>
<p><img src="http://ata2-img.cn-hangzhou.img-pub.aliyun-inc.com/aafdbfb515b817a2aceb270d1d470c19.png" alt="screenshot.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tsar --mem</span><br><span class="line">tsar --load</span><br><span class="line">tsar --cpu</span><br><span class="line">##当然这个也可以和-d参数配合来查询某天的单个指标的情况 </span><br></pre></td></tr></table></figure>
<p><img src="http://ata2-img.cn-hangzhou.img-pub.aliyun-inc.com/cb46ef4e374e1502d3b672d04d48099a.png" alt="screenshot.png"><br><img src="http://ata2-img.cn-hangzhou.img-pub.aliyun-inc.com/079f3fa722bfa1991557469eb97c7273.png" alt="screenshot.png"><br><img src="http://ata2-img.cn-hangzhou.img-pub.aliyun-inc.com/6dd77351ad4d1ad84cdbfba20c9d4c29.png" alt="screenshot.png"></p>
<h3 id="top"><a href="#top" class="headerlink" title="top"></a>top</h3><p>top除了看一些基本信息之外，剩下的就是配合来查询vm的各种问题了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps -ef | grep java</span><br><span class="line">top -H -p pid</span><br><span class="line"> </span><br></pre></td></tr></table></figure>
<p>获得线程10进制转16进制后jstack去抓看这个线程到底在干啥</p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netstat -nat|awk  &#x27;&#123;print $6&#125;&#x27;|sort|uniq -c|sort -rn </span><br><span class="line">#查看当前连接，注意close_wait偏高的情况，比如如下</span><br></pre></td></tr></table></figure>
<p><img src="http://ata2-img.cn-hangzhou.img-pub.aliyun-inc.com/250a027410775cf5990d0db6e87ba927.png" alt="screenshot.png"><br><img src="http://ata2-img.cn-hangzhou.img-pub.aliyun-inc.com/639811da529750064e2f70867d6234e0.png" alt="screenshot.png"></p>
<h2 id="排查利器"><a href="#排查利器" class="headerlink" title="排查利器"></a>排查利器</h2><h3 id="btrace"><a href="#btrace" class="headerlink" title="btrace"></a>btrace</h3><p>首当其冲的要说的是btrace。真是生产环境&amp;预发的排查问题大杀器。 简介什么的就不说了。直接上代码干</p>
<ol>
<li><p>查看当前谁调用了ArrayList的add方法，同时只打印当前ArrayList的size大于500的线程调用栈</p>
<p>@OnMethod(clazz = “java.util.ArrayList”, method=”add”, location = @Location(value = Kind.CALL, clazz = “/.<em>/“, method = “/.</em>/“))<br>public static void m(@ProbeClassName String probeClass, @ProbeMethodName String probeMethod, @TargetInstance Object instance, @TargetMethodOrField String method) {</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(getInt(field(&quot;java.util.ArrayList&quot;, &quot;size&quot;), instance) &gt; 479)&#123;</span><br><span class="line">    println(&quot;check who ArrayList.add method:&quot; + probeClass + &quot;#&quot; + probeMethod  + &quot;, method:&quot; + method + &quot;, size:&quot; + getInt(field(&quot;java.util.ArrayList&quot;, &quot;size&quot;), instance));</span><br><span class="line">    jstack();</span><br><span class="line">    println();</span><br><span class="line">    println(&quot;===========================&quot;);</span><br><span class="line">    println();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>}</p>
</li>
<li><p>监控当前服务方法被调用时返回的值以及请求的参数</p>
<p>@OnMethod(clazz = “com.taobao.sellerhome.transfer.biz.impl.C2CApplyerServiceImpl”, method=”nav”, location = @Location(value = Kind.RETURN))<br>public static void mt(long userId, int current, int relation, String check, String redirectUrl, @Return AnyType result) {</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">println(&quot;parameter# userId:&quot; + userId + &quot;, current:&quot; + current + &quot;, relation:&quot; + relation + &quot;, check:&quot; + check + &quot;, redirectUrl:&quot; + redirectUrl + &quot;, result:&quot; + result);</span><br></pre></td></tr></table></figure>
<p>}</p>
</li>
</ol>
<p>其他功能集团的一些工具或多或少都有，就不说了。感兴趣的请移步。<br><a href="https://github.com/btraceio/btrace">https://github.com/btraceio/btrace</a></p>
<p>注意:</p>
<ol>
<li>经过观察，1.3.9的release输出不稳定，要多触发几次才能看到正确的结果</li>
<li>正则表达式匹配trace类时范围一定要控制，否则极有可能出现跑满CPU导致应用卡死的情况</li>
<li>由于是字节码注入的原理，想要应用恢复到正常情况，需要重启应用。</li>
</ol>
<h3 id="Greys"><a href="#Greys" class="headerlink" title="Greys"></a>Greys</h3><p>Greys是@杜琨的大作吧。说几个挺棒的功能(部分功能和btrace重合):</p>
<p><code>sc -df xxx</code>: 输出当前类的详情,包括源码位置和classloader结构</p>
<p><code>trace class method</code>: 相当喜欢这个功能! 很早前可以早JProfiler看到这个功能。打印出当前方法调用的耗时情况，细分到每个方法。对排查方法性能时很有帮助，比如我之前这篇就是使用了trace命令来的:<a href="http://www.atatech.org/articles/52947">http://www.atatech.org/articles/52947</a>。</p>
<p>其他功能部分和btrace重合，可以选用，感兴趣的请移步。<br><a href="http://www.atatech.org/articles/26247">http://www.atatech.org/articles/26247</a></p>
<p>另外相关联的是arthas，他是基于Greys的，感兴趣的再移步<a href="http://mw.alibaba-inc.com/products/arthas/docs/middleware-container/arthas.wiki/home.html?spm=a1z9z.8109794.header.32.1lsoMc">http://mw.alibaba-inc.com/products/arthas/docs/middleware-container/arthas.wiki/home.html?spm=a1z9z.8109794.header.32.1lsoMc</a></p>
<h3 id="javOSize"><a href="#javOSize" class="headerlink" title="javOSize"></a>javOSize</h3><p>就说一个功能<br><code>classes</code>：通过修改了字节码，改变了类的内容，即时生效。 所以可以做到快速的在某个地方打个日志看看输出，缺点是对代码的侵入性太大。但是如果自己知道自己在干嘛，的确是不错的玩意儿。</p>
<p>其他功能Greys和btrace都能很轻易做的到，不说了。</p>
<p>可以看看我之前写的一篇javOSize的简介<a href="http://www.atatech.org/articles/38546">http://www.atatech.org/articles/38546</a><br>官网请移步<a href="http://www.javosize.com/">http://www.javosize.com/</a></p>
<h3 id="JProfiler"><a href="#JProfiler" class="headerlink" title="JProfiler"></a>JProfiler</h3><p>之前判断许多问题要通过JProfiler，但是现在Greys和btrace基本都能搞定了。再加上出问题的基本上都是生产环境(网络隔离)，所以基本不怎么使用了，但是还是要标记一下。<br>官网请移步<a href="https://www.ej-technologies.com/products/jprofiler/overview.html">https://www.ej-technologies.com/products/jprofiler/overview.html</a></p>
<h2 id="大杀器"><a href="#大杀器" class="headerlink" title="大杀器"></a>大杀器</h2><h3 id="eclipseMAT"><a href="#eclipseMAT" class="headerlink" title="eclipseMAT"></a>eclipseMAT</h3><p>可作为eclipse的插件，也可作为单独的程序打开。<br>详情请移步<a href="http://www.eclipse.org/mat/">http://www.eclipse.org/mat/</a></p>
<h3 id="zprofiler"><a href="#zprofiler" class="headerlink" title="zprofiler"></a>zprofiler</h3><p>集团内的开发应该是无人不知无人不晓了。简而言之一句话:有了zprofiler还要mat干嘛<br>详情请移步<a href="http://zprofiler.alibaba-inc.com/">zprofiler.alibaba-inc.com</a></p>
<h2 id="java三板斧，噢不对，是七把"><a href="#java三板斧，噢不对，是七把" class="headerlink" title="java三板斧，噢不对，是七把"></a>java三板斧，噢不对，是七把</h2><h3 id="jps"><a href="#jps" class="headerlink" title="jps"></a>jps</h3><p>我只用一条命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo -u admin /opt/taobao/java/bin/jps -mlvV</span><br></pre></td></tr></table></figure>
<p><img src="http://ata2-img.cn-hangzhou.img-pub.aliyun-inc.com/7b156cb53250bf5f91811900c2575a91.png" alt="screenshot.png"></p>
<h3 id="jstack"><a href="#jstack" class="headerlink" title="jstack"></a>jstack</h3><p>普通用法:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo -u admin /opt/taobao/install/ajdk-8_1_1_fp1-b52/bin/jstack 2815</span><br></pre></td></tr></table></figure>
<p><img src="http://ata2-img.cn-hangzhou.img-pub.aliyun-inc.com/bc501bf424b3d2884e6ec118d14554a3.png" alt="screenshot.png"></p>
<p>native+java栈:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo -u admin /opt/taobao/install/ajdk-8_1_1_fp1-b52/bin/jstack -m 2815</span><br></pre></td></tr></table></figure>
<p><img src="http://ata2-img.cn-hangzhou.img-pub.aliyun-inc.com/4c59dc2971f3d8778e1898d64266266a.png" alt="screenshot.png"></p>
<h3 id="jinfo"><a href="#jinfo" class="headerlink" title="jinfo"></a>jinfo</h3><p>可看系统启动的参数，如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo -u admin /opt/taobao/install/ajdk-8_1_1_fp1-b52/bin/jinfo -flags 2815</span><br></pre></td></tr></table></figure>
<p><img src="http://ata2-img.cn-hangzhou.img-pub.aliyun-inc.com/bc879145e2994e9a09327407ed88382c.png" alt="screenshot.png"></p>
<h3 id="jmap"><a href="#jmap" class="headerlink" title="jmap"></a>jmap</h3><p>两个用途</p>
<p>1.查看堆的情况</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo -u admin /opt/taobao/install/ajdk-8_1_1_fp1-b52/bin/jmap -heap 2815</span><br></pre></td></tr></table></figure>
<p><img src="http://ata2-img.cn-hangzhou.img-pub.aliyun-inc.com/00d9eaef08cdb51263d202d26795036b.png" alt="screenshot.png"><br><img src="http://ata2-img.cn-hangzhou.img-pub.aliyun-inc.com/3c08bccf81fef8b7bcae2b321012b503.png" alt="screenshot.png"></p>
<p>2.dump</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo -u admin /opt/taobao/install/ajdk-8_1_1_fp1-b52/bin/jmap -dump:live,format=b,file=/tmp/heap2.bin 2815</span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo -u admin /opt/taobao/install/ajdk-8_1_1_fp1-b52/bin/jmap -dump:format=b,file=/tmp/heap3.bin 2815</span><br></pre></td></tr></table></figure>
<p>3.看看堆都被谁占了? 再配合zprofiler和btrace，排查问题简直是如虎添翼</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo -u admin /opt/taobao/install/ajdk-8_1_1_fp1-b52/bin/jmap -histo 2815 | head -10</span><br></pre></td></tr></table></figure>
<p><img src="http://ata2-img.cn-hangzhou.img-pub.aliyun-inc.com/500ec6709fcd03a4fca2679615d54522.png" alt="screenshot.png"></p>
<h3 id="jstat"><a href="#jstat" class="headerlink" title="jstat"></a>jstat</h3><p>jstat参数众多，但是使用一个就够了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo -u admin /opt/taobao/install/ajdk-8_1_1_fp1-b52/bin/jstat -gcutil 2815 1000 </span><br></pre></td></tr></table></figure>
<p><img src="http://ata2-img.cn-hangzhou.img-pub.aliyun-inc.com/05743916a9187535c202fb410d30d50d.png" alt="screenshot.png"></p>
<h3 id="jdb"><a href="#jdb" class="headerlink" title="jdb"></a>jdb</h3><p>时至今日，jdb也是经常使用的。<br>jdb可以用来预发debug,假设你预发的java_home是/opt/taobao/java/，远程调试端口是8000.那么<br><code>sudo -u admin /opt/taobao/java/bin/jdb -attach 8000</code>.</p>
<p><img src="http://ata2-img.cn-hangzhou.img-pub.aliyun-inc.com/16332fcd45b20137bffc7a3b9a88b0f1.png" alt="screenshot.png"></p>
<p>出现以上代表jdb启动成功。后续可以进行设置断点进行调试。<br>具体参数可见oracle官方说明<a href="http://docs.oracle.com/javase/7/docs/technotes/tools/windows/jdb.html">http://docs.oracle.com/javase/7/docs/technotes/tools/windows/jdb.html</a></p>
<h3 id="CHLSDB"><a href="#CHLSDB" class="headerlink" title="CHLSDB"></a>CHLSDB</h3><p>CHLSDB感觉很多情况下可以看到更好玩的东西，不详细叙述了。 查询资料听说jstack和jmap等工具就是基于它的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo -u admin /opt/taobao/java/bin/java -classpath /opt/taobao/java/lib/sa-jdi.jar sun.jvm.hotspot.CLHSDB</span><br></pre></td></tr></table></figure>
<p>更详细的可见R大此贴<br><a href="http://rednaxelafx.iteye.com/blog/1847971">http://rednaxelafx.iteye.com/blog/1847971</a></p>
<h2 id="plugin-of-intellij-idea"><a href="#plugin-of-intellij-idea" class="headerlink" title="plugin of intellij idea"></a>plugin of intellij idea</h2><h3 id="key-promoter"><a href="#key-promoter" class="headerlink" title="key promoter"></a>key promoter</h3><p>快捷键一次你记不住，多来几次你总能记住了吧？</p>
<p><img src="http://ata2-img.cn-hangzhou.img-pub.aliyun-inc.com/356c11885a95e28736a605aecdc8083e.png" alt="screenshot.png"></p>
<h3 id="maven-helper"><a href="#maven-helper" class="headerlink" title="maven helper"></a>maven helper</h3><p>分析maven依赖的好帮手。</p>
<h2 id="VM-options"><a href="#VM-options" class="headerlink" title="VM options"></a>VM options</h2><ol>
<li><p>你的类到底是从哪个文件加载进来的？</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-XX:+TraceClassLoading</span><br><span class="line">结果形如[Loaded java.lang.invoke.MethodHandleImpl$Lazy from D:\programme\jdk\jdk8U74\jre\lib\rt.jar]</span><br><span class="line"> </span><br></pre></td></tr></table></figure>
</li>
<li><p>应用挂了输出dump文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/home/admin/logs/java.hprof</span><br><span class="line">集团的vm参数里边基本都有这个选项</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="jar包冲突"><a href="#jar包冲突" class="headerlink" title="jar包冲突"></a>jar包冲突</h2><p>把这个单独写个大标题不过分吧？每个人或多或少都处理过这种烦人的case。我特么下边这么多方案不信就搞不定你?</p>
<h3 id="mvn-dependency-tree-gt-dependency-txt"><a href="#mvn-dependency-tree-gt-dependency-txt" class="headerlink" title="mvn dependency:tree &gt; ~/dependency.txt"></a>mvn dependency:tree &gt; ~/dependency.txt</h3><p>打出所有依赖</p>
<h3 id="mvn-dependency-tree-Dverbose-Dincludes-groupId-artifactId"><a href="#mvn-dependency-tree-Dverbose-Dincludes-groupId-artifactId" class="headerlink" title="mvn dependency:tree -Dverbose -Dincludes=groupId:artifactId"></a>mvn dependency:tree -Dverbose -Dincludes=groupId:artifactId</h3><p>只打出指定groupId和artifactId的依赖关系</p>
<h3 id="XX-TraceClassLoading"><a href="#XX-TraceClassLoading" class="headerlink" title="-XX:+TraceClassLoading"></a>-XX:+TraceClassLoading</h3><p>vm启动脚本加入。在tomcat启动脚本中可见加载类的详细信息</p>
<h3 id="verbose"><a href="#verbose" class="headerlink" title="-verbose"></a>-verbose</h3><p>vm启动脚本加入。在tomcat启动脚本中可见加载类的详细信息</p>
<h3 id="greys-sc"><a href="#greys-sc" class="headerlink" title="greys:sc"></a>greys:sc</h3><p>greys的sc命令也能清晰的看到当前类是从哪里加载过来的</p>
<h3 id="tomcat-classloader-locate"><a href="#tomcat-classloader-locate" class="headerlink" title="tomcat-classloader-locate"></a>tomcat-classloader-locate</h3><p>通过以下url可以获知当前类是从哪里加载的<br>curl <a href="http://localhost:8006/classloader/locate?class=org.apache.xerces.xs.XSObject">http://localhost:8006/classloader/locate?class=org.apache.xerces.xs.XSObject</a></p>
<h2 id="ALI-TOMCAT带给我们的惊喜-感谢-务观"><a href="#ALI-TOMCAT带给我们的惊喜-感谢-务观" class="headerlink" title="ALI-TOMCAT带给我们的惊喜(感谢@务观)"></a>ALI-TOMCAT带给我们的惊喜(感谢@务观)</h2><ol>
<li><p>列出容器加载的jar列表</p>
<p>curl <a href="http://localhost:8006/classloader/jars">http://localhost:8006/classloader/jars</a></p>
</li>
<li><p>列出当前当当前类加载的实际jar包位置，解决类冲突时有用</p>
<p>curl <a href="http://localhost:8006/classloader/locate?class=org.apache.xerces.xs.XSObject">http://localhost:8006/classloader/locate?class=org.apache.xerces.xs.XSObject</a><br><img src="http://ata2-img.cn-hangzhou.img-pub.aliyun-inc.com/4568b16d3db0daf98e852412b830f1a8.png" alt="screenshot.png"></p>
</li>
</ol>
<h2 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a>其他</h2><h3 id="gpref"><a href="#gpref" class="headerlink" title="gpref"></a>gpref</h3><p><a href="http://www.atatech.org/articles/33317">http://www.atatech.org/articles/33317</a></p>
<h3 id="dmesg"><a href="#dmesg" class="headerlink" title="dmesg"></a>dmesg</h3><p>如果发现自己的java进程悄无声息的消失了，几乎没有留下任何线索，那么dmesg一发，很有可能有你想要的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo dmesg|grep -i kill|less</span><br></pre></td></tr></table></figure>
<p>去找关键字oom_killer。找到的结果类似如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[6710782.021013] java invoked oom-killer: gfp_mask=0xd0, order=0, oom_adj=0, oom_scoe_adj=0</span><br><span class="line">[6710782.070639] [&lt;ffffffff81118898&gt;] ? oom_kill_process+0x68/0x140 </span><br><span class="line">[6710782.257588] Task in /LXC011175068174 killed as a result of limit of /LXC011175068174 </span><br><span class="line">[6710784.698347] Memory cgroup out of memory: Kill process 215701 (java) score 854 or sacrifice child </span><br><span class="line">[6710784.707978] Killed process 215701, UID 679, (java) total-vm:11017300kB, anon-rss:7152432kB, file-rss:1232kB</span><br></pre></td></tr></table></figure>
<p>以上表明，对应的java进程被系统的OOM Killer给干掉了，得分为854.<br>解释一下OOM killer（Out-Of-Memory killer），该机制会监控机器的内存资源消耗。当机器内存耗尽前，该机制会扫描所有的进程（按照一定规则计算，内存占用，时间等），挑选出得分最高的进程，然后杀死，从而保护机器。</p>
<p>dmesg日志时间转换公式:<br>log实际时间=格林威治1970-01-01+(当前时间秒数-系统启动至今的秒数+dmesg打印的log时间)秒数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">date -d &quot;1970-01-01 UTC `echo &quot;$(date +%s)-$(cat /proc/uptime|cut -f 1 -d&#x27; &#x27;)+12288812.926194&quot;|bc ` seconds&quot;</span><br></pre></td></tr></table></figure>
<p>剩下的，就是看看为什么内存这么大，触发了OOM-Killer了。</p>
<h2 id="新技能get"><a href="#新技能get" class="headerlink" title="新技能get"></a>新技能get</h2><h3 id="RateLimiter"><a href="#RateLimiter" class="headerlink" title="RateLimiter"></a>RateLimiter</h3><p>想要精细的控制QPS? 比如这样一个场景，你调用某个接口，对方明确需要你限制你的QPS在400之内你怎么控制？这个时候RateLimiter就有了用武之地。详情可移步<a href="http://ifeve.com/guava-ratelimiter/">http://ifeve.com/guava-ratelimite</a></p>
]]></content>
  </entry>
  <entry>
    <title>JumpGame</title>
    <url>/2019/03/13/2019-03-13-JumpGame/</url>
    <content><![CDATA[<h1 id="problem"><a href="#problem" class="headerlink" title="problem"></a>problem</h1><blockquote>
<p>Given an array of non-negative integers, you are initially positioned at the first index of the array.</p>
<p>Each element in the array represents your maximum jump length at that position.</p>
<p>Determine if you are able to reach the last index.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: [2,3,1,1,4]</span><br><span class="line">Output: true</span><br><span class="line">Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.</span><br></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: [3,2,1,0,4]</span><br><span class="line">Output: false</span><br><span class="line">Explanation: You will always arrive at index 3 no matter what. Its maximum</span><br><span class="line">             jump length is 0, which makes it impossible to reach the last index.</span><br></pre></td></tr></table></figure>
</blockquote>
<h1 id="key"><a href="#key" class="headerlink" title="key"></a>key</h1><p>本题有两个易理解错的地方</p>
<ul>
<li>达到最后一个index或者超过最后一个index是可以的</li>
<li>【2,5,0,0】第一个2可以跳两步，然后我们在5的基础上跳五步</li>
</ul>
<p>本题采用贪心算法，算出局部最优解就可以了，当然也可以考虑dp，但本题没有这个必要</p>
<h1 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canJump</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> reach = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length &amp;&amp; reach &gt;= i; i++)</span><br><span class="line">            <span class="keyword">if</span>(i + nums[i] &gt; reach) reach = i + nums[i];</span><br><span class="line">        <span class="keyword">return</span> reach &gt;= (nums.length-<span class="number">1</span>) ? <span class="keyword">true</span> : <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<h1 id="perfect"><a href="#perfect" class="headerlink" title="perfect"></a>perfect</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">I&#x27;m the perfect</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Medium</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringbootMQ</title>
    <url>/2019/03/13/2019-03-13-SpringbootMQ/</url>
    <content><![CDATA[<h2 id="what-is-MQ"><a href="#what-is-MQ" class="headerlink" title="what is MQ"></a>what is MQ</h2><p>如果想知道MQ的详细知识可以看我之前的<a href="/2019/01/24/2019-01-24-为什么使用消息队列MQ/">为什么使用消息队列MQ</a></p>
<p>这里选择最重要的提一下：MQ即消息队列，用来实现程序的异步和解耦，起到消息缓冲，消息分发。通俗来讲就是一个医院（服务器）里面有多个医生（线程或进程），让病人都排队（消息缓冲），有的去A部门，有的去B部门（消息分发）。</p>
<h2 id="成员RabbitMQ"><a href="#成员RabbitMQ" class="headerlink" title="成员RabbitMQ"></a>成员RabbitMQ</h2><p>RabbitMQ是实现AMQP（高级消息队列协议Advanced Message Queuing Protocol）的消息中间件的一种，Feature就是组件之间解耦，病人排他的队，医生看他的病人，至于怎么排，医生不用操心，至于怎么看病，病人不用操心，都交给MQ</p>
<p>术语：面向消息，队列，路由（点对点/发布订阅），可靠安全</p>
]]></content>
      <categories>
        <category>high_availability</category>
      </categories>
      <tags>
        <tag>MQ</tag>
      </tags>
  </entry>
  <entry>
    <title>安装mysql服务以及常见问题解决</title>
    <url>/2019/03/14/2019-03-14-ubuntu%E5%AE%89%E8%A3%85mysql%E6%9C%8D%E5%8A%A1%E4%BB%A5%E5%8F%8A%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
    <content><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>sudo apt-get update</p>
<p>sudo apt-get install mysql-server</p>
<h1 id="解决远程连接"><a href="#解决远程连接" class="headerlink" title="解决远程连接"></a>解决远程连接</h1><blockquote>
<p>tips本人使用环境ubuntu16</p>
</blockquote>
<p>完成安装后，远程连接你会发现2003报错，此时，你对 /etc/mysql/mysql.conf.d/ 文件夹中打开 mysqld.cnf文件修改即可</p>
<blockquote>
<p> 修改内容将#bind-address = 127.0.0.1 原本没有注释，进行注释</p>
</blockquote>
<p>然后你重新远程连接mysql直接变成1130的拒绝访问服务，接下来你要在服务器端登录mysql，执行 </p>
<blockquote>
<p>进入数据库</p>
<p>mysql -u root -p</p>
<p>切换数据库,</p>
<p>mysql&gt;use mysql;</p>
<p>查看root账号的登录权限,</p>
<p>mysql&gt;select host, user from user;</p>
<p>修改登录权限</p>
<p>mysql&gt;update user set host = ‘%’ where user = ‘root’;</p>
<p>刷新,生效,最后一步,至关重要</p>
<p>mysql&gt;flush   privileges;</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>bashrc</title>
    <url>/2019/03/15/2019-03-15-bashrc/</url>
    <content><![CDATA[<h1 id="where"><a href="#where" class="headerlink" title="where"></a>where</h1><p>通常在home目录下的一个隐藏文件，访问可以<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim ~/.bashrc</span><br></pre></td></tr></table></figure></p>
<h1 id="what"><a href="#what" class="headerlink" title="what"></a>what</h1><p>bash 在每次启动时都会加载 .bashrc 文件的内容。每个用户的 home 目录都有这个 shell 脚本。它用来存储并加载你的终端配置和环境变量</p>
<h1 id="end"><a href="#end" class="headerlink" title="end"></a>end</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//更新修改</span><br><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>FindMinimumInRotatedSortedArray</title>
    <url>/2019/03/23/2019-03-23-FindMinimumInRotatedSortedArray/</url>
    <content><![CDATA[<h1 id="problem"><a href="#problem" class="headerlink" title="problem"></a>problem</h1><blockquote>
<ol start="153">
<li>Find Minimum in Rotated Sorted Array</li>
</ol>
<p>Medium</p>
<p>Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.</p>
<p>(i.e.,  <code>[0,1,2,4,5,6,7]</code> might become  <code>[4,5,6,7,0,1,2]</code>).</p>
<p>Find the minimum element.</p>
<p>You may assume no duplicate exists in the array.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;Input: [3,4,5,1,2] </span><br><span class="line">&gt;Output: 1</span><br></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;Input: [4,5,6,7,0,1,2]</span><br><span class="line">&gt;Output: 0</span><br></pre></td></tr></table></figure>
</blockquote>
<h1 id="key"><a href="#key" class="headerlink" title="key"></a>key</h1><h1 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findMin</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (nums[i] &gt; nums[i + <span class="number">1</span>]) &#123;</span><br><span class="line">				<span class="keyword">return</span> nums[i + <span class="number">1</span>];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<h1 id="perfect"><a href="#perfect" class="headerlink" title="perfect"></a>perfect</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">I&#x27;m the perfect</span><br><span class="line">but this problem will harder in the next problem</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Medium</tag>
      </tags>
  </entry>
  <entry>
    <title>FindMinimumInRotatedSortedArrayII</title>
    <url>/2019/03/23/2019-03-23-FindMinimumInRotatedSortedArrayII/</url>
    <content><![CDATA[<h1 id="problem"><a href="#problem" class="headerlink" title="problem"></a>problem</h1><blockquote>
<ol start="154">
<li>Find Minimum in Rotated Sorted Array II</li>
</ol>
<p>Hard</p>
<p>Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.</p>
<p>(i.e.,  <code>[0,1,2,4,5,6,7]</code> might become  <code>[4,5,6,7,0,1,2]</code>).</p>
<p>Find the minimum element.</p>
<p>The array may contain duplicates.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;Input: [1,3,5]</span><br><span class="line">&gt;Output: 1</span><br></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;Input: [2,2,2,0,1]</span><br><span class="line">&gt;Output: 0</span><br></pre></td></tr></table></figure>
<p><strong>Note:</strong></p>
<ul>
<li>This is a follow up problem to <a href="https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/description/">Find Minimum in Rotated Sorted Array</a>.</li>
<li>Would allow duplicates affect the run-time complexity? How and why?</li>
</ul>
</blockquote>
<h1 id="key"><a href="#key" class="headerlink" title="key"></a>key</h1><p>???</p>
<h1 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findMin</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (nums[i] &gt; nums[i + <span class="number">1</span>]) &#123;</span><br><span class="line">				<span class="keyword">return</span> nums[i + <span class="number">1</span>];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="perfect"><a href="#perfect" class="headerlink" title="perfect"></a>perfect</h1>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Hard</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql事务</title>
    <url>/2019/03/23/2019-03-23-mysql%E4%BA%8B%E5%8A%A1/</url>
    <content><![CDATA[<h1 id="what"><a href="#what" class="headerlink" title="what"></a>what</h1><p>MYSQL事务主要用于保证一串事情要么都成功，要么就回滚，例如付款后，要先写入支付订单表，再个人信息中加入会员权益。这两个操作要么顺序执行成功，要么就回滚</p>
<h1 id="原则"><a href="#原则" class="headerlink" title="原则"></a>原则</h1><p>ACID</p>
<ul>
<li><p>Atomicity原子性</p>
<p>确保事务内的所有操作都成功完成，否则事务将被中止在故障点，以前的操作将回滚到以前的状态。</p>
</li>
<li><p>Consistency一致性</p>
<p>数据库的修改是一致的</p>
</li>
<li><p><strong>Isolation隔离性</strong></p>
<p>事务是彼此独立的</p>
</li>
<li><p>Durability可靠性</p>
<p>确保事务提交后，结果永久存在</p>
</li>
</ul>
<p><strong>隔离性</strong></p>
<p>隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致。事务隔离分为不同级别，包括</p>
<p>读未提交（Read uncommitted）–不严格</p>
<p>读提交（read committed）</p>
<p>可重复读（repeatable read）–默认级别（避免幻读）</p>
<p>串行化（Serializable）–最严格</p>
<h1 id="没有隔离性的问题"><a href="#没有隔离性的问题" class="headerlink" title="没有隔离性的问题"></a>没有隔离性的问题</h1><h2 id="1-脏读"><a href="#1-脏读" class="headerlink" title="1.脏读"></a>1.脏读</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">update account set money=money+100 where name=’B’;</span><br><span class="line">update account set money=money - 100 where name=’A’;</span><br></pre></td></tr></table></figure>
<p>当执行第一条语句的时候，事务没有提交，那么来读B的账户钱都多了100块</p>
<p><strong>脏读：读取了另一个事务未提交的数据</strong></p>
<h2 id="2-不可重复读"><a href="#2-不可重复读" class="headerlink" title="2.不可重复读"></a>2.不可重复读</h2><p>情景：多次读同一个数据的时候，这个数据被别人改了，导致结果不一致</p>
<h2 id="3-幻读"><a href="#3-幻读" class="headerlink" title="3.幻读"></a>3.幻读</h2><p>幻读和不可重复读一样，读取到了另外一条已经提交的事务，所不同的是它针对的是一批数据的整体</p>
<h1 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h1><h2 id="自动方式"><a href="#自动方式" class="headerlink" title="自动方式"></a>自动方式</h2><p>beginTransactionScope(scope, ctx)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const result = await app.mysql.beginTransactionScope(async conn =&gt; &#123;</span><br><span class="line">  // don&#x27;t commit or rollback by yourself</span><br><span class="line">  await conn.insert(table, row1);</span><br><span class="line">  await conn.update(table, row2);</span><br><span class="line">  return &#123; success: true &#125;;</span><br><span class="line">&#125;, ctx); </span><br><span class="line">// if error throw on scope, will auto rollback</span><br></pre></td></tr></table></figure>
<h2 id="手动方式"><a href="#手动方式" class="headerlink" title="手动方式"></a>手动方式</h2><p>beginTransaction</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const conn = await app.mysql.beginTransaction(); // 初始化事务</span><br><span class="line">try &#123;</span><br><span class="line">  await conn.insert(table, row1);  // 第一步操作</span><br><span class="line">  await conn.update(table, row2);  // 第二步操作</span><br><span class="line">  await conn.commit(); // 提交事务</span><br><span class="line">&#125; catch (err) &#123;</span><br><span class="line">  // error, rollback</span><br><span class="line">  await conn.rollback(); // 一定记得捕获异常后回滚事务！！</span><br><span class="line">  throw err;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="表达式Literal"><a href="#表达式Literal" class="headerlink" title="表达式Literal"></a>表达式Literal</h1><p>app.mysql.literals.now</p>
<h1 id="查看数据库事务隔离性级别"><a href="#查看数据库事务隔离性级别" class="headerlink" title="查看数据库事务隔离性级别"></a>查看数据库事务隔离性级别</h1><blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select @@tx_isolation;</span><br></pre></td></tr></table></figure></blockquote>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
  </entry>
  <entry>
    <title>安全防范</title>
    <url>/2019/03/23/2019-03-23-%E5%AE%89%E5%85%A8%E9%98%B2%E8%8C%83/</url>
    <content><![CDATA[<h1 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h1><ul>
<li>XSS 攻击：对 Web 页面注入脚本，使用 JavaScript 窃取用户信息，诱导用户操作。</li>
<li>CSRF 攻击：伪造用户请求向网站发起恶意请求。</li>
<li>钓鱼攻击：利用网站的跳转链接或者图片制造钓鱼陷阱。</li>
<li>HTTP参数污染：利用对参数格式验证的不完善，对服务器进行参数注入攻击。</li>
<li>远程代码执行：用户通过浏览器提交执行命令，由于服务器端没有针对执行函数做过滤，导致在没有指定绝对路径的情况下就执行命令。</li>
</ul>
<h2 id="XSS攻击"><a href="#XSS攻击" class="headerlink" title="XSS攻击"></a>XSS攻击</h2><p>cross-site-scripting跨域脚本攻击</p>
]]></content>
      <categories>
        <category>security</category>
      </categories>
  </entry>
  <entry>
    <title>MinStack</title>
    <url>/2019/03/24/2019-03-24-MinStack/</url>
    <content><![CDATA[<h1 id="problem"><a href="#problem" class="headerlink" title="problem"></a>problem</h1><blockquote>
<p>Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.</p>
<ul>
<li>push(x) – Push element x onto stack.</li>
<li>pop() – Removes the element on top of the stack.</li>
<li>top() – Get the top element.</li>
<li>getMin() – Retrieve the minimum element in the stack.</li>
</ul>
<p><strong>Example:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MinStack minStack = new MinStack();</span><br><span class="line">minStack.push(-2);</span><br><span class="line">minStack.push(0);</span><br><span class="line">minStack.push(-3);</span><br><span class="line">minStack.getMin();   --&gt; Returns -3.</span><br><span class="line">minStack.pop();</span><br><span class="line">minStack.top();      --&gt; Returns 0.</span><br><span class="line">minStack.getMin();   --&gt; Returns -2.</span><br></pre></td></tr></table></figure>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>eventLoop</title>
    <url>/2019/04/04/2019-04-04-eventLoop/</url>
    <content><![CDATA[<h1 id="what"><a href="#what" class="headerlink" title="what"></a>what</h1><p>Event Loop是一个程序结构，用于等待和发送消息和事件</p>
<p>a programming construct that waits for and dispatches events or messages in a program.</p>
<p>简单说，就是在程序中设置两个线程：一个负责程序本身的运行，称为”主线程”；另一个负责主线程与其他进程（主要是各种I/O操作）的通信，被称为”Event Loop线程”（可以译为”消息线程”）。</p>
<p><img src="..\img\eventloop.png" alt=""></p>
<p>由上图可以清楚知道Node的<strong>单线程</strong>指的是主线程为单线程</p>
<h1 id="异步执行"><a href="#异步执行" class="headerlink" title="异步执行"></a>异步执行</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// test.js</span><br><span class="line">setTimeout(() =&gt; console.log(1));</span><br><span class="line">setImmediate(() =&gt; console.log(2));</span><br><span class="line">process.nextTick(() =&gt; console.log(3));//异步最快</span><br><span class="line">Promise.resolve().then(() =&gt; console.log(4));</span><br><span class="line">(() =&gt; console.log(5))();//同步任务最早执行</span><br><span class="line">//53412</span><br></pre></td></tr></table></figure>
<p>异步分为两种：</p>
<ul>
<li>本轮循环：process.nextTick(),Promise</li>
<li>次轮循环:setTimeout(),setInterval,setImmediate</li>
</ul>
<p><img src="..\img\nodeTimer.png" alt=""></p>
<p>每一次循环中，setTimeout等次轮循环在timers阶段执行，而本轮循环就在check阶段执行，所以会先展示</p>
]]></content>
  </entry>
  <entry>
    <title>各种Java中锁</title>
    <url>/2019/04/04/2019-04-04-%E5%90%84%E7%A7%8DJava%E4%B8%AD%E9%94%81/</url>
    <content><![CDATA[<h1 id="悲观锁：先锁后用"><a href="#悲观锁：先锁后用" class="headerlink" title="悲观锁：先锁后用"></a>悲观锁：先锁后用</h1><p>每次读数据都悲观认为会被其他操作修改，应用于synchroized , ReentrantLock，因为悲观所以开销大，会阻塞其他线程</p>
<h1 id="乐观锁：先用后判断"><a href="#乐观锁：先用后判断" class="headerlink" title="乐观锁：先用后判断"></a>乐观锁：先用后判断</h1><p>每次读数据乐观认为没有被其他操作修改，应用于java.util.concurrent.atomic,使用版本号和CAS算法实现</p>
<p><strong>适用于多读的应用类型，提高吞吐量</strong></p>
<h1 id="公平锁：多个线程按申请所顺序取锁"><a href="#公平锁：多个线程按申请所顺序取锁" class="headerlink" title="公平锁：多个线程按申请所顺序取锁"></a>公平锁：多个线程按申请所顺序取锁</h1><p>无</p>
<h1 id="非公平锁"><a href="#非公平锁" class="headerlink" title="非公平锁"></a>非公平锁</h1><p>多个线程不按申请顺序取锁，提高吞吐量</p>
<h1 id="可入锁"><a href="#可入锁" class="headerlink" title="可入锁"></a>可入锁</h1><p>外层使用锁后，内层仍可以使用，而且不会死锁</p>
<h1 id="不可重入锁"><a href="#不可重入锁" class="headerlink" title="不可重入锁"></a>不可重入锁</h1><h1 id="独享锁"><a href="#独享锁" class="headerlink" title="独享锁"></a>独享锁</h1><h1 id="共享锁"><a href="#共享锁" class="headerlink" title="共享锁"></a>共享锁</h1><p>互斥锁</p>
<p>读写锁</p>
<p>分段锁</p>
<p>偏向锁</p>
<p>轻量级锁</p>
<p>重量级锁</p>
<p>自旋锁</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>lock</tag>
      </tags>
  </entry>
  <entry>
    <title>春节12响</title>
    <url>/2019/04/04/2019-04-04-%E6%98%A5%E8%8A%8212%E5%93%8D/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">// File: twelve_biubiu.c</span><br><span class="line">// Permission: CN-2082-2</span><br><span class="line">// Author: Li.YiYi</span><br><span class="line">// Dept: PE-362, UG</span><br><span class="line">// Origin: TI-352132</span><br><span class="line">// 春节十二响 biu biu biu!</span><br><span class="line"></span><br><span class="line">#env &quot;planet_engine&quot;</span><br><span class="line"></span><br><span class="line">int init() &#123;</span><br><span class="line">    set_engine_number_mask(ENGINE_ALL);</span><br><span class="line">    set_funeral_level(FUNERAL_FULL);</span><br><span class="line">    // 允许误差10秒以内</span><br><span class="line">    if (unix_time() &lt; make_unix_time(2082, 1, 28, 23, 59, 60-10)) return ERR_ENGIN_ENV;</span><br><span class="line">    return engine_check_init(); // after compile and before real run</span><br><span class="line">&#125;</span><br><span class="line">int main() &#123;</span><br><span class="line">    set_curve(CURVE_NATURAL); // 自然曲线耗费燃料最少</span><br><span class="line">    for (int i :range(0, 12, 1)) &#123;</span><br><span class="line">        engine_start();</span><br><span class="line">        wait_engine(ENGINE_STATE_CHAGNE);</span><br><span class="line">        sleep(2000);</span><br><span class="line">        engin_stop();</span><br><span class="line">        wait_engine(ENGINE_STATE_CHAGNE);</span><br><span class="line">        sleep(4000); // 这个时长在模拟器里听起来更像心跳</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">int final() &#123;</span><br><span class="line">    engine_ensure_shutdown();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>life</category>
      </categories>
  </entry>
  <entry>
    <title>LengthofLastWord</title>
    <url>/2019/04/06/2019-04-06-LengthofLastWord/</url>
    <content><![CDATA[<h1 id="problem"><a href="#problem" class="headerlink" title="problem"></a>problem</h1><blockquote>
<p>Given a string <em>s</em> consists of upper/lower-case alphabets and empty space characters <code>&#39; &#39;</code>, return the length of last word in the string.</p>
<p>If the last word does not exist, return 0.</p>
<p><strong>Note:</strong> A word is defined as a character sequence consists of non-space characters only.</p>
<p><strong>Example:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: &quot;Hello World&quot;</span><br><span class="line">Output: 5</span><br></pre></td></tr></table></figure>
</blockquote>
<h1 id="key"><a href="#key" class="headerlink" title="key"></a>key</h1><p>该方法调用了java的String.split(regex)所以在复杂度上回很高，大概仅仅beat了6%的玩家，但解决很快，正确的算法思维就倒序遍历，最后开始查往前，最后一个非空格查到空格结束</p>
<h1 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//7ms</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLastWord</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(s.length()&lt;=<span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		String[] tmp = s.split(<span class="string">&quot;\\s&quot;</span>);</span><br><span class="line">		<span class="keyword">int</span> lastIndex = tmp.length-<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(lastIndex&lt;<span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> tmp[lastIndex].length();</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<h1 id="perfect"><a href="#perfect" class="headerlink" title="perfect"></a>perfect</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int lengthOfLastWord(String s) &#123;</span><br><span class="line">        int n = s.length() - 1;</span><br><span class="line">        int length = 0;</span><br><span class="line">        for(int i = n; i &gt;= 0; i--) &#123;</span><br><span class="line">            if(length == 0) &#123;</span><br><span class="line">                if(s.charAt(i) == &#x27; &#x27;) &#123;</span><br><span class="line">                    continue;</span><br><span class="line">                &#125;else &#123;</span><br><span class="line">                    length++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;else &#123;</span><br><span class="line">                if(s.charAt(i) == &#x27; &#x27;) &#123;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">                else &#123;</span><br><span class="line">                    length++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>easy</tag>
      </tags>
  </entry>
  <entry>
    <title>SpiralMatrix2-59</title>
    <url>/2019/04/06/2019-04-06-SpiralMatrix2/</url>
    <content><![CDATA[<h1 id="problem"><a href="#problem" class="headerlink" title="problem"></a>problem</h1><blockquote>
<p>Given a positive integer <em>n</em>, generate a square matrix filled with elements from 1 to <em>n</em>2 in spiral order.</p>
<p><strong>Example:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;Input: 3</span><br><span class="line">&gt;Output:</span><br><span class="line">&gt;[</span><br><span class="line">[ 1, 2, 3 ],</span><br><span class="line">[ 8, 9, 4 ],</span><br><span class="line">[ 7, 6, 5 ]</span><br><span class="line">&gt;]</span><br></pre></td></tr></table></figure>
</blockquote>
<h1 id="key"><a href="#key" class="headerlink" title="key"></a>key</h1><p>虽然标了medium，但是确实很简单，形成一个口字型闭环，一层层去处理就好了，然后再主要就是控制口字循环时候的边界，以及最后一个元素的判断</p>
<h1 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public int[][] generateMatrix(int n) &#123;</span><br><span class="line">		int [][]res = new int[n][n];</span><br><span class="line">        int left = 0;</span><br><span class="line">        int right = n-1;</span><br><span class="line">        int top = 0;</span><br><span class="line">        int bottom = n-1;</span><br><span class="line">        int index = 1;</span><br><span class="line">        int quit = n*n;</span><br><span class="line">        while(index&lt;=quit)&#123;</span><br><span class="line">            for(int i=left;i&lt;=right;i++) &#123;</span><br><span class="line">            	res[top][i] = (index++);</span><br><span class="line">            &#125;</span><br><span class="line">            top++;</span><br><span class="line">            for(int i=top;i&lt;=bottom;i++)&#123;</span><br><span class="line">            	res[i][right] = (index++);</span><br><span class="line">                &#125;</span><br><span class="line">            right--;</span><br><span class="line">            for(int i=right;i&gt;=left;i--) &#123;</span><br><span class="line">                res[bottom][i]=(index++);</span><br><span class="line">            &#125;</span><br><span class="line">            bottom--;</span><br><span class="line">            for(int i=bottom;i&gt;=top;i--) &#123;</span><br><span class="line">            	res[i][left]=(index++);</span><br><span class="line">            &#125;</span><br><span class="line">            left++;</span><br><span class="line">        &#125;</span><br><span class="line">        return res;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<h1 id="perfect"><a href="#perfect" class="headerlink" title="perfect"></a>perfect</h1><p>no</p>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Medium</tag>
      </tags>
  </entry>
  <entry>
    <title>https与http</title>
    <url>/2019/04/06/2019-04-06-https%E4%B8%8Ehttp/</url>
    <content><![CDATA[<h1 id="what"><a href="#what" class="headerlink" title="what"></a>what</h1><h1 id="advantage"><a href="#advantage" class="headerlink" title="advantage"></a>advantage</h1><p>客户端在使用HTTPS方式与Web服务器通信时有以下几个步骤，如图所示。</p>
<p>　　（1）客户使用https的URL访问Web服务器，要求与Web服务器建立SSL连接。</p>
<p>　　（2）Web服务器收到客户端请求后，会将网站的证书信息（证书中包含公钥）传送一份给客户端。</p>
<p>　　（3）客户端的浏览器与Web服务器开始协商SSL连接的安全等级，也就是信息加密的等级。</p>
<p>　　（4）客户端的浏览器根据双方同意的安全等级，建立会话密钥，然后利用网站的公钥将会话密钥加密，并传送给网站。</p>
<p>　　（5）Web服务器利用自己的私钥解密出会话密钥。</p>
<p>　　（6）Web服务器利用会话密钥加密与客户端之间的通信。</p>
]]></content>
  </entry>
  <entry>
    <title>暂停更新通告[作废]</title>
    <url>/2019/04/13/2019-04-13-%E6%9A%82%E5%81%9C%E6%9B%B4%E6%96%B0%E9%80%9A%E5%91%8A/</url>
    <content><![CDATA[<p>自今日起，博客开始停更</p>
<h1 id="996-icu"><a href="#996-icu" class="headerlink" title="996.icu"></a>996.icu</h1><p>年后开始，互联网似乎过得都不好，从七陌被裁（也有个人原因吧），到被航天二院，知网，中电科因为学历卡住入职（BOSS直聘，面试完了，技术找人事审核不通过），后来遇到了一系列傲慢的中科软系列面试，无限加班的创业公司，还有那种以培训机构为目标招人的小公司。最终未能收获一个满意的offer，最终舔狗选择了一家说是不加班的某所，然，现在才发现，实在太忙，包括现在也刚刚到家，工作也没有pc，没有网络，所以也很不方便随时学习，可能有一些手写笔记，但经历有限，所以最近会停止更新</p>
<p>年后996冲上了榜首，让世界都在反思为什么中国的加班为什么如此疯狂，但话题热度很快下降，因为没有人会去放下手中的工作去抵制，毕竟生活总要继续下去</p>
<p>生活总是这样，起起落落落</p>
<p>努力不一定有回报，但不努力一定很（mei）舒（hui）服(bao)</p>
<p>晚安~hexo</p>
]]></content>
  </entry>
  <entry>
    <title>2019-04-17-日记</title>
    <url>/2019/04/17/2019-04-17-%E6%97%A5%E8%AE%B0/</url>
    <content><![CDATA[<p>经历了连续9*13小时的工作后，我终于得到了一天的调休计划，昨晚十一点半打车从五棵松到家</p>
<p><img src="../img/发票.jpg" alt=""></p>
<p>洗了个热水澡，关了手机闹铃，打开了Alexa的环境噪音，难的踏实的进入了梦中。</p>
<p>但是！！</p>
<p>我Alexa的闹钟忘记关了，七点被吵醒后一直没有睡着，所以起床热了杯牛奶，弄了张煎饼，涂了点番茄酱就凑合吃了，后来外出和朋友聊了会儿天，倒确实点出了一些目前存在的问题</p>
<ul>
<li>一个好的技术不仅要知其然，更要知其所以然，多挖掘他背后的源码，去思考如何实现，这样才能在高并发时，将200ms优化到100ms，才是一个高级程序员应该具备的素质之一</li>
<li>Node学习分为三年，第一年知其语法，会写应用，第二年知其框架，高级开发，第三年，读其源码，知其原理</li>
<li>多用语言去写一些工具类，多去学习和参考优质轮子，而不是写一些玩具，别人都写烂的东西</li>
<li>（重要的应该就这么多了）</li>
</ul>
<p>朋友的话很对，我也进行了思考，自己在JS的道路上，摸着黑走路，对于源码其实要读，但是之前打开看过一眼就一脸懵逼的状态，所以还是需要有时间学习一下优质的GitHub，撕开一个口子，然后进入到正轨，自己去多写一些方法区调用，然后一点点去琢磨，他的实现过程。</p>
<p><img src="../img/purjoy.jpg" alt=""></p>
<p>4月底的计划就是</p>
<ul>
<li>尽量换一份工作，受不了8117，薪资还不如麦当劳的临时工</li>
<li>自如租约到期了，搬家到朱辛庄或者霍营</li>
<li>没换工作的话，买一本书通勤看会儿，换工作的话，抽个零碎的时间读，顺便整理笔记，更博（暂定这个月读一下v8的gc）</li>
<li>五一出去旅游，暂时想去杭州看看</li>
<li>买点竹筒，想做竹筒饭</li>
</ul>
]]></content>
      <categories>
        <category>life</category>
      </categories>
      <tags>
        <tag>diary</tag>
      </tags>
  </entry>
  <entry>
    <title>2019-04-20-rentingHouse</title>
    <url>/2019/04/20/2019-04-20-rentingHouse/</url>
    <content><![CDATA[<p>快要毕业了，朋友圈里洋溢着，毕业的快乐，直系学弟们也返校进行了毕业论文的最终答辩，也希望他们都取得一个好的成绩，能在回首大学四年时候，<strong>不因为碌碌无为而后悔</strong>，能够在社一中，找到一份合适的工作，并感谢曾经那个在大学奋斗的自己。</p>
<p><img src="../img/毕业.jpg" alt=""></p>
<p>毕业季第一道坎就是租房（家里有矿的，这篇文章你就可以关掉了），总体来说，在京就业，房租确实很贵的，不过对于计算机专业来说，应该还是可以的。我们熟知的计算机区域</p>
<ul>
<li>望京SOHO（小企业居多）</li>
<li>中关村</li>
<li><strong>中关村软件园</strong>（大厂）</li>
</ul>
<p>对应的租房地点可以选择：</p>
<ul>
<li>孙河（就可能地铁站远一点）</li>
<li>上地附近</li>
<li>回龙观，朱辛庄</li>
</ul>
<p>主要平台（按推荐顺序）：</p>
<ul>
<li>自如（个人选择项，应届生有特权）</li>
<li>豆瓣小组</li>
<li>闲鱼</li>
<li>相如&gt;蛋壳=贝壳</li>
</ul>
<p>应届生可能囊中羞涩，所以建议选择自如，分期月付（应届免押金，分起费120附近），不过计算机专业的应届生薪资理论上是&gt;=7k，所以我觉得应该马马虎虎可以生存下来了。之所以不推荐其他的中介，是因为你可能租房后，对于维修，舍友抽烟，养的宠物半夜狂叫，又退不了租，陷入麻烦中。（自如麻烦来结一下广告费）</p>
<p>另外整理一下招聘的软件（按推荐顺序）：</p>
<ul>
<li><p>（个人软件工程，仅供参考）</p>
</li>
<li><p>BOSS</p>
</li>
<li>拉钩</li>
<li>智联招聘</li>
<li>脉脉</li>
</ul>
<p>希望这些资料对刚毕业的你有所帮助，其余想起来的，再直接更新</p>
]]></content>
  </entry>
  <entry>
    <title>PermutationSequence-60</title>
    <url>/2019/04/09/2019-04-09-PermutationSequence/</url>
    <content><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p>The set <code>[1,2,3,...,*n*]</code> contains a total of <em>n</em>! unique permutations.</p>
<p>By listing and labeling all of the permutations in order, we get the following sequence for <em>n</em> = 3:</p>
<ol>
<li><code>&quot;123&quot;</code></li>
<li><code>&quot;132&quot;</code></li>
<li><code>&quot;213&quot;</code></li>
<li><code>&quot;231&quot;</code></li>
<li><code>&quot;312&quot;</code></li>
<li><code>&quot;321&quot;</code></li>
</ol>
<p>Given <em>n</em> and <em>k</em>, return the <em>k</em>th permutation sequence.</p>
<p><strong>Note:</strong></p>
<ul>
<li>Given <em>n</em> will be between 1 and 9 inclusive.</li>
<li>Given <em>k</em> will be between 1 and <em>n</em>! inclusive.</li>
</ul>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: n = 3, k = 3</span><br><span class="line">Output: &quot;213&quot;</span><br></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: n = 4, k = 9</span><br><span class="line">Output: &quot;2314&quot;</span><br></pre></td></tr></table></figure>
<h1 id="key"><a href="#key" class="headerlink" title="key"></a>key</h1><h1 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h1><h1 id="perfect"><a href="#perfect" class="headerlink" title="perfect"></a>perfect</h1>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Medium</tag>
      </tags>
  </entry>
  <entry>
    <title>2019-04-24-Nodejs12</title>
    <url>/2019/04/24/2019-04-24-Nodejs12/</url>
    <content><![CDATA[<h1 id="Introducing-Node-js-12"><a href="#Introducing-Node-js-12" class="headerlink" title="Introducing Node.js 12"></a><strong>Introducing Node.js 12</strong></h1><p><a href="https://medium.com/@nodejs/introducing-node-js-12-76c41a1b3f3f">raw article</a></p>
<p>Apr 24</p>
<p><em>This blog was written by Bethany Griggs and Michael Dawson, with additional contributions from the Node.js Release Team and Technical Steering committee.</em></p>
<p>We are excited to announce Node.js 12 today. Highlighted updates and features include faster startup and better default heap limits, updates to V8, TLS, llhttp, new features including diagnostic report, bundled heap dump capability and updates to Worker Threads, N-API and ES6 module support and more. The Node.js 12 release replaces version 11 in our current release line. The Node.js release line will become a Node.js Long Term Support (LTS) release in Oct 2019 (more details on <a href="https://github.com/nodejs/release">LTS strategy here</a>).</p>
<p><strong>V8 Gets an Upgrade: V8 update to V8 7.4</strong>As always a new version of the V8 JavaScript engine brings performance tweaks and improvements as well as keeping Node.js up with the ongoing improvements in the language and runtime. Highlights include:</p>
<ul>
<li>Async stack traces: <a href="https://v8.dev/blog/v8-release-72#async-stack-traces">https://v8.dev/blog/v8-release-72#async-stack-traces</a></li>
<li>Faster calls with arguments mismatch: <a href="https://v8.dev/blog/v8-release-74#faster-calls-with-arguments-mismatch">https://v8.dev/blog/v8-release-74#faster-calls-with-arguments-mismatch</a></li>
<li>Faster await: <a href="https://v8.dev/blog/v8-release-73#faster-await">https://v8.dev/blog/v8-release-73#faster-await</a></li>
<li>Faster javascript parsing: <a href="https://v8.dev/blog/v8-release-72#javascript-parsing">https://v8.dev/blog/v8-release-72#javascript-parsing</a></li>
</ul>
<p>Read more about V8 at their <a href="https://v8.dev/blog">official blog</a>.</p>
<p><strong>Hello TLS 1.3</strong></p>
<p>Node.js 12 is introducing TLS1.3 support and making it the default max protocol, while also supporting CLI/NODE_OPTIONS switches to disable it if necessary.</p>
<p>TLS1.3 is a major update to the TLS protocol, with many security enhancements and should be used over TLS1.2 whenever possible.</p>
<p>TLS1.3 is different enough that even though the OpenSSL APIs are technically API/ABI compatible when TLS1.3 is negotiated, changes in the timing of protocol records and of callbacks broke assumptions hard-coded into the ‘tls’ module. This change introduces no API incompatibilities when TLS1.2 is negotiated. It is the intention that it be backported to current and LTS release lines with the default maximum TLS protocol reset to ‘TLSv1.2’. This will allow users of those lines to explicitly enable TLS1.3 if they want. If you want to read more you can check out these related articles:<a href="https://developer.ibm.com/blogs/openssl-111-has-landed-in-nodejs-master-and-why-its-important-for-nodejs-lts-releases/">https://developer.ibm.com/blogs/openssl-111-has-landed-in-nodejs-master-and-why-its-important-for-nodejs-lts-releases/</a>, <a href="https://developer.ibm.com/blogs/tls13-is-coming-to-nodejs/">https://developer.ibm.com/blogs/tls13-is-coming-to-nodejs/</a></p>
<p><strong>Properly configure default heap limits</strong>This update will configure the JavaScript heap size based on available memory instead of using defaults that were set by V8 for use with browsers. In previous releases, unless configured, V8 defaulted to limiting the max heap size to 700 MB or 1400MB on 32 and 64-bit platforms respectively. Configuring the heap size based on available memory ensures that Node.js does not try to use more memory than is available and terminating when its memory is exhausted.</p>
<p>This is particularly useful when processing large data-sets. As before, it will still be possible to set — max-old-space-size to use a different limit if the default is not appropriate for your application.</p>
<p><strong>Switch default http parser to llhttp</strong><br>Node.js 12 will also switch the default parser to llhttp. This will be beneficial in that it will make testing and comparing the new llhttp-based implementation easier. First introduced as<a href="https://github.com/nodejs/node/pull/24059"> llhttp experimental</a> in v11.2.0, <a href="https://github.com/indutny/llhttp">llhttp</a> will be taken out of experimental in this release.</p>
<p><strong>Making Native Modules Easier — progress continues</strong>Node.js 12 continues the trend of making building and supporting native modules easier. Changes include better support for native modules in combination with Worker threads, as well as N-API (<a href="https://nodejs.org/api/n-api.html#n_api_n_api">https://nodejs.org/api/n-api.html#n_api_n_api</a>) version 4 (which has also been backported to 8.x and 10.x) which makes it easier to use your own threads for native asynchronous functions. You can read more about this and how you can leverage it in your modules in this great article here: <a href="https://medium.com/the-node-js-collection/new-features-bring-native-add-ons-close-to-being-on-par-with-js-modules-cd4f9b8e4b4">https://medium.com/the-node-js-collection/new-features-bring-native-add-ons-close-to-being-on-par-with-js-modules-cd4f9b8e4b4</a></p>
<p><strong>Worker Threads</strong>Worker Threads (<a href="https://nodejs.org/api/worker_threads.html">https://nodejs.org/api/worker_threads.html</a>), while not new in this release, are still seeing progress. The use of Workers Threads no longer requires the use of a flag and they are progressing well towards moving out of experimental. While Node.js already performs well with the single-threaded event loop, there are some use-cases where additional threads can be leveraged for better results. We’d like you to try them out and let us know what use cases you have where they are helpful. For a quick introduction check out this great article: <a href="https://medium.com/@Trott/using-worker-threads-in-node-js-80494136dbb6">https://medium.com/@Trott/using-worker-threads-in-node-js-80494136dbb6</a>.</p>
<p><strong>Diagnostic Reports</strong>Node.js 12 brings with it a new experimental feature “Diagnostic report.” This allows you to generate a report on demand or when certain events occur. This report contains information that can be useful to help diagnose problems in production including crashes, slow performance, memory leaks, high CPU usage, unexpected errors and more. You can read more about it in this great article: <a href="https://medium.com/the-node-js-collection/easily-identify-problems-in-node-js-applications-with-diagnostic-report-dc82370d8029">https://medium.com/the-node-js-collection/easily-identify-problems-in-node-js-applications-with-diagnostic-report-dc82370d8029</a>.</p>
<p><strong>Heap Dumps</strong>If you ever needed to generate heap dumps in order to investigate memory issues but were slowed down by having to install a new module into production, the good news is that Node.js 12 brings integrated heap dump capability out of the box. You can check out the documentation in <a href="https://github.com/nodejs/node/pull/27133">https://github.com/nodejs/node/pull/27133</a> and <a href="https://github.com/nodejs/node/pull/26501">https://github.com/nodejs/node/pull/26501</a> to learn more.</p>
<p><strong>Startup Improvements</strong>In Node.js 11 we shipped built-in code cache support in workers — when loading built-in libraries written in JavaScript, if the library was previously compiled on the main thread, the worker thread no longer needs to compile it from scratch but can reuse the <a href="https://v8.dev/blog/code-caching">v8 code cache</a> generated by the main thread to speed up compilation. Similarly, the main thread can reuse the cache generated by workers. This gave a <a href="https://github.com/nodejs/node/pull/24950">roughly 60% speedup</a> for the startup of workers.</p>
<p>Now in Node.js 12 we <a href="https://github.com/nodejs/node/pull/27161">generate the code cache for built-in libraries in advance at build time</a>, and embed it in the binary, so in the final release, the main thread can use the code cache to start up the initial load of any built-in library written in JavaScript. This gives a ~30% speedup in startup time for the main thread.</p>
<p><strong>ES6 Module Support</strong>Node.js 12 brings an updated experimental version of support for ES6 modules. It is an important step toward a supported implementation and we’d like you to try it out and give us feedback. For more details check out this <a href="https://medium.com/@nodejs/announcing-a-new-experimental-modules-1be8d2d6c2ff">great blog post</a>.</p>
<p><strong>New compiler and platform minimums</strong>Node.js and V8 continue to embrace newer C++ features and take advantage of newer compiler optimizations and security enhancements. With the release of Node.js 12, the codebase now requires a minimum of GCC 6 and glibc 2.17 on platforms other than macOS and Windows. Binaries released at Node.js org use this new toolchain minimum and therefore include new compile-time performance and security enhancements.</p>
<p>The increment in minimum compiler and libc requirements also increments minimums in supported platforms. Platforms using glibc (most platforms other than macOS and Windows) must now include a minimum version of 2.17. Common Linux platforms compatible with this version include Enterprise Linux 7 (RHEL and CentOS), Debian 8 and Ubuntu 14.04. Binaries available from nodejs.org will be compatible with these systems. Users needing to compile their own binaries on systems not natively supporting GCC 6 may need to use a custom toolchain. Even though Node.js 12.0.0 may compile with older compilers, expect the Node.js 12 codebase (including V8) to rapidly adopt C++ features supported by GCC 6 during the pre-LTS timeframe.</p>
<p>Windows minimums remain the same as Node.js 11, requiring at least Windows 7, 2008 R2 or 2012 R2 and a minimum compiler of Visual Studio 2017. macOS users needing to compile Node.js will require a minimum of Xcode 8 and Node.js binaries made available on nodejs.org will only support a minimum of macOS 10.10 “Yosemite”.</p>
<p>Further details are available in the Node.js <a href="https://github.com/nodejs/node/blob/v12.x/BUILDING.md#platform-list">BUILDING.md</a>.</p>
<p><strong>Thank you!</strong>A big thank you to everyone who made this release come together, whether you submitted a pull request, helped with our benchmarking efforts, or you were in charge of one of the release versions. We’d also like to thank t<a href="https://github.com/nodejs/build">he Node.js Build Working Group</a> for ensuring we have the infrastructure to create and test releases. The release manager for Node.js 12 is <a href="https://github.com/BethGriggs">Bethany Griggs</a>. For a full list of the release team members head <a href="https://github.com/nodejs/release#releasers-team">here</a>. You can read more about the complete list of features <a href="https://github.com/nodejs/node/blob/master/doc/changelogs/CHANGELOG_V12.md">here</a>.</p>
<p>If you are interested in contributing to Node.js, we welcome you. Learn more via our contributor <a href="https://github.com/nodejs/node/blob/master/CONTRIBUTING.md">guidelines</a>.</p>
]]></content>
  </entry>
  <entry>
    <title>绍兴游记</title>
    <url>/2019/05/06/2019-05-05-%E7%BB%8D%E5%85%B4%E6%B8%B8%E8%AE%B0/</url>
    <content><![CDATA[<p>5月1日搭车去了绍兴，一个是自己毕业后其实既没有毕业旅行，也没有去哪里玩儿，所以想补偿自己一下，第二个是我表姐给我买了票了，想着还是去吧。</p>
<p><img src="..\img\IMG_20190501_111955启程.jpg" alt=""></p>
<p>因为最后一个工作日加了个班，然后又起得很早，读着东野圭吾的《嫌疑人X的献身》，中午饿了就在高铁上买了15元的盒饭，拿着kindle强行盖了会儿，，锁屏突然推送了广告，这几个字，读了好几遍，好是喜欢。耳机刚好播放到最近很是喜欢的《<a href="https://music.163.com/song?id=1341964346&amp;userid=248655362">你的酒馆对我打了样</a>》，我调整了椅子，时速307km逃离着这座有你的城市。</p>
<p>杭州高楼鳞次栉比，穿过一栋栋高楼就来到了绍兴，这个城市不是很繁华，倒也是一个保留的很好的江南古镇，我很喜欢这里，火车站，背着包，司机师傅操着一口流畅的普通话礼貌的问着我去哪儿，一边介绍着风景名胜，满满的都是对这个城市的热爱，有风景名胜兰亭，壮阔的东湖，一个慢节奏的小城市，除却了对金钱的渴望，连揽客都变得那么悠闲。</p>
<p><img src="..\img\IMG_20190501_202914.jpg" alt="">吃过饭，和侄子一起去了仓桥直街，其实可以理解为低配版的南锣鼓巷，人不算特别多吧，但是风景却很好的保留了江南的风味，一轮明月（非p30pro），以及灯光的烘托，让江南的夜晚，似乎比白天更加的夺目。陈旧的街巷保留了最初的最原始的石板街，街边的店家还是很古旧的撑着旗帜，还是过去那种一个很大的门（2m高*7个木板）还有很多过去的宣传标语，当然也有很多小吃。</p>
<p><img src="..\img\IMG_20190501_203923_Bokeh.jpg" alt=""></p>
<p>第二天的行程主要就是鲁迅故居了，其实并没有什么让我眼前一亮的地方，因为这里的人实在太多了，我早上九点半抵达景点，到11点才排队进入了鲁迅祖居，倒也很是沮丧，而且祖居里其实并没有什么值得参考的，游人们看长安花一样，参观者一个一个的房间。然后我又排队了40分钟进入了百草园，想一看鲁迅童年最快乐的地方，但却也什么也没有看到，一个不是很好看的花园，料理的和我爷爷的菜地一样，不过或许树人童年就是在这么一块地方进行玩耍的，很多游人围着百草园的一块大石头上合影留恋，排着队，各种姿势摆拍，令我觉得很是不舒服（我也没有拍到）。</p>
<p><img src="..\img\IMG_20190502_110050_Bokeh.jpg" alt="鲁迅祖居"></p>
<p><img src="..\img\IMG_20190502_115854_Bokeh.jpg" alt="鲁迅祖居"></p>
<p><img src="..\img\IMG_20190502_120925.jpg" alt="百草园一角"></p>
<p>倒也怎么看，鲁迅的童年应该也很是无聊，强行找着自己的乐子吧，后来排了30分钟的队伍去了三味书屋，其实我当时的心情是抗拒的，但还是忍着烈日，走上了不归的队伍，书屋的景点其实很小，一个小的教室，两边是家长的坐席，中间是学生的座位，图片可以看到鲁迅其实是坐在讲台左边的，看来他小时候也是个先生特别关照的对象鸭。</p>
<p><img src="..\img\IMG_20190502_130655.jpg" alt="三味书屋"></p>
<p>其实每逛完一个景点都是非常长的商业街，路的两边充斥着特产豆腐，黄酒产品，虽然我不是很反感这种景点恰饭情景，但是满街飘着臭豆腐的味道，回荡在鲁迅故居的上空，但多少也是有点违和，第二天的行程是安昌古镇，其实也没有什么特别的。</p>
<p><img src="..\img\IMG_20190503_113906_Bokeh.jpg" alt=""></p>
<p><img src="..\img\IMG_20190503_122238_002.jpg" alt=""></p>
<p><img src="..\img\IMG_20190503_122634.jpg" alt="IMG_20190503_122634"></p>
<p>历史的前轮碾压而过，很多东西都因为商业化而丢失了曾经的自己，不过总体来讲我还是比较喜欢吃过午饭，在江南的水边走着，遇到一位94岁的奶奶晒太阳，打了个招呼，他居住在这里三十年了，每次节假日，这里都会来很多人，之前就在这河里洗衣服，打水，后来腿脚不方便了，就搬把凳子坐在这里，听着繁华的声音，晒着太阳，看着船夫送走一个又一个人，这里的瓦年龄都很大，之前屋子的瓦还坏过一个，他折腾了好久才暂时不滴水了，她涛涛不觉的讲着，沉醉在这个小镇带给他的快乐和烦恼中</p>
<p>两天的行程不是很满，不是很累，也不是很轻松（到哪儿，哪儿都排队），回去没有抢到票，从绍兴一直站着回了北京，小说确实也没有读的下去，我看着窗外的风景，思念着一个人，认识这么久，我还没和你一起旅游过</p>
]]></content>
  </entry>
  <entry>
    <title>2019-09-14Node日志感受</title>
    <url>/2019/09/14/2019-09-14-Node%E6%97%A5%E5%BF%97%E6%84%9F%E5%8F%97/</url>
    <content><![CDATA[<h1 id="why"><a href="#why" class="headerlink" title="why"></a>why</h1><p>日志是用来记录程序运行重要的工具</p>
<ul>
<li>记录请求日志，关键节点打上日志，可以追踪问题（<strong>生产</strong>）</li>
<li>方便调试，定位故障</li>
<li>监控应用的运行状态</li>
</ul>
<h1 id="what-egg-js为例"><a href="#what-egg-js为例" class="headerlink" title="what(egg.js为例)"></a>what(egg.js为例)</h1><p>日志分为：</p>
<ul>
<li>appLogger应用日志，也是我们自定义的日志</li>
<li>coreLogger核心框架，插件日志</li>
<li>errorLogger</li>
<li>agentLogger用于监控agent日志</li>
</ul>
<p>日志级别：</p>
<ul>
<li>ctx.logger.debug()</li>
<li>ctx.logger.info()</li>
<li>ctx.logger.warn()</li>
<li>ctx.logger.error()</li>
<li>以appLogger为例，一共4*4种</li>
</ul>
<p>日志编码：</p>
<ul>
<li>默认utf-8</li>
</ul>
<h1 id="feature"><a href="#feature" class="headerlink" title="feature"></a>feature</h1><p>目前日志都支持切割，每天一个文件，以.log.2019-09-14为尾缀（小时切割和文件大小切割实用性不高），编写日志的时候我们也需要注意如下几点：</p>
<ul>
<li><p>在关键请求关键位置打好日志</p>
</li>
<li><p>打印日志注明这是哪个文件哪个方法处理的日志</p>
<ul>
<li><pre><code class="js">logger.debug(<span class="string">`&gt;&gt;&gt;&gt; Entering yourMethod(month = <span class="subst">$&#123;month&#125;</span>, count= <span class="subst">$&#123;count&#125;</span>");</span>
<span class="string">//通过日志 &gt;&gt;&gt;&gt; 和 &lt;&lt;&lt;&lt; 将给出函数输入和退出的信息</span>
</code></pre>
</li>
</ul>
</li>
<li><p>日志不能太多，一个是查问题日志太多，第二个是对硬盘写入日志也有一定性能影响（egg是写入内存，每秒保存一次硬盘）</p>
</li>
<li><p>合理使用try-catch来进行日志输出</p>
</li>
<li><p>日志写法一定要避免简洁，不要日志再抛错（正常打印参数，打印处理结果）</p>
</li>
<li><p>日志不能具备除了日志以外的功能</p>
</li>
<li><p>正确把握日志级别，info记录信息（最主要的），debug显示调试信息，warn显示警告，error保存数据库请求类型的报错</p>
</li>
<li><p>尽量使用ctx.logger而并非console.log，后者将会把所有日志打印在stdout中，无法关闭或打开调试信息，并且不区分级别</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Node</category>
      </categories>
      <tags>
        <tag>logs</tag>
      </tags>
  </entry>
  <entry>
    <title>2019-09-21-中台是什么</title>
    <url>/2019/09/21/2019-09-21-%E4%B8%AD%E5%8F%B0%E6%98%AF%E4%BB%80%E4%B9%88/</url>
    <content><![CDATA[<h1 id="why"><a href="#why" class="headerlink" title="why"></a>why</h1><p>公司最近上了一套中台服务，因为好奇所以查了一下资料，中台是为了提高开发效率，将各个服务中共同的组织，资源集中管理，作为一个整体服务，宏观上我们可以把淘宝客户端，盒马生鲜，饿了么看做大前端，而他们有一部分共享数据，比如用户信息，支付功能，搜索功能等</p>
<p><img src="..\img\alibaba.jpg" alt=""></p>
<p>又比如我们公司的电商平台，核心系统包括，ERP（企业资源计划即 <em>ERP</em> Ent<em>erp</em>rise Resource Planning），WMS（仓库管理系统Warehouse Management System）以及一套交付系统（包含购买，安装服务，维修服务，代理商管理等），他们需要共享商品信息，ERP需要用来算账，WMS需要用来发货，交付系统需要用来记录他的生命周期，就在中台配置一套信息，就可以达到三套系统都可以访问的效果。</p>
<h1 id="what"><a href="#what" class="headerlink" title="what"></a>what</h1><p>中台也可以分类：</p>
<ul>
<li>业务中台（如上举例我们公司的业务）</li>
<li>技术中台（如淘宝的中台，当然也有偏业务的部分，主要目的防止重复造轮子）</li>
<li>数据中台（包括建模，日志分析，profile）</li>
<li>算法中台（推荐算法，搜索算法等）</li>
</ul>
<h1 id="feature"><a href="#feature" class="headerlink" title="feature"></a>feature</h1><p>目前中台还是比较烧钱的吧，公司没有到达一定的规模，这个东西还是没有什么卵用，我们目前上了一套ERP，一套中台，级别在千万吧，还需要各个部门进行配合，进行系统整合（以前都是各干各的，系统间几乎没有交互，重复造轮子）。恶心的我啊，加了10117了三个月才大体上能用了</p>
<p>不过我觉得中台的发展历史可能和服务一样，一个整体的服务臃肿，后续的中台还是会变成中心化，即一个核心业务，其他做成微服务，分布式的架构，是目前技术潮流的前进方向</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>2019-10-27-DynamicProgramming动态规划</title>
    <url>/2019/10/27/2019-10-27-DynamicProgramming%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
    <content><![CDATA[<h1 id="what"><a href="#what" class="headerlink" title="what"></a>what</h1><p>动态规划是通过组合子问题的解里求解原问题，一般被用来求最优化问题</p>
<ul>
<li>1.刻画一个最优解的结构特征</li>
<li>2.递归定义最优解的值</li>
<li>3.计算最优解</li>
<li>4.计算的信息构造最优解</li>
</ul>
]]></content>
      <categories>
        <category>Algorithms</category>
      </categories>
      <tags>
        <tag>DynamicProgramming</tag>
      </tags>
  </entry>
  <entry>
    <title>2019-12-15-@SpringBootApplication</title>
    <url>/2019/12/15/2019-12-15-SpringBootApplication/</url>
    <content><![CDATA[<h1 id="启动类"><a href="#启动类" class="headerlink" title="启动类"></a>启动类</h1><p>我们可以见到最简单的springboot的application.java文件如下<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringTestApplication</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		SpringApplication.run(SpringTestApplication.class, args);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>实际上，SpringApplication的run方法时首先会创建一个SpringApplication类的对象，利用构造方法创建SpringApplication对象时会调用initialize方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(Object source, String... args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> run(<span class="keyword">new</span> Object[] &#123; source &#125;, args);</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(Object[] sources, String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> SpringApplication(sources).run(args);</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SpringApplication</span><span class="params">(Object... sources)</span> </span>&#123;</span><br><span class="line">		initialize(sources);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>其中initialize方法如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">`<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(Object[] sources)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 在sources不为空时，保存配置类</span></span><br><span class="line">    <span class="keyword">if</span> (sources != <span class="keyword">null</span> &amp;&amp; sources.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.sources.addAll(Arrays.asList(sources));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 判断是否为web应用</span></span><br><span class="line">    <span class="keyword">this</span>.webEnvironment = deduceWebEnvironment();</span><br><span class="line">    <span class="comment">// 获取并保存容器初始化类，通常在web应用容器初始化使用</span></span><br><span class="line">    <span class="comment">// 利用loadFactoryNames方法从路径MEAT-INF/spring.factories中找到所有的ApplicationContextInitializer</span></span><br><span class="line">    setInitializers((Collection) getSpringFactoriesInstances(</span><br><span class="line">        ApplicationContextInitializer.class));</span><br><span class="line">    <span class="comment">// 获取并保存监听器</span></span><br><span class="line">    <span class="comment">// 利用loadFactoryNames方法从路径MEAT-INF/spring.factories中找到所有的ApplicationListener</span></span><br><span class="line">    setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));</span><br><span class="line">    <span class="comment">// 从堆栈信息获取包含main方法的主配置类</span></span><br><span class="line">    <span class="keyword">this</span>.mainApplicationClass = deduceMainApplicationClass();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实例化后调用run：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">    StopWatch stopWatch = <span class="keyword">new</span> StopWatch();</span><br><span class="line">    stopWatch.start();</span><br><span class="line">    ConfigurableApplicationContext context = <span class="keyword">null</span>;</span><br><span class="line">    FailureAnalyzers analyzers = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">// 配置属性</span></span><br><span class="line">    configureHeadlessProperty();</span><br><span class="line">    <span class="comment">// 获取监听器</span></span><br><span class="line">    <span class="comment">// 利用loadFactoryNames方法从路径MEAT-INF/spring.factories中找到所有的SpringApplicationRunListener</span></span><br><span class="line">    SpringApplicationRunListeners listeners = getRunListeners(args);</span><br><span class="line">    <span class="comment">// 启动监听</span></span><br><span class="line">    <span class="comment">// 调用每个SpringApplicationRunListener的starting方法</span></span><br><span class="line">    listeners.starting();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 将参数封装到ApplicationArguments对象中</span></span><br><span class="line">        ApplicationArguments applicationArguments = <span class="keyword">new</span> DefaultApplicationArguments(</span><br><span class="line">            args);</span><br><span class="line">        <span class="comment">// 准备环境</span></span><br><span class="line">        <span class="comment">// 触发监听事件——调用每个SpringApplicationRunListener的environmentPrepared方法</span></span><br><span class="line">        ConfigurableEnvironment environment = prepareEnvironment(listeners,</span><br><span class="line">            applicationArguments);</span><br><span class="line">        <span class="comment">// 从环境中取出Banner并打印</span></span><br><span class="line">        Banner printedBanner = printBanner(environment);</span><br><span class="line">        <span class="comment">// 依据是否为web环境创建web容器或者普通的IOC容器</span></span><br><span class="line">        context = createApplicationContext();</span><br><span class="line">        analyzers = <span class="keyword">new</span> FailureAnalyzers(context);</span><br><span class="line">        <span class="comment">// 准备上下文</span></span><br><span class="line">        <span class="comment">// 1.将environment保存到容器中</span></span><br><span class="line">        <span class="comment">// 2.触发监听事件——调用每个SpringApplicationRunListeners的contextPrepared方法</span></span><br><span class="line">        <span class="comment">// 3.调用ConfigurableListableBeanFactory的registerSingleton方法向容器中注入applicationArguments与printedBanner</span></span><br><span class="line">        <span class="comment">// 4.触发监听事件——调用每个SpringApplicationRunListeners的contextLoaded方法</span></span><br><span class="line">        prepareContext(context, environment, listeners, applicationArguments,</span><br><span class="line">            printedBanner);</span><br><span class="line">        <span class="comment">// 刷新容器，完成组件的扫描，创建，加载等</span></span><br><span class="line">        refreshContext(context);</span><br><span class="line">        afterRefresh(context, applicationArguments);</span><br><span class="line">        <span class="comment">// 触发监听事件——调用每个SpringApplicationRunListener的finished方法</span></span><br><span class="line">        listeners.finished(context, <span class="keyword">null</span>);</span><br><span class="line">        stopWatch.stop();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.logStartupInfo) &#123;</span><br><span class="line">            <span class="keyword">new</span> StartupInfoLogger(<span class="keyword">this</span>.mainApplicationClass)</span><br><span class="line">                .logStarted(getApplicationLog(), stopWatch);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 返回容器</span></span><br><span class="line">        <span class="keyword">return</span> context;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">        handleRunFailure(context, listeners, analyzers, ex);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>为了建立调用逻辑画了一张图，比较粗糙</p>
<p><img src="..\img\springbootApplication.png" alt=""></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>SpringApplication.run一共做了两件事</p>
<ul>
<li>创建SpringApplication对象；在对象初始化时保存事件监听器，容器初始化类以及判断是否为web应用，保存包含main方法的主配置类。</li>
<li>调用run方法；准备spring的上下文，完成容器的初始化，创建，加载等。会在不同的时机触发监听器的不同事件</li>
</ul>
<p><a href="https://www.cnblogs.com/davidwang456/p/5846513.html">https://www.cnblogs.com/davidwang456/p/5846513.html</a></p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>annotation</tag>
      </tags>
  </entry>
  <entry>
    <title>2019-12-14-分布式系统</title>
    <url>/2019/12/14/2019-12-14-%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<p>[TOC]</p>
<h1 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h1><p>原因：<br>目的：</p>
<h2 id="数据库唯一索引"><a href="#数据库唯一索引" class="headerlink" title="数据库唯一索引"></a>数据库唯一索引</h2><h2 id="redis-的SETNX"><a href="#redis-的SETNX" class="headerlink" title="redis 的SETNX"></a>redis 的SETNX</h2><h2 id="redis的RedLock"><a href="#redis的RedLock" class="headerlink" title="redis的RedLock"></a>redis的RedLock</h2><h1 id="分布式事务"><a href="#分布式事务" class="headerlink" title="分布式事务"></a>分布式事务</h1><h1 id="CAP"><a href="#CAP" class="headerlink" title="CAP"></a>CAP</h1><h1 id="BASE"><a href="#BASE" class="headerlink" title="BASE"></a>BASE</h1><h1 id="Paxos"><a href="#Paxos" class="headerlink" title="Paxos"></a>Paxos</h1><h1 id="Raft"><a href="#Raft" class="headerlink" title="Raft"></a>Raft</h1>]]></content>
      <categories>
        <category>Distribution</category>
      </categories>
      <tags>
        <tag>KnowageTree</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot概要</title>
    <url>/2019/12/16/2019-12-22-SpringBoot%E6%A6%82%E8%A6%81/</url>
    <content><![CDATA[<p>含义：spring 的简化配置版本（继承父类依赖，拥有父类的所有配置）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--你的项目pom文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--点开spring-boot-starter-parent，文件相对位置\org\springframework\boot\spring-boot-starter-parent\2.0.4.RELEASE--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../../spring-boot-dependencies<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>微服务</p>
<p>AOP</p>
<p>简化部署，可以再pom.xml中配置plugins来实现导出jar包，方便执行</p>
<p>Features:</p>
<ul>
<li>starter</li>
<li>入口类标记@SpringBootApplication</li>
<li>SpringBoot配置类@SpringBootConfiguration</li>
<li>配置类@Configuration</li>
<li>开启自动配置@EnableAutoConfiguration</li>
<li>自动配置包@AutoConfigurationPackage</li>
<li>导入组件@Import</li>
</ul>
<p>疑惑</p>
<ul>
<li>为什么使用注解</li>
<li>为什么需要AOP</li>
<li>为什么选择springboot</li>
<li></li>
</ul>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>introduction</tag>
      </tags>
  </entry>
  <entry>
    <title>2019-12-22-zookeeper概要</title>
    <url>/2019/12/16/2019-12-22-zookeeper%E6%A6%82%E8%A6%81/</url>
    <content><![CDATA[<p>含义：动物管理员，管理节点</p>
<p>作用：开源的分布式应用程序协调服务（简单来说，就是一个抽象出来，专门管理各个服务的管理员，发现服务，注册服务，以实现分布式应用的联合工作）</p>
<p>feature</p>
<ul>
<li>树状目录结构，节点称作znode</li>
<li>持久节点（客户端断开仍然存在）</li>
<li>临时节点（断开消失）</li>
<li>节点监听（通过get exists,getchildren来实行监听）</li>
</ul>
<p>应用：</p>
<ul>
<li>分布式锁</li>
</ul>
<table>
<thead>
<tr>
<th></th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>问题场景</td>
<td>我们有一个服务C，将A系统的订单数据，发送到B系统进行财务处理，但这个服务部C署了三个服务器来进行并发，其中有些数据在传送处理时会new一个objectid，如果不添加锁，该数据可能被两个服务同时调起，在B服务中生成两条记录</td>
</tr>
<tr>
<td>解决方案</td>
<td>我们同步数据时候，需要给同一个数据加锁，防止该数据同时被两个服务调起，服务访问某条订单数据时候，需要先获得锁，操作完后释放锁</td>
</tr>
<tr>
<td>实现方式</td>
<td>每个服务连接一个znode的下属有序临时节点，并监听上个节点的变化，编号最小的临时节点获得锁，操作资源，来实现</td>
</tr>
</tbody>
</table>
<ul>
<li>服务注册和发现</li>
</ul>
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>问题场景</td>
<td>我们同步数据的服务C（上个表格中描述）,可能是部署在一个机器上的多进程，也可能是部署在多个物理ip上的服务，他是动态变化的，如果没有zookeeper类的软件，可能我每改一次ip，都需要重启一下服务，服务宕机了，也要改ip（不然404）</td>
</tr>
<tr>
<td>解决方案</td>
<td>我们需要有个服务来管理应用状态，知道服务的运行状态，这样，当其他服务调起这个服务的时候，才能通过zookeeper提供的地址进行同行</td>
</tr>
<tr>
<td>实现方式</td>
<td>服务启动会注册到zookeeper，并保持心跳，其他服务想要调用某服务的时候，询问zookeeper拿到地址，然后发送请求报文（例如RPC）</td>
</tr>
<tr>
<td></td>
<td>1.每个应用创建一个持久节点，每个服务在持久节点下建立临时节点，不同应用间会有监听，A服务如果变动，B服务会收到订阅</td>
</tr>
<tr>
<td></td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>zookeeper</category>
      </categories>
      <tags>
        <tag>introduction</tag>
      </tags>
  </entry>
  <entry>
    <title>2020-01-03-SearchInsertPosition</title>
    <url>/2020/01/03/2020-01-03-SearchInsertPosition/</url>
    <content><![CDATA[<h1 id="LeetCode38"><a href="#LeetCode38" class="headerlink" title="LeetCode38"></a>LeetCode38</h1><p>Easy</p>
<p>Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.</p>
<p>You may assume no duplicates in the array.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: [1,3,5,6], 5</span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: [1,3,5,6], 2</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure>
<p><strong>Example 3:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: [1,3,5,6], 7</span><br><span class="line">Output: 4</span><br></pre></td></tr></table></figure>
<p><strong>Example 4:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: [1,3,5,6], 0</span><br><span class="line">Output: 0</span><br></pre></td></tr></table></figure>
<p>离职后的第一题想先简单点热个身（后面有个难的目前还没做出来），就是说给一个target，返回它在数组中的位置</p>
<h1 id="How"><a href="#How" class="headerlink" title="How"></a>How</h1><p>该题目一上脑子就可以写下如下的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">searchInsert</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (target &gt; nums[nums.length - <span class="number">1</span>]) &#123;</span><br><span class="line">        <span class="keyword">return</span> nums.length;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> pos =<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;nums.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">         <span class="keyword">if</span>(nums[i]&lt;target &amp;&amp; nums[i+<span class="number">1</span>]&gt;=target)&#123;</span><br><span class="line">            pos = ++i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>  pos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但转念一想，题目中给定的是一个sorted array这是一个优化的切口，可以将O(n)的复杂度降低到O(logn),通过递归来拆解完成这道题</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">searchInsert</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (low+high)/<span class="number">2</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (target &lt; nums[mid]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mid == <span class="number">0</span> || target &gt; nums[mid-<span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> searchInsert(nums, target, low, mid-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (target &gt; nums[mid]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mid == nums.length-<span class="number">1</span> || target &lt; nums[mid+<span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">return</span> mid+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> searchInsert(nums, target, mid+<span class="number">1</span>, high);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> mid;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>easy</tag>
      </tags>
  </entry>
  <entry>
    <title>2020-01-06-gRPC</title>
    <url>/2020/01/06/2020-01-06-gRPC/</url>
    <content><![CDATA[<h1 id="why"><a href="#why" class="headerlink" title="why"></a>why</h1><p>gRPC是任何环境都可以运行的高性能开源框架，他可以通过pluggable support来高效实现负载均衡，心跳检测和授权，他也可以应用于分布式计算的最后一个流程（连接各个端到后端）</p>
<ul>
<li>简单的服务定义</li>
<li>快速启动易扩展</li>
<li>跨语言，跨平台</li>
<li>双向流和鉴权</li>
</ul>
<h1 id="feature"><a href="#feature" class="headerlink" title="feature"></a>feature</h1><ul>
<li><p>gRPC可以通过protobuf来定义接口，从而可以有更加严格的接口约束条件。关于protobuf可以参见笔者之前的小文<a href="https://www.jianshu.com/p/b723053a86a6">Google Protobuf简明教程</a> </p>
</li>
<li><p>另外，通过protobuf可以将数据序列化为二进制编码，这会大幅减少需要传输的数据量，从而大幅提高性能。</p>
</li>
<li><p>gRPC可以方便地支持流式通信(理论上通过http2.0就可以使用streaming模式, 但是通常web服务的restful api似乎很少这么用，通常的流式数据应用如视频流，一般都会使用专门的协议如HLS，RTMP等，这些就不是我们通常web服务了，而是有专门的服务器应用。）</p>
</li>
</ul>
<h1 id="node"><a href="#node" class="headerlink" title="node"></a>node</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ # Clone the repository to get the example code</span><br><span class="line">$ git clone -b v1.25.0 https://github.com/grpc/grpc</span><br><span class="line">$ # Navigate to the dynamic codegen &quot;hello, world&quot; Node example:</span><br><span class="line">$ cd grpc/examples/node/dynamic_codegen</span><br><span class="line">$ # Install the example&#x27;s dependencies</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>gRPC</category>
      </categories>
      <tags>
        <tag>network</tag>
      </tags>
  </entry>
  <entry>
    <title>2020-01-07-SetTimeout</title>
    <url>/2020/01/07/2020-01-07-SetTimeout/</url>
    <content><![CDATA[<p>执行了一下程序：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">while(true)&#123;</span><br><span class="line">    setTimeout(()=&gt;&#123;</span><br><span class="line">        console.log(1)</span><br><span class="line">    &#125;,0)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>返回了一下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;--- Last few GCs ---&gt;</span><br><span class="line"></span><br><span class="line">[12308:000001E565C2F6F0]    14167 ms: Mark-sweep 1395.9 (1425.2) -&gt; 1395.9 (1423.7) MB, 1754.1 / 0.0 ms  (+ 0.0 ms in 39 steps since start of marking, biggest step 0.0 ms, walltime since start of marking 1764 ms) (average mu = 0.105, current mu = 0.020) a[12308:000001E565C2F6F0]    14175 ms: Scavenge 1397.3 (1423.7) -&gt; 1397.3 (1425.2) MB, 7.0 / 0.0 ms  (average mu = 0.105, current mu = 0.020) allocation failure</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;--- JS stacktrace ---&gt;</span><br><span class="line"></span><br><span class="line">==== JS stack trace =========================================</span><br><span class="line"></span><br><span class="line">    0: ExitFrame [pc: 000002AFCABDC5C1]</span><br><span class="line">Security context: 0x037b5391e6e9 &lt;JSObject&gt;</span><br><span class="line">    1: /* anonymous */ [0000016D4360B9A1] [D:\working\h3yun\test.3.js:~1] [pc=000002AFCAC7210F](this=0x016d4360bad1 &lt;Object map = 000001F79EE82571&gt;,exports=0x016d4360bad1 &lt;Object map = 000001F79EE82571&gt;,require=0x016d4360ba91 &lt;JSFunction require (sfi = 00000397F3EC6A31)&gt;,module=0x016d4360ba09 &lt;Module map = 000001F79EED3DA1&gt;,__filename=0x0397f3ece219 &lt;Strin...</span><br><span class="line"></span><br><span class="line">FATAL ERROR: Ineffective mark-compacts near heap limit Allocation failed - JavaScript heap out of memory</span><br><span class="line"> 1: 00007FF7C7BFC6AA v8::internal::GCIdleTimeHandler::GCIdleTimeHandler+4506</span><br><span class="line"> 2: 00007FF7C7BD7416 node::MakeCallback+4534</span><br><span class="line"> 3: 00007FF7C7BD7D90 node_module_register+2032</span><br><span class="line"> 4: 00007FF7C7EF189E v8::internal::FatalProcessOutOfMemory+846</span><br><span class="line"> 5: 00007FF7C7EF17CF v8::internal::FatalProcessOutOfMemory+639</span><br><span class="line"> 6: 00007FF7C80D7F94 v8::internal::Heap::MaxHeapGrowingFactor+9620</span><br><span class="line"> 7: 00007FF7C80CEF76 v8::internal::ScavengeJob::operator=+24550</span><br><span class="line"> 8: 00007FF7C80CD5CC v8::internal::ScavengeJob::operator=+17980</span><br><span class="line"> 9: 00007FF7C80D6317 v8::internal::Heap::MaxHeapGrowingFactor+2327</span><br><span class="line">10: 00007FF7C80D6396 v8::internal::Heap::MaxHeapGrowingFactor+2454</span><br><span class="line">11: 00007FF7C8200637 v8::internal::Factory::NewFillerObject+55</span><br><span class="line">12: 00007FF7C827D826 v8::internal::operator&lt;&lt;+73494</span><br><span class="line">13: 000002AFCABDC5C1</span><br></pre></td></tr></table></figure>
<h1 id="why"><a href="#why" class="headerlink" title="why"></a>why</h1><p>因为业务代码阻塞住，没有进入timer_handler的循环，所以1虽然进入了timer的红黑树中，但是不可能输出，不像之前for循环会有一个截止条件，后续的定时器还是可以生效的</p>
<p>另外有一个地方记混了，遍历回调的时候，会执行直到回调为空或者最大执行回调数量，而业务代码只会在这里阻塞不会停止，这也是为何出现GC的日志</p>
<h1 id="what"><a href="#what" class="headerlink" title="what"></a>what</h1><p>setimeout是JS前端常用的控件用来延时执行一个函数（回调），当执行业务代码的时候我们会将settimeout，setImmediate，nextTick，setInterval插入timer_handler的不同队列中（详见左侧node分支，且文章也在更新中），当JS单线程执行完业务代码后，才开始eventloop查找观察者来进行回调，当然也存在延时不精确的可能</p>
]]></content>
  </entry>
  <entry>
    <title>2020-01-07-关于Promise的思考</title>
    <url>/2020/01/07/2020-01-07-%E5%85%B3%E4%BA%8EPromise%E7%9A%84%E6%80%9D%E8%80%83/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>（这道题在互联网上已经有了）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">可以添加任务，任务包含任务数据，任务延迟触发的等待时间。</span><br><span class="line">在任务到达触发时间点时，自动触发执行此任务。</span><br><span class="line">队列中任务保持先进先出原则：假设 A 任务的触发等待时间为 X，B 任务的触发等待时间为 Y，B 在 A 之后被添加入队列，则 A 的前驱任务执行完成后等待时间 X 后，才执行 A，同理在 A 执行完成后，等待时间 Y，才执行 B。</span><br></pre></td></tr></table></figure>
<h1 id="思路过程"><a href="#思路过程" class="headerlink" title="思路过程"></a>思路过程</h1><h2 id="1-Java上线"><a href="#1-Java上线" class="headerlink" title="1.Java上线"></a>1.Java上线</h2><p>读题目就是<strong>延时队列</strong>的特征，Java有锁，有多线程，写起来多方便</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.BlockingQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.DelayQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Delayed;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HandWritingQueue</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> BlockingQueue&lt;DelayedElement&gt; deque = <span class="keyword">new</span> DelayQueue&lt;&gt;();</span><br><span class="line">        Runnable producerRunnable = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">true</span> &amp;&amp; i&gt;<span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        --i;</span><br><span class="line">                        System.out.println(<span class="string">&quot;producing &quot;</span>+i+<span class="string">&quot;,wait &quot;</span>+i+<span class="string">&quot; seconds&quot;</span>);</span><br><span class="line">                        deque.put(<span class="keyword">new</span> DelayedElement(<span class="number">1000</span> * i, <span class="string">&quot;i=&quot;</span> + i));</span><br><span class="line">                        Thread.sleep(<span class="number">200</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Runnable customerRunnable = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;consuming:&quot;</span> + deque.take().msg);</span><br><span class="line">                        <span class="comment">//Thread.sleep(500);</span></span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        Runnable getSize= <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;size=&quot;</span>+deque.size());</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread(producerRunnable);</span><br><span class="line">        thread1.start();</span><br><span class="line"></span><br><span class="line">        Thread thread2 = <span class="keyword">new</span> Thread(customerRunnable);</span><br><span class="line">        thread2.start();</span><br><span class="line"></span><br><span class="line">        Thread thread3 = <span class="keyword">new</span> Thread(getSize);</span><br><span class="line">        thread3.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DelayedElement</span> <span class="keyword">implements</span> <span class="title">Delayed</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> expire;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> String msg;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">DelayedElement</span><span class="params">(<span class="keyword">long</span> delay, String msg)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.msg = msg;</span><br><span class="line">            expire = System.currentTimeMillis() + delay;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getDelay</span><span class="params">(TimeUnit unit)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> unit.convert(<span class="keyword">this</span>.expire - System.currentTimeMillis(), TimeUnit.MILLISECONDS);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Delayed o)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span>  -<span class="number">1</span>;<span class="comment">//FIFO</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-Node上线"><a href="#2-Node上线" class="headerlink" title="2.Node上线"></a>2.Node上线</h2><p>被提醒该题目可以用node实现，且不需要借助redis来做，然后我上手就是一把操作：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DelayElement</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">data, expire</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.data = data;</span><br><span class="line">    <span class="built_in">this</span>.expire = expire;<span class="comment">//second</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> delayArray = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">//push two element in delayArray</span></span><br><span class="line">delayArray.push(<span class="keyword">new</span> DelayElement(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">delayArray.push(<span class="keyword">new</span> DelayElement(<span class="number">2</span>, <span class="number">1</span>));</span><br><span class="line"><span class="keyword">let</span> length = delayArray.length;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> time_cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (delayArray.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> de = delayArray.shift();</span><br><span class="line">  time_cnt += de.expire;<span class="comment">//serial</span></span><br><span class="line">  (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;expire data is :&#x27;</span> + de.data + <span class="string">&#x27;,expire time is :&#x27;</span> + de.expire);</span><br><span class="line">    &#125;, time_cnt * <span class="number">1000</span>);</span><br><span class="line">  &#125;)();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我以为设计的考点也就是立即执行函数，延时的使用，但是这里的for循环是个伪串行，实际上是并发的，也为第三步的修改提供了bug</p>
<h2 id="3-Promise时代"><a href="#3-Promise时代" class="headerlink" title="3.Promise时代"></a>3.Promise时代</h2><p>一开始我是想把async函数放进去，写了如下的代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span></span><br><span class="line"><span class="keyword">const</span> delayArray = [];</span><br><span class="line"><span class="keyword">const</span> daPush = <span class="function">(<span class="params">data, expire</span>) =&gt;</span> &#123;</span><br><span class="line">  delayArray.push(<span class="keyword">async</span> () =&gt;  &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;data is &#x27;</span> + data + <span class="string">&#x27; and expire is &#x27;</span> + expire);</span><br><span class="line">    &#125;, expire * <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line">daPush(<span class="number">1</span>, <span class="number">4</span>);<span class="comment">//2 seconds</span></span><br><span class="line">daPush(<span class="number">2</span>, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> da <span class="keyword">of</span> delayArray) &#123;</span><br><span class="line">    <span class="keyword">await</span> da();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
<p>发现代码还是串行的，然后查了一下可能的问题（以下为个人猜测，欢迎指正）async声明的函数会包装成Promise不假，但是for循环会并发去执行await中的async</p>
<p>4.正解</p>
<p><del>promise执行会阻塞主线程</del></p>
<p>Macrotasks和Microtasks 都属于上述的异步任务中的一种，他们分别有如下API：<br><strong>macrotasks:</strong> setTimeout, setInterval, setImmediate, I/O, UI rendering<br><strong>microtasks:</strong> process.nextTick, Promise, MutationObserver</p>
<p>任务队列中，在每一次事件循环中，<strong>macrotask</strong>只会<strong>提取一个执行</strong>，而<strong>microtask</strong>会<strong>一直</strong>提取，直到microsoft队列<strong>为空</strong>为止。</p>
<p>也就是说如果某个microtask任务被推入到执行中，那么当主线程任务执行完成后，会循环调用该队列任务中的下一个任务来执行，直到该任务队列到最后一个任务为止。</p>
<p>而事件循环每次只会入栈一个macrotask,<strong>主线程</strong>执行完成该任务后又会检查<strong>microtasks</strong>队列并完成里面的所有任务后再执行<strong>macrotask</strong>的任务。</p>
<p>以及macrotask应该对应的是check队列（该行未验证）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span></span><br><span class="line"><span class="keyword">const</span> delayArray = [];</span><br><span class="line"><span class="keyword">const</span> daPush = <span class="function">(<span class="params">data, expire</span>) =&gt;</span> &#123;</span><br><span class="line">  delayArray.push(<span class="function">() =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span>(data)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;data is &#x27;</span> + data + <span class="string">&#x27; and expire is &#x27;</span> + expire);</span><br><span class="line">        resolve(<span class="literal">true</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span>&#123;</span><br><span class="line">        reject(<span class="string">&#x27;there is nodata&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, expire * <span class="number">1000</span>);</span><br><span class="line">  &#125;));</span><br><span class="line">&#125;;</span><br><span class="line">daPush(<span class="number">1</span>, <span class="number">4</span>);<span class="comment">//2 seconds</span></span><br><span class="line">daPush(<span class="number">2</span>, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> da <span class="keyword">of</span> delayArray) &#123;</span><br><span class="line">    da().then(<span class="function">(<span class="params">value</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="comment">// console.log(value);</span></span><br><span class="line">    &#125;).catch(<span class="function">(<span class="params">value</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(value);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//没有28-33，只35行也可以</span></span><br><span class="line">    <span class="comment">// await da();</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>2020-01-08-SortColors</title>
    <url>/2020/01/08/2020-01-08-SortColors/</url>
    <content><![CDATA[<h1 id="Leetcode-75"><a href="#Leetcode-75" class="headerlink" title="Leetcode-75"></a>Leetcode-75</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Given an array with n objects colored red, white or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white and blue.</span><br><span class="line"></span><br><span class="line">Here, we will use the integers 0, 1, and 2 to represent the color red, white, and blue respectively.</span><br><span class="line"></span><br><span class="line">Note: You are not suppose to use the library&#x27;s sort function for this problem.</span><br><span class="line"></span><br><span class="line">Example:</span><br><span class="line"></span><br><span class="line">Input: [2,0,2,1,1,0]</span><br><span class="line">Output: [0,0,1,1,2,2]</span><br><span class="line">Follow up:</span><br><span class="line"></span><br><span class="line">A rather straight forward solution is a two-pass algorithm using counting sort.</span><br><span class="line">First, iterate the array counting number of 0&#x27;s, 1&#x27;s, and 2&#x27;s, then overwrite array with total number of 0&#x27;s, then 1&#x27;s and followed by 2&#x27;s.</span><br><span class="line">Could you come up with a one-pass algorithm using only constant space?</span><br></pre></td></tr></table></figure>
<h1 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h1><p>题目乍一看非常简单,但确实说使用简单的sort方法以及o(n^2)的排序确实会浪费时间复杂度，本着好奇心，我试了一下，果然成了吊车尾</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sortColors</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;nums.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;nums.length;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[i]&gt;nums[j])&#123;</span><br><span class="line">                    <span class="keyword">int</span> tmp=nums[i];</span><br><span class="line">                    nums[i]=nums[j];</span><br><span class="line">                    nums[j]=tmp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Runtime: <span class="number">1</span> ms, faster than <span class="number">6.35</span>% of Java online submissions <span class="keyword">for</span> Sort Colors.</span><br></pre></td></tr></table></figure>
<p>该题优化的核心位置是该数组是一个一维数组，设置两个指针，左边遍历0，遇到0往左放，遇到2往右放，r和l为左右分界线，index记录最后一个0的位置<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sortColors</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> r = nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(l &lt;= r) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[l] == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(l &gt; index) &#123;</span><br><span class="line">                    <span class="keyword">int</span> tmp = nums[index];</span><br><span class="line">                    nums[index] = nums[l];</span><br><span class="line">                    nums[l] = tmp;</span><br><span class="line">                    index++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    l++;</span><br><span class="line">                    index++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[l] == <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> tmp = nums[r];</span><br><span class="line">                nums[r] = <span class="number">2</span>;</span><br><span class="line">                nums[l] = tmp;</span><br><span class="line">                r--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> l++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Medium</tag>
      </tags>
  </entry>
  <entry>
    <title>2020-01-08-MinimunPathSum</title>
    <url>/2020/01/08/2020-01-08-MinimumPathSum/</url>
    <content><![CDATA[<h1 id="Leetcode-64"><a href="#Leetcode-64" class="headerlink" title="Leetcode-64"></a>Leetcode-64</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.</span><br><span class="line"></span><br><span class="line">Note: You can only move either down or right at any point in time.</span><br><span class="line"></span><br><span class="line">Example:</span><br><span class="line"></span><br><span class="line">Input:</span><br><span class="line">[</span><br><span class="line">  [1,3,1],</span><br><span class="line">  [1,5,1],</span><br><span class="line">  [4,2,1]</span><br><span class="line">]</span><br><span class="line">Output: 7</span><br><span class="line">Explanation: Because the path 1→3→1→1→1 minimizes the sum.</span><br></pre></td></tr></table></figure>
<h1 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h1><p>解法为简单的动态规划，只要找到比较该元素，上方和左方的值的最小值，然后与该值相加，就可以得到解</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int minPathSum(int[][] grid) &#123;</span><br><span class="line">        for(int i=1; i&lt;grid.length; i++) grid[i][0] += grid[i-1][0];</span><br><span class="line">        for(int j=1; j&lt;grid[0].length; j++) grid[0][j] += grid[0][j-1];</span><br><span class="line">        for (int i=1; i&lt;grid.length; i++) &#123;</span><br><span class="line">            for (int j=1; j&lt;grid[0].length; j++) &#123;</span><br><span class="line">                grid[i][j] = Math.min(grid[i][j-1], grid[i-1][j]) + grid[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return grid[grid.length-1][grid[0].length-1];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Medium</tag>
      </tags>
  </entry>
  <entry>
    <title>2020-01-10-MatrixZero</title>
    <url>/2020/01/10/2020-01-10-MatrixZero/</url>
    <content><![CDATA[<h1 id="LeetCode-73"><a href="#LeetCode-73" class="headerlink" title="LeetCode 73"></a>LeetCode 73</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Given a m x n matrix, if an element is 0, set its entire row and column to 0. Do it in-place.</span><br><span class="line"></span><br><span class="line">Example 1:</span><br><span class="line"></span><br><span class="line">Input: </span><br><span class="line">[</span><br><span class="line">  [1,1,1],</span><br><span class="line">  [1,0,1],</span><br><span class="line">  [1,1,1]</span><br><span class="line">]</span><br><span class="line">Output: </span><br><span class="line">[</span><br><span class="line">  [1,0,1],</span><br><span class="line">  [0,0,0],</span><br><span class="line">  [1,0,1]</span><br><span class="line">]</span><br><span class="line">Example 2:</span><br><span class="line"></span><br><span class="line">Input: </span><br><span class="line">[</span><br><span class="line">  [0,1,2,0],</span><br><span class="line">  [3,4,5,2],</span><br><span class="line">  [1,3,1,5]</span><br><span class="line">]</span><br><span class="line">Output: </span><br><span class="line">[</span><br><span class="line">  [0,0,0,0],</span><br><span class="line">  [0,4,5,0],</span><br><span class="line">  [0,3,1,0]</span><br><span class="line">]</span><br><span class="line">Follow up:</span><br><span class="line"></span><br><span class="line">A straight forward solution using O(mn) space is probably a bad idea.</span><br><span class="line">A simple improvement uses O(m + n) space, but still not the best solution.</span><br><span class="line">Could you devise a constant space solution?</span><br></pre></td></tr></table></figure>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>一开始以为递归可以解决，可以将矩阵一层层拆开，写下了如下的代码：<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public void setZeroes(int[][] matrix) &#123;</span><br><span class="line">    int rows = matrix.length-1;</span><br><span class="line">    int cols = matrix[0].length-1;</span><br><span class="line">    regression(matrix, rows&gt;=cols?cols:rows);</span><br><span class="line">&#125;</span><br><span class="line">public void regression(int[][] matrix,int index)&#123;</span><br><span class="line">    if(index&lt;0)&#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    boolean flag = false;</span><br><span class="line">    for(int i =index;i&lt;matrix[0].length;i++)&#123;</span><br><span class="line">        if(matrix[index][i]==0)</span><br><span class="line">        &#123;</span><br><span class="line">            handleZero(matrix,i);</span><br><span class="line">            flag=true;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if(flag==false)&#123;</span><br><span class="line">        for(int j =index;j&lt;matrix.length;j++)&#123;</span><br><span class="line">            if(matrix[j][index]==0)</span><br><span class="line">            &#123;</span><br><span class="line">                handleZero(matrix,j);</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    regression(matrix, --index);</span><br><span class="line">&#125;</span><br><span class="line">private void handleZero(int[][] matrix,int pos) &#123;</span><br><span class="line"></span><br><span class="line">    for(int i=matrix[0].length-1;i&gt;=pos;i--)&#123;</span><br><span class="line">        matrix[pos][i]=0;</span><br><span class="line">    &#125;</span><br><span class="line">    for(int j=matrix.length-1;j&gt;=pos;j--)&#123;</span><br><span class="line">        matrix[j][pos]=0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>写完后很快发现不能够实现，原因就在于他只能管理到内层，外层标为0后，没办法做额外的标记（其实生产代码可以打一些标记），所以只能抛弃这个本以为很简单的方法，该用了set合集去记录要设置0行列的行号或者列号，这个复杂度并不是很复杂，但是执行完发现代码的效率还是很低，先放代码：<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">  public void setZeroes(int[][] matrix) &#123;</span><br><span class="line">    int R = matrix.length;</span><br><span class="line">    int C = matrix[0].length;</span><br><span class="line">    Set&lt;Integer&gt; rows = new HashSet&lt;Integer&gt;();</span><br><span class="line">    Set&lt;Integer&gt; cols = new HashSet&lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line">    for (int i = 0; i &lt; R; i++) &#123;</span><br><span class="line">      for (int j = 0; j &lt; C; j++) &#123;</span><br><span class="line">        if (matrix[i][j] == 0) &#123;</span><br><span class="line">          rows.add(i);</span><br><span class="line">          cols.add(j);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for (int i = 0; i &lt; R; i++) &#123;</span><br><span class="line">      for (int j = 0; j &lt; C; j++) &#123;</span><br><span class="line">        if (rows.contains(i) || cols.contains(j)) &#123;</span><br><span class="line">          matrix[i][j] = 0;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>代码低效的原因在于动用了两层循环，时间复杂度非常低，题目的置0是有规律的，不是无规律的，所以我开始寻求更新简单的方法,先贴最优解，要睡觉了，我的头发啊</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public void setZeroes(int[][] matrix) &#123;</span><br><span class="line">		int R = matrix.length;</span><br><span class="line">		int C = matrix[0].length;</span><br><span class="line">		boolean isCol = false;</span><br><span class="line">		</span><br><span class="line">		for(int i=0; i&lt;R; i++) &#123;</span><br><span class="line">			if (matrix[i][0] == 0) &#123;</span><br><span class="line">		        isCol = true;</span><br><span class="line">		    &#125;</span><br><span class="line">			for(int j=1; j&lt;C; j++) &#123;</span><br><span class="line">				if(matrix[i][j]==0) &#123;</span><br><span class="line">					matrix[0][j] = 0;</span><br><span class="line">					matrix[i][0] = 0;</span><br><span class="line">				&#125;	</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		// Iterate over the array once again and using the first row and first column, update the elements.</span><br><span class="line">		for(int i=1; i&lt;R; i++) &#123;</span><br><span class="line">			for(int j=1; j&lt;C; j++) &#123;</span><br><span class="line">				if(matrix[i][0]==0 || matrix[0][j]==0) &#123;</span><br><span class="line">					matrix[i][j] = 0;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		// See if the first row needs to be set to zero as well</span><br><span class="line">		if(matrix[0][0]==0) &#123;</span><br><span class="line">			for(int j=0; j&lt;C; j++) &#123;</span><br><span class="line">				matrix[0][j] = 0;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		// See if the first column needs to be set to zero as well</span><br><span class="line">		if(isCol) &#123;</span><br><span class="line">			for(int i=0; i&lt;R; i++) &#123;</span><br><span class="line">				matrix[i][0] = 0;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Medium</tag>
      </tags>
  </entry>
  <entry>
    <title>2020-01-09-RedisTransaction</title>
    <url>/2020/01/09/2020-01-09-RidisTransaction/</url>
    <content><![CDATA[<blockquote>
<p>官网doc：<a href="https://redis.io/topics/transactions">https://redis.io/topics/transactions</a></p>
<p>本文纯属阅读笔记，无学术参考价值</p>
</blockquote>
<h1 id="what"><a href="#what" class="headerlink" title="what"></a>what</h1><p>事务（transaction）的本质就是处理好几个动作，要么都成功，要么其中一个失败就全部回滚</p>
<p>每门语言都会有事务的支持，node也有async的方法实现事务几个动作串行，或者并行，一个失败全部回滚，之前写过支付的例子，使用async.waterfall,购买会员后</p>
<p>1.查询支付宝返回支付是否成功</p>
<p>2.获取用户所买会员的等级及相关权限</p>
<p>3.将权益插入用户表中</p>
<p>4.将订单数据记录到订单表中，方便后台查看订单量</p>
<p>大致步骤就是这些</p>
<p>Redis主要使用MULTI ,EXEC,DISCARD WATCH来实现事务的功能</p>
<p>遵循以下原则：</p>
<ul>
<li>所有命令被序列化后顺序执行，且执行期间不接受其他请求，保证隔离性</li>
<li>EXEC命令触发事务中所有命令的执行，因此，如果客户端调用MULTI命令之前失去连接，则不执行任何操作。如果EXEC命令调用过，则所有的命令都会被执行</li>
</ul>
<h1 id="how"><a href="#how" class="headerlink" title="how"></a>how</h1><p>MULTI输入事务以OK答复，此时用户可以发送多个命令，Redis都不会执行，而是排队，一旦调用EXEC，则将会执行所有命令，调用DISCARD将刷新（Flush？清空？重新执行？）事务队列并退出事务</p>
<p>示例代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; MULTI</span><br><span class="line">OK</span><br><span class="line">&gt; INCR foo</span><br><span class="line">QUEUED</span><br><span class="line">&gt; INCR bar</span><br><span class="line">QUEUED</span><br><span class="line">&gt; EXEC</span><br><span class="line">1) (integer) 1</span><br><span class="line">2) (integer) 1</span><br></pre></td></tr></table></figure>
<p>可以看出EXEC返回一个数组，其中每个元素都是事务中单个命令的答复，其发出顺序与命令相同</p>
<p>当Reids连接处于MULTI的请求时，所有的命令都将以字符串queued答复，当EXEC时，将顺序执行</p>
<h2 id="errors"><a href="#errors" class="headerlink" title="errors"></a>errors</h2><p>可能存在两种命令错误：</p>
<ul>
<li>命令可能无法排队，因此在EXEC之前可能有错误（包括命令语法错误）</li>
<li>调用EXEC后，命令执行失败</li>
</ul>
<p>客户端通过检查已排队（queued）的命令返回值来判断第一种错误，另外从2.6.5开始，服务器将记住在命令排队期间发生的错误，并且拒绝执行事务，返回错误并自动丢弃事务</p>
<p><strong>EXEC执行后错误不会特殊处理，所有的命令都将被执及时有些命令失败</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MULTI</span><br><span class="line">+OK</span><br><span class="line">SET a abc</span><br><span class="line">+QUEUED</span><br><span class="line">LPOP a</span><br><span class="line">+QUEUED</span><br><span class="line">EXEC</span><br><span class="line">*2</span><br><span class="line">+OK</span><br><span class="line">-ERR Operation against a key holding the wrong kind of value</span><br></pre></td></tr></table></figure>
<p><strong>即时命令失败，队列里的其他命令也会处理</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    name:stu</span><br><span class="line">    time:1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Transaction</tag>
      </tags>
  </entry>
  <entry>
    <title>2020-01-11-SameTree</title>
    <url>/2020/01/11/2020-01-11-SameTree/</url>
    <content><![CDATA[<h1 id="LeetCode-100"><a href="#LeetCode-100" class="headerlink" title="LeetCode 100"></a>LeetCode 100</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Given two binary trees, write a function to check if they are the same or not.</span><br><span class="line"></span><br><span class="line">Two binary trees are considered the same if they are structurally identical and the nodes have the same value.</span><br><span class="line"></span><br><span class="line">Example 1:</span><br><span class="line"></span><br><span class="line">Input:     1         1</span><br><span class="line">          / \       / \</span><br><span class="line">         2   3     2   3</span><br><span class="line"></span><br><span class="line">        [1,2,3],   [1,2,3]</span><br><span class="line"></span><br><span class="line">Output: true</span><br><span class="line">Example 2:</span><br><span class="line"></span><br><span class="line">Input:     1         1</span><br><span class="line">          /           \</span><br><span class="line">         2             2</span><br><span class="line"></span><br><span class="line">        [1,2],     [1,null,2]</span><br><span class="line"></span><br><span class="line">Output: false</span><br><span class="line">Example 3:</span><br><span class="line"></span><br><span class="line">Input:     1         1</span><br><span class="line">          / \       / \</span><br><span class="line">         2   1     1   2</span><br><span class="line"></span><br><span class="line">        [1,2,1],   [1,1,2]</span><br><span class="line"></span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>题目其实很简单的一个递归Recursion,我们很轻松可以通过递归来解决<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">  public boolean isSameTree(TreeNode p, TreeNode q) &#123;</span><br><span class="line">    // p and q are both null</span><br><span class="line">    if (p == null &amp;&amp; q == null) return true;</span><br><span class="line">    // one of p and q is null</span><br><span class="line">    if (q == null || p == null) return false;</span><br><span class="line">    if (p.val != q.val) return false;</span><br><span class="line">    return isSameTree(p.right, q.right) &amp;&amp;</span><br><span class="line">            isSameTree(p.left, q.left);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>时间复杂度为O(n)，控件复杂度为O(logn)~O(n)之间，这道题就不考虑其他解法了，recursion目前看来是最优解</p>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Medium</tag>
      </tags>
  </entry>
  <entry>
    <title>2020-01-15-sqrtx</title>
    <url>/2020/01/15/2020-01-15-sqrtx/</url>
    <content><![CDATA[<h1 id="LeetCode-69"><a href="#LeetCode-69" class="headerlink" title="LeetCode-69"></a>LeetCode-69</h1><p>Implement int sqrt(int x).</p>
<p>Compute and return the square root of x, where x is guaranteed to be a non-negative integer.</p>
<p>Since the return type is an integer, the decimal digits are truncated and only the integer part of the result is returned.</p>
<p>Example 1:</p>
<p>Input: 4<br>Output: 2<br>Example 2:</p>
<p>Input: 8<br>Output: 2<br>Explanation: The square root of 8 is 2.82842…, and since<br>             the decimal part is truncated, 2 is returned.</p>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>就是手写一个根号源码，首先想到的就是通过平方来做</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">mySqrt</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">46340</span>;i&lt;<span class="number">46341</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(x&gt;=(<span class="keyword">long</span>)i*i&amp;&amp;x&lt;(<span class="keyword">long</span>)(i+<span class="number">1</span>)*(i+<span class="number">1</span>))&#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">Runtime: <span class="number">22</span> ms</span><br><span class="line">Memory Usage: <span class="number">34</span> MB</span><br></pre></td></tr></table></figure>
<p>如果不遵循题目的要求，使用Math函数，所以我们的目标大概是3ms附近</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">mySqrt</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> (<span class="keyword">int</span>)Math.sqrt(Double.parseDouble(String.valueOf(x)));</span><br><span class="line">    &#125;</span><br><span class="line">Runtime: <span class="number">3</span> ms</span><br></pre></td></tr></table></figure>
<p>解法粗暴，遇到大数的时候会从0重新开始计算，复杂度O(N)</p>
<h2 id="第一次优化"><a href="#第一次优化" class="headerlink" title="第一次优化"></a>第一次优化</h2><p>思路就是避免做两次乘法然后去比较，这个地方可以去优化</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int mySqrt(int x) &#123;</span><br><span class="line">        long n = 1;</span><br><span class="line">        while(n * n &lt;= x) &#123;</span><br><span class="line">            n++;</span><br><span class="line">        &#125;</span><br><span class="line">        return (int) n - 1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Runtime: 11 ms</span><br></pre></td></tr></table></figure>
<h2 id="第二次优化"><a href="#第二次优化" class="headerlink" title="第二次优化"></a>第二次优化</h2><p>可以使用二分法来逐步逼近i，没有必要从1开始顺序遍历</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">mySqrt</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">if</span> (x == <span class="number">0</span> || x == <span class="number">1</span>) <span class="keyword">return</span> x;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> right = x;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> midPoint = (left + right) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (midPoint == x / midPoint) &#123;</span><br><span class="line">                <span class="keyword">return</span> midPoint;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (midPoint &gt; x / midPoint) &#123;</span><br><span class="line">                right = midPoint;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (midPoint &lt; x / midPoint) &#123;</span><br><span class="line">                left = midPoint + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> left - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Runtime: <span class="number">1</span> ms</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Easy</tag>
      </tags>
  </entry>
  <entry>
    <title>2020-01-17-ImplementStr</title>
    <url>/2020/01/17/2020-01-17-ImplementStr/</url>
    <content><![CDATA[<h1 id="LeetCode28"><a href="#LeetCode28" class="headerlink" title="LeetCode28"></a>LeetCode28</h1><p>Implement strStr().</p>
<p>Return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.</p>
<p>Example 1:</p>
<p>Input: haystack = “hello”, needle = “ll”<br>Output: 2<br>Example 2:</p>
<p>Input: haystack = “aaaaa”, needle = “bba”<br>Output: -1<br>Clarification:</p>
<p>What should we return when needle is an empty string? This is a great question to ask during an interview.</p>
<p>For the purpose of this problem, we will return 0 when needle is an empty string. This is consistent to C’s strstr() and Java’s indexOf().</p>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>如果不考虑java偷懒的写法当然可以想到indexof的想法<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">strStr</span><span class="params">(String haystack, String needle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> haystack.indexOf(needle);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Runtime: <span class="number">1</span> ms</span><br></pre></td></tr></table></figure><br>先按照题意写了如下代码：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">strStr</span><span class="params">(String haystack, String needle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(needle.length()==<span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(haystack.length()==<span class="number">0</span>)<span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> index =-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;haystack.length();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(haystack.charAt(i)==needle.charAt(<span class="number">0</span>))&#123;</span><br><span class="line">                flag=<span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j =<span class="number">0</span>;j&lt;needle.length();j++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(i+j&gt;=haystack.length())&#123;</span><br><span class="line">                        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(haystack.charAt(i+j)!=needle.charAt(j))&#123;</span><br><span class="line">                        flag=<span class="keyword">false</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">                    <span class="keyword">return</span>  i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>  index;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Runtime: <span class="number">4</span> ms</span><br><span class="line">Memory Usage: <span class="number">42.7</span> MB</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Easy</tag>
      </tags>
  </entry>
  <entry>
    <title>2020-01-31-JS设计模式</title>
    <url>/2020/01/31/2020-01-31-JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>模式共计八种：</p>
<ul>
<li>单例模式</li>
<li>构造器模式</li>
<li>建造者模式</li>
<li>代理模式</li>
<li>外观模式</li>
<li>观察者模式</li>
<li>策略模式</li>
<li>迭代器模式</li>
</ul>
<p>设计模式的提出，为了更好的解耦，可拓展，服务可靠，不限定某种语言的实现</p>
<h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>一个类只有一个实例，如果存在就不实例化，如果不存在则new，以保证<strong>一个类只有一个实例</strong></p>
<h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><ul>
<li>模块间通信</li>
<li>保证某个类的对象的唯一性</li>
<li>防止变量污染</li>
</ul>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul>
<li>this的使用</li>
<li>闭包容易stack over flow需要及时清理</li>
<li>创建新对象成本较高</li>
</ul>
<h2 id="实际案例"><a href="#实际案例" class="headerlink" title="实际案例"></a>实际案例</h2><p>如网站的计数器，多线程的线程池</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 养鱼游戏</span></span><br><span class="line">  <span class="keyword">let</span> fish = <span class="literal">null</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">catchFish</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 如果鱼存在,则直接返回</span></span><br><span class="line">    <span class="keyword">if</span>(fish) &#123;</span><br><span class="line">      <span class="keyword">return</span> fish</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 如果鱼不存在,则获取鱼再返回</span></span><br><span class="line">      fish = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#cat&#x27;</span>)</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        fish,</span><br><span class="line">        <span class="attr">water</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">let</span> water = <span class="built_in">this</span>.fish.getAttribute(<span class="string">&#x27;weight&#x27;</span>)</span><br><span class="line">          <span class="built_in">this</span>.fish.setAttribute(<span class="string">&#x27;weight&#x27;</span>, ++water)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 每隔3小时喂一次水</span></span><br><span class="line">  <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    catchFish().water()</span><br><span class="line">  &#125;, <span class="number">3</span>*<span class="number">60</span>*<span class="number">60</span>*<span class="number">1000</span>)</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="构造器模式"><a href="#构造器模式" class="headerlink" title="构造器模式"></a>构造器模式</h1>]]></content>
  </entry>
  <entry>
    <title>2020-01-18-plugins</title>
    <url>/2020/01/18/2020-01-18-plugins/</url>
    <content><![CDATA[<p>最近更新hexo比较频繁，发现频繁性的推送master分支以及source源文件备份，比较繁琐，查询了官方文档，可以写一些监听函数，实现一些自动化部署，hexo默认将脚本放置在scripts文件夹下，以下代码可以在hexo new的时候自动打开默认编辑软件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var spawn = require(&#x27;child_process&#x27;).exec;</span><br><span class="line"></span><br><span class="line">hexo.on(&#x27;new&#x27;, function(data)&#123;</span><br><span class="line">  spawn(&#x27;start  &quot;markdown编辑器绝对路径.exe&quot; &#x27; + data.path);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>非常的方便，省去了我打开typora的时间</p>
<p>以及以下的代码可以实现自动部署source分支</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">require(&#x27;shelljs/global&#x27;);//记得安装包</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">	hexo.on(&#x27;deployAfter&#x27;, function() &#123;//当deploy完成后执行备份</span><br><span class="line">		run();</span><br><span class="line">	&#125;);</span><br><span class="line">&#125; catch (e) &#123;</span><br><span class="line">	console.log(&quot;You make a wrong：&quot; + e.toString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function run() &#123;</span><br><span class="line">	if (!which(&#x27;git&#x27;)) &#123;</span><br><span class="line">		echo(&#x27;Sorry, this script requires git&#x27;);</span><br><span class="line">		exit(1);</span><br><span class="line">	&#125; else &#123;</span><br><span class="line">		echo(&quot;======================Auto Backup Begin===========================&quot;);</span><br><span class="line">		cd(&#x27;./&#x27;);</span><br><span class="line">		if (exec(&#x27;git add --all&#x27;).code !== 0) &#123;</span><br><span class="line">			echo(&#x27;Error: Git add failed&#x27;);</span><br><span class="line">			exit(1);</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line">		if (exec(&#x27;git commit -am &quot;Form auto backup script\&#x27;s commit&quot;&#x27;).code !== 0) &#123;</span><br><span class="line">			echo(&#x27;Error: Git commit failed&#x27;);</span><br><span class="line">			exit(1);</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line">		if (exec(&#x27;git push origin source&#x27;).code !== 0) &#123;</span><br><span class="line">			echo(&#x27;Error: Git push failed&#x27;);</span><br><span class="line">			exit(1);</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line">		echo(&quot;==================Auto Backup Complete============================&quot;)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="https://hexo.io/zh-cn/docs/plugins#%E5%B7%A5%E5%85%B7">https://hexo.io/zh-cn/docs/plugins#%E5%B7%A5%E5%85%B7</a></p>
]]></content>
  </entry>
  <entry>
    <title>2020-01-31-RomanToInteger</title>
    <url>/2020/01/31/2020-01-31-RomanToInteger/</url>
    <content><![CDATA[<h1 id="Leetcode13"><a href="#Leetcode13" class="headerlink" title="Leetcode13"></a>Leetcode13</h1><p>Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.</p>
<p>Symbol Value<br>I 1<br>V 5<br>X 10<br>L 50<br>C 100<br>D 500<br>M 1000<br>For example, two is written as II in Roman numeral, just two one’s added together. Twelve is written as, XII, which is simply X + II. The number twenty seven is written as XXVII, which is XX + V + II.</p>
<p>Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:</p>
<p>I can be placed before V (5) and X (10) to make 4 and 9.<br>X can be placed before L (50) and C (100) to make 40 and 90.<br>C can be placed before D (500) and M (1000) to make 400 and 900.<br>Given a roman numeral, convert it to an integer. Input is guaranteed to be within the range from 1 to 3999.</p>
<p>Example 1:</p>
<p>Input: “III”<br>Output: 3<br>Example 2:</p>
<p>Input: “IV”<br>Output: 4<br>Example 3:</p>
<p>Input: “IX”<br>Output: 9<br>Example 4:</p>
<p>Input: “LVIII”<br>Output: 58<br>Explanation: L = 50, V= 5, III = 3.<br>Example 5:</p>
<p>Input: “MCMXCIV”<br>Output: 1994<br>Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.</p>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>题目意思其实很简单，掌握了计算方法其实很简单</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">romanToInt</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> nums[]=<span class="keyword">new</span> <span class="keyword">int</span>[s.length()];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)&#123;</span><br><span class="line">        <span class="keyword">switch</span> (s.charAt(i))&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;M&#x27;</span>:</span><br><span class="line">                nums[i]=<span class="number">1000</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;D&#x27;</span>:</span><br><span class="line">                nums[i]=<span class="number">500</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;C&#x27;</span>:</span><br><span class="line">                nums[i]=<span class="number">100</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;L&#x27;</span>:</span><br><span class="line">                nums[i]=<span class="number">50</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;X&#x27;</span> :</span><br><span class="line">                nums[i]=<span class="number">10</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;V&#x27;</span>:</span><br><span class="line">                nums[i]=<span class="number">5</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;I&#x27;</span>:</span><br><span class="line">                nums[i]=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[i]&lt;nums[i+<span class="number">1</span>])</span><br><span class="line">            sum-=nums[i];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            sum+=nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum+nums[nums.length-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Easy</tag>
      </tags>
  </entry>
  <entry>
    <title>2020-01-31-内网穿透</title>
    <url>/2020/01/31/2020-01-31-%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</url>
    <content><![CDATA[<h1 id="why"><a href="#why" class="headerlink" title="why"></a>why</h1><p>解决公网访问自己的内网设备（大部分公司，小区都是在内网中，IPv4历史原因导致），解决方案：</p>
<ul>
<li>路由器新增端口映射</li>
<li>花生壳动态解析软件</li>
<li>natapp等免费软件提供的内网映射服务</li>
<li>基于ngrok（不荐）或者frp自建内网映射服务</li>
</ul>
<h1 id="how"><a href="#how" class="headerlink" title="how"></a>how</h1><p>目前推荐使用frp搭建穿透服务，支持HTTP，SSH,TCP UDP FTP</p>
<p><img src="..\img\frp.png" alt=""></p>
]]></content>
  </entry>
  <entry>
    <title>2020-02-28-JS相关技术名词</title>
    <url>/2020/02/28/2020-02-28-JS%E7%9B%B8%E5%85%B3%E6%8A%80%E6%9C%AF%E5%90%8D%E8%AF%8D/</url>
    <content><![CDATA[<p>今天中午有收到Egg团队公开的文件调查，提及了很多技术名词，虽然不一定用到，但我也觉得列举出来会方便大家了解和比较，后续可能更新我用过的部分</p>
<h1 id="代码检查工具"><a href="#代码检查工具" class="headerlink" title="代码检查工具"></a>代码检查工具</h1><ul>
<li style="list-style: none"><input type="checkbox" checked></input> ESLint</li>
<li style="list-style: none"><input type="checkbox"></input> JSCS</li>
<li style="list-style: none"><input type="checkbox"></input> JSHint</li>
<li style="list-style: none"><input type="checkbox"></input> JSDoc</li>
<li style="list-style: none"><input type="checkbox"></input> Standard</li>
<li style="list-style: none"><input type="checkbox"></input> TSLint</li>
<li style="list-style: none"><input type="checkbox"></input> Flow</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:left"></th>
<th>引入目的：规范代码</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">ESLint</td>
<td>通过extend继承某一个大类，然后配置rules来进行代码规范</td>
</tr>
<tr>
<td style="text-align:left">JSCS</td>
<td></td>
</tr>
<tr>
<td style="text-align:left">JSHint</td>
<td></td>
</tr>
<tr>
<td style="text-align:left">JSDoc</td>
<td></td>
</tr>
<tr>
<td style="text-align:left">Standard</td>
<td></td>
</tr>
<tr>
<td style="text-align:left">TSLint</td>
<td></td>
</tr>
<tr>
<td style="text-align:left">Flow</td>
</tr>
</tbody>
</table>
<h2 id="使用感受"><a href="#使用感受" class="headerlink" title="使用感受"></a>使用感受</h2><p>解决了以下问题</p>
<ul>
<li>node是一门弱语言，进行校验（非变量类型校验，仅校验变量是否声明，是否可改等）</li>
<li>node在use strict模式下，eslint可以校验</li>
<li>团队合作，防止队友挖坑</li>
</ul>
<p>其实ESLint只是一种语法校验，更多的还有流程上的规范，就像网传阿里的开发规范一样，就好比node中你可以用类的语法糖，也可以用原型，当一件事情有多种实现方式时，需要规范来选择一个普遍公用的，易维护，易扩展的方案</p>
<p>除去语法校验，还有TS的类型校验，比如GIT的分支规范，如master,staging,backup,develop,other branch</p>
<h1 id="转义语言"><a href="#转义语言" class="headerlink" title="转义语言"></a>转义语言</h1><ul>
<li style="list-style: none"><input type="checkbox" checked></input> TS</li>
<li style="list-style: none"><input type="checkbox"></input> ClojureScript</li>
<li style="list-style: none"><input type="checkbox"></input> CoffeeScript</li>
<li style="list-style: none"><input type="checkbox"></input> Dart</li>
<li style="list-style: none"><input type="checkbox"></input> Elm</li>
<li style="list-style: none"><input type="checkbox"></input> Scala.js</li>
<li style="list-style: none"><input type="checkbox"></input> Haxe</li>
<li style="list-style: none"><input type="checkbox"></input> Nim</li>
<li style="list-style: none"><input type="checkbox"></input> PureScript</li>
<li style="list-style: none"><input type="checkbox"></input> Reason</li>
</ul>
<p>转移语言是2019年聊的比较多的，解决问题：</p>
<ul>
<li>类型校验，能够很好解决JS开发中，你不知道这个object里面有什么key，或者某个对象里面有什么方法（egg.js实际开发过程中，ctx.service.v1.handlexxx()就ctrl跳转不了，也不会有提示）</li>
</ul>
<h1 id="WEB框架"><a href="#WEB框架" class="headerlink" title="WEB框架"></a>WEB框架</h1><ul>
<li style="list-style: none"><input type="checkbox" checked></input> Express</li>
<li style="list-style: none"><input type="checkbox" checked></input> Koa</li>
<li style="list-style: none"><input type="checkbox" checked></input> Egg</li>
<li style="list-style: none"><input type="checkbox"></input> Nest.js</li>
<li style="list-style: none"><input type="checkbox"></input> Next.js</li>
<li style="list-style: none"><input type="checkbox"></input> Fastify.js</li>
<li style="list-style: none"><input type="checkbox"></input> Hapi.js</li>
<li style="list-style: none"><input type="checkbox"></input> Restify.js</li>
<li style="list-style: none"><input type="checkbox"></input> Loopback.io</li>
<li style="list-style: none"><input type="checkbox"></input> Sails.js</li>
<li style="list-style: none"><input type="checkbox"></input> Midway.js</li>
</ul>
<p>面试常被问到框架的问题，因为很多公司不会将项目搭建在原生的node服务上</p>
<ul>
<li>缺少约束，合作模式下，个人有个人的风格</li>
<li>项目配置繁琐，很多东西配置零散堆放</li>
<li>重复造轮子，框架提供较好的轮子</li>
<li>安全事宜，框架处理</li>
<li>etc</li>
</ul>
<p>一个好的框架事半功倍，<br><a href="https://expressjs.com/">express</a>是一个非常轻量的框架</p>
<ul>
<li>fast</li>
<li>unopinionated(干净的)</li>
<li>minimalist</li>
</ul>
<p><a href="https://eggjs.org/">Egg</a>是一个企业级框架，约定大于配置</p>
<ul>
<li>Provide capability to <a href="https://eggjs.org/en/advanced/framework.html">customizd framework</a> base on Egg（可扩展）</li>
<li>Highly extensible <a href="https://eggjs.org/en/basics/plugin.html">plugin mechanism</a>（插件牛逼）</li>
<li>Built-in <a href="https://eggjs.org/en/advanced/cluster-client.html">cluster</a>（多进程牛逼）</li>
<li>Based on <a href="http://koajs.com/">Koa</a> with high performance（企业级别性能优异）</li>
<li>Stable core framework with high test coverage（稳定）</li>
<li><a href="https://eggjs.org/en/tutorials/progressive.html">Progressive development</a>（业务迭代，代码可以渐进继承）</li>
</ul>
<h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><ul>
<li style="list-style: none"><input type="checkbox" checked></input> MySQL</li>
<li style="list-style: none"><input type="checkbox" checked></input> PostgreSql</li>
<li style="list-style: none"><input type="checkbox" checked></input> Redis</li>
<li style="list-style: none"><input type="checkbox" checked></input> MongoDB</li>
<li style="list-style: none"><input type="checkbox"></input> SQL Server</li>
<li style="list-style: none"><input type="checkbox"></input> SQLLite</li>
<li style="list-style: none"><input type="checkbox"></input> influxdb</li>
<li style="list-style: none"><input type="checkbox"></input> HBASE</li>
<li style="list-style: none"><input type="checkbox"></input> TiDB</li>
<li style="list-style: none"><input type="checkbox"></input> Oracle</li>
<li style="list-style: none"><input type="checkbox"></input> DB2</li>
</ul>
<p>数据库是仅此于语言本身，另外的考点了，因为没有一个服务不涉猎存储，而数据库作为系统的数据基础，不仅重要也成为了面试的重点</p>
<ul>
<li>mysql等关系型数据库，范式，事务，innodb，读写分离，分表</li>
<li>Mongo,Redis等非关系型数据基础类型，聚合等</li>
</ul>
<h1 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h1><ul>
<li style="list-style: none"><input type="checkbox" checked></input> Nginx</li>
<li style="list-style: none"><input type="checkbox" checked></input> Tomcat</li>
<li><p>[ ] Apache</p>
</li>
<li><p>解决负载均衡</p>
</li>
<li>预处理一些请求，如过滤重复请求</li>
</ul>
<h1 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h1><ul>
<li style="list-style: none"><input type="checkbox" checked></input> Docker</li>
<li style="list-style: none"><input type="checkbox" checked></input> PM2</li>
<li style="list-style: none"><input type="checkbox" checked></input> forever</li>
<li style="list-style: none"><input type="checkbox"></input> naught</li>
<li style="list-style: none"><input type="checkbox"></input> node-supervisor</li>
<li style="list-style: none"><input type="checkbox"></input> Supervisord(Unix)</li>
</ul>
<p>docker集大成者，在微服务等场景应用较多</p>
<h1 id="RPC方式"><a href="#RPC方式" class="headerlink" title="RPC方式"></a>RPC方式</h1><ul>
<li style="list-style: none"><input type="checkbox" checked></input> HTTP</li>
<li style="list-style: none"><input type="checkbox"></input> Thrift</li>
<li style="list-style: none"><input type="checkbox" checked></input> gRPC</li>
<li style="list-style: none"><input type="checkbox"></input> dubbo</li>
<li style="list-style: none"><input type="checkbox" checked></input> MQ</li>
</ul>
<h1 id="开发场景"><a href="#开发场景" class="headerlink" title="开发场景"></a>开发场景</h1><ul>
<li style="list-style: none"><input type="checkbox"></input> 服务端API</li>
<li style="list-style: none"><input type="checkbox"></input> SSR应用</li>
<li style="list-style: none"><input type="checkbox"></input> Proxy层</li>
<li style="list-style: none"><input type="checkbox"></input> BFF层</li>
<li style="list-style: none"><input type="checkbox"></input> 代码片段，如Spark代码片段</li>
<li style="list-style: none"><input type="checkbox"></input> CLI &amp; 工具</li>
</ul>
<h4 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h4><ul>
<li style="list-style: none"><input type="checkbox"></input> </li>
</ul>
]]></content>
      <tags>
        <tag>List</tag>
      </tags>
  </entry>
  <entry>
    <title>2020-02-28-关于今天的一些思考</title>
    <url>/2020/02/28/2020-02-28-%E5%85%B3%E4%BA%8E%E4%BB%8A%E5%A4%A9%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/</url>
    <content><![CDATA[<p>今天确实发生了一些事情，避之不谈</p>
<p>让我想起来了之前我在bili遇到的一件事情，一个up主癌症，自己经济能力不是很好，拍了一些很粗糙，没有剪辑过的视频，大意交代了自己得病，没有钱，拍了病历本，化验单，希望大家有能力的捐一点，后来up大概是拿到了一部分钱，具体多少我不太清楚，后来不知道发生了什么，画风开始转变</p>
<p>up视频的下面出现了很多评论</p>
<p>评论up有两个手机，家里有钱，然后up就对焦给大家看了他的两个手机，我记得两个都是红米类似的便宜机器，而且买了很久了</p>
<p>后来又人评论他家多有钱，然后up就拍下了回家和奶奶在一起的场面（当时已经没钱住院，就回家筹钱换医院试试）</p>
<p>后来又有人评论up主根本就没病，出来骗人钱，up就拍视频给人看治疗过程中的病历，化验单，至少我看不出来造假的证据</p>
<p>后来up出院了，买了张车票回家，和一个月前相比头发掉了很多，弹幕里面各种质疑，评论里面一片质疑，</p>
<p>亲身经历，环顾整个过程，我没有给up捐赠一分钱，也没有给予他任何帮助，就看了他整个生病的过程，从开始的加油，变成了一个‘骗子’，人们存在于网络之后，确实可以发表自己对于一件事情的看法，我想我如果是那个up，深陷其中一定很无奈</p>
<p>陈述结束</p>
<p>最后疫情一定会过去的</p>
]]></content>
  </entry>
  <entry>
    <title>2020-03-05-hexoNexTv7.7.2</title>
    <url>/2020/03/05/2020-03-05-hexoNexTv7-7-2/</url>
    <content><![CDATA[<p>I find hexo’s theme:nexT v7.7.2 has some new features</p>
<h2 id="native-dark-mode"><a href="#native-dark-mode" class="headerlink" title="native dark mode"></a>native dark mode</h2><p>we can set </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">darkmode:true</span><br></pre></td></tr></table></figure>
<p>to open native dark mode</p>
<p>and there are other features like </p>
<ul>
<li><a href="https://docs.mathjax.org/en/latest/upgrading/whats-new-3.0.html">support MathJax v3.0</a>,we use $$</li>
<li>add next_config helper</li>
</ul>
<h1 id="how-to-update-newest-version"><a href="#how-to-update-newest-version" class="headerlink" title="how to update newest version"></a>how to update newest version</h1><p>1.git clone <a href="https://github.com/theme-next/hexo-theme-next">https://github.com/theme-next/hexo-theme-next</a> themes/next</p>
<p>or in releases to download newest source code</p>
<p>2.copy file to hexo/theme/ such as :</p>
<p>/themes/hexo-theme-next-7.7.2/</p>
<p>3.open hexo’s _config.yml,and change theme’s value to hexo-theme-next-7.7.2 and u change your them successfully</p>
<p>4.update /themes/hexo-theme-next-7.7.2/_config.yml</p>
<p>Last , u can create new post to log your daily life</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn upgrade caniuse-lite browserslist</span><br></pre></td></tr></table></figure>
<p>and these days ,zehai.info ,may Expired ,sad </p>
]]></content>
      <categories>
        <category>others</category>
      </categories>
      <tags>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title>BinaryTreeInorderTraversal</title>
    <url>/2020/03/06/2020-03-06-BinaryTreeInorderTraversal/</url>
    <content><![CDATA[<h1 id="Problem94"><a href="#Problem94" class="headerlink" title="Problem94"></a>Problem94</h1><p>Given a binary tree, return the <em>inorder</em> traversal of its nodes’ values.</p>
<blockquote>
<p>给定一二叉树，中序遍历输出</p>
<p>ps:preorder,inorder,postorder，前中后</p>
</blockquote>
<h1 id="Key"><a href="#Key" class="headerlink" title="Key"></a>Key</h1><h2 id="recursive-approach"><a href="#recursive-approach" class="headerlink" title="recursive approach"></a>recursive approach</h2><p>利用递归解决B树的遍历问题，这种问题的代码其实大同小异，前中后的遍历输出，只需要调整递归部分即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//preorder</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preorder</span><span class="params">(node t)</span></span></span><br><span class="line"><span class="function">	<span class="title">if</span> <span class="params">(t != <span class="keyword">null</span>)</span> </span>&#123;</span><br><span class="line">		System.out.print(t.value + <span class="string">&quot; &quot;</span>);</span><br><span class="line">		preorder(t.left);</span><br><span class="line">		preorder(t.right);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//inorder</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inorder</span><span class="params">(node t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (t != <span class="keyword">null</span>) &#123;</span><br><span class="line">		inorder(t.left);</span><br><span class="line">		System.out.print(t.value + <span class="string">&quot; &quot;</span>);</span><br><span class="line">		inorder(t.right);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//postorder</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postorder</span><span class="params">(node t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (t != <span class="keyword">null</span>) &#123;</span><br><span class="line">        postorder(t.left);</span><br><span class="line">        postorder(t.right);</span><br><span class="line">        System.out.print(t.value + <span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//leverorder</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>Solution</p>
<blockquote>
<p>Runtime: 0 ms, faster than 100.00% of Java online submissions for Binary Tree Inorder Traversal.</p>
<p>Memory Usage: 37.9 MB, less than 5.11% of Java online submissions for Binary Tree Inorder Traversal.</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        List &lt; Integer &gt; res = <span class="keyword">new</span> ArrayList &lt; &gt; ();</span><br><span class="line">        inorder(root, res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inorder</span><span class="params">(TreeNode root, List &lt; Integer &gt; res)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root != <span class="keyword">null</span>) &#123;</span><br><span class="line">            inorder(root.left, res);</span><br><span class="line">            res.add(root.val);</span><br><span class="line">            inorder(root.right, res);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Complexity Analysis</p>
<ul>
<li>Time complexity : O(n)<em>O</em>(<em>n</em>). The time complexity is O(n)<em>O</em>(<em>n</em>) because the recursive function is T(n) = 2 \cdot T(n/2)+1<em>T</em>(<em>n</em>)=2⋅<em>T</em>(<em>n</em>/2)+1.</li>
<li>Space complexity : The worst case space required is O(n)<em>O</em>(<em>n</em>), and in the average case it’s O(\log n)<em>O</em>(log<em>n</em>) where n<em>n</em> is number of nodes.</li>
</ul>
<h2 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h2><p>solution还提供了另外一种方法通过stack pop的方式来完成：</p>
<p><a href="https://leetcode.com/problems/binary-tree-inorder-traversal/solution/"><a href="https://leetcode.com/problems/binary-tree-inorder-traversal/solution/">https://leetcode.com/problems/binary-tree-inorder-traversal/solution/</a></a></p>
<h2 id="Morris"><a href="#Morris" class="headerlink" title="Morris"></a>Morris</h2><p>同上</p>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Medium</tag>
      </tags>
  </entry>
  <entry>
    <title>Construct Binary Tree from Preorder and Inorder Traversal</title>
    <url>/2020/03/08/2020-03-08-Construct%20Binary%20Tree%20from%20Preorder%20and%20Inorder%20Traversal/</url>
    <content><![CDATA[<h1 id="Problem105"><a href="#Problem105" class="headerlink" title="Problem105"></a>Problem105</h1><p>Given preorder and inorder traversal of a tree, construct the binary tree.</p>
<p><strong>Note:</strong><br>You may assume that duplicates do not exist in the tree.</p>
<p>For example, given</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">preorder = [3,9,20,15,7]</span><br><span class="line">inorder = [9,3,15,20,7]</span><br></pre></td></tr></table></figure>
<p>Return the following binary tree:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  3</span><br><span class="line"> / \</span><br><span class="line">9  20</span><br><span class="line">  /  \</span><br><span class="line"> 15   7</span><br></pre></td></tr></table></figure>
<h2 id="key"><a href="#key" class="headerlink" title="key"></a>key</h2><p> 题目是一个根据前序中序，生成二叉树的题目</p>
<p>前序遍历有个特点：根节点在前面，root -left-right</p>
<p>则遍历到3作为root，根据中序可以知道左子树是9，右子树是15 20 7</p>
<p>然后遍历9作为root，根据中序得到没有左子树，没有右子树</p>
<p>然后遍历20作为root，依次类推可以得到</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TreeNode root = new TreeNode(rootVal);</span><br><span class="line">root.left = buildTree(pre, preStart+1, preStart+len, in, inStart, rootIndex-1);</span><br><span class="line">root.right = buildTree(pre, preStart+len+1, preEnd, in, rootIndex+1, inEnd);</span><br></pre></td></tr></table></figure>
<p>其中insort比较好理解，确定root后</p>
<p>左子树在inStart, rootIndex-1之间</p>
<p>右子树在rootIndex+1, inEnd之间</p>
<p>对于presort</p>
<p>int len = rootIndex - inStart;获得root的左子树长度（根据中序获取rootIndex）</p>
<p>左子树在preStart+1, preStart+len之间</p>
<p>右子树在preStart+len+1, preEnd之间</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">buildTree</span><span class="params">(<span class="keyword">int</span>[] preorder, <span class="keyword">int</span>[] inorder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> buildTree(preorder, <span class="number">0</span>, preorder.length-<span class="number">1</span>, inorder, <span class="number">0</span>, inorder.length-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">buildTree</span><span class="params">(<span class="keyword">int</span>[] pre, <span class="keyword">int</span> preStart, <span class="keyword">int</span> preEnd, <span class="keyword">int</span>[] in, <span class="keyword">int</span> inStart, <span class="keyword">int</span> inEnd)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(inStart &gt; inEnd || preStart &gt; preEnd)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> rootVal = pre[preStart];</span><br><span class="line">        <span class="keyword">int</span> rootIndex = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = inStart; i &lt;= inEnd; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(in[i] == rootVal)&#123;</span><br><span class="line">                rootIndex = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> len = rootIndex - inStart;</span><br><span class="line">        TreeNode root = <span class="keyword">new</span> TreeNode(rootVal);</span><br><span class="line">        root.left = buildTree(pre, preStart+<span class="number">1</span>, preStart+len, in, inStart, rootIndex-<span class="number">1</span>);</span><br><span class="line">        root.right = buildTree(pre, preStart+len+<span class="number">1</span>, preEnd, in, rootIndex+<span class="number">1</span>, inEnd);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="tip"><a href="#tip" class="headerlink" title="tip"></a>tip</h2><p>参考于百度，在递归条件乱了</p>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Medium</tag>
      </tags>
  </entry>
  <entry>
    <title>AMDvsCMD</title>
    <url>/2020/03/09/2020-03-09-AMDvsCMD/</url>
    <content><![CDATA[<p>AMD:Asynchronous Module Definition (RequireJS)</p>
<p>CMD:<a href="https://github.com/cmdjs/specification/blob/master/draft/module.md">Common Module Definition</a>（SeaJS）</p>
<table>
<thead>
<tr>
<th></th>
<th>AMD</th>
<th>CMD</th>
</tr>
</thead>
<tbody>
<tr>
<td>1.</td>
<td>提前执行</td>
<td>延迟执行（类似饿汉模式）</td>
</tr>
<tr>
<td>2.</td>
<td>依赖前置</td>
<td>依赖就近</td>
</tr>
<tr>
<td>3.</td>
<td>浏览器（加载缓慢，异步load更好）</td>
<td>服务器端</td>
</tr>
<tr>
<td>4.</td>
<td>异步模块定义</td>
<td>通用模块定义</td>
</tr>
</tbody>
</table>
<h1 id="AMD"><a href="#AMD" class="headerlink" title="AMD"></a>AMD</h1><p>待补充，import-export</p>
<h1 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h1><h2 id="define-Function"><a href="#define-Function" class="headerlink" title="define Function"></a>define Function</h2><p>一个文件就是一个模块，在我们的代码外层，会套上一层CMD规范,这也就是为什么我们可以<strong>直接引用require,export,module的原因</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">define(function(require, exports, module) &#123;</span><br><span class="line">  // code</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>单个参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">define(factory)</span><br><span class="line">param--&gt;factory:funtion|Object|String</span><br><span class="line">define(&#123; &quot;foo&quot;: &quot;bar&quot; &#125;);</span><br><span class="line">define(&#x27;I am a template. My name is &#123;&#123;name&#125;&#125;.&#x27;);</span><br></pre></td></tr></table></figure>
<p>多个参数define <code>define(id?, deps?, factory)</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">define(&#x27;hello&#x27;, [&#x27;jquery&#x27;], function(require, exports, module) &#123;</span><br><span class="line">  // code</span><br><span class="line">&#125;);</span><br><span class="line">id：String模块标识</span><br><span class="line">deps：Array模块依赖</span><br></pre></td></tr></table></figure>
<p>define.cmd Object</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (typeof define === &quot;function&quot; &amp;&amp; define.cmd) &#123;</span><br><span class="line">  // 有 Sea.js 等 CMD 模块加载器存在</span><br><span class="line">&#125;</span><br><span class="line">//用来判断当前页面是否有CMD模块加载器</span><br></pre></td></tr></table></figure>
<h2 id="require-Function"><a href="#require-Function" class="headerlink" title="require Function"></a>require Function</h2><p>同步加载</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">define(function(require, exports) &#123;</span><br><span class="line"></span><br><span class="line">  // 获取模块 a 的接口</span><br><span class="line">  var a = require(&#x27;./a&#x27;);</span><br><span class="line"></span><br><span class="line">  // 调用模块 a 的方法</span><br><span class="line">  a.doSomething();</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="require-async-Function"><a href="#require-async-Function" class="headerlink" title="require.async Function"></a>require.async Function</h2><p>异步加载</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">define(function(require, exports, module) &#123;</span><br><span class="line"></span><br><span class="line">  // 异步加载一个模块，在加载完成时，执行回调</span><br><span class="line">  require.async(&#x27;./b&#x27;, function(b) &#123;</span><br><span class="line">    b.doSomething();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  // 异步加载多个模块，在加载完成时，执行回调</span><br><span class="line">  require.async([&#x27;./c&#x27;, &#x27;./d&#x27;], function(c, d) &#123;</span><br><span class="line">    c.doSomething();</span><br><span class="line">    d.doSomething();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="require-resolve"><a href="#require-resolve" class="headerlink" title="require.resolve"></a>require.resolve</h2><p>返回解析后的绝对路径</p>
<h2 id="exprots"><a href="#exprots" class="headerlink" title="exprots"></a>exprots</h2><p>return Object，对外提供接口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">define(function(require, exports) &#123;</span><br><span class="line"></span><br><span class="line">  // 对外提供 foo 属性</span><br><span class="line">  exports.foo = &#x27;bar&#x27;;</span><br><span class="line"></span><br><span class="line">  // 对外提供 doSomething 方法</span><br><span class="line">  exports.doSomething = function() &#123;&#125;;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">retrun可以实现同等效果</span><br><span class="line">define(function(require) &#123;</span><br><span class="line"></span><br><span class="line">  // 通过 return 直接提供接口</span><br><span class="line">  return &#123;</span><br><span class="line">    foo: &#x27;bar&#x27;,</span><br><span class="line">    doSomething: function() &#123;&#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line">以及个人不太喜欢的缩略写法</span><br><span class="line">define(&#123;</span><br><span class="line">  foo: &#x27;bar&#x27;,</span><br><span class="line">  doSomething: function() &#123;&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>但以下写法是错误的</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">define(function(require, exports) &#123;</span><br><span class="line"></span><br><span class="line">  // 错误用法！！!</span><br><span class="line">  exports = &#123;</span><br><span class="line">    foo: &#x27;bar&#x27;,</span><br><span class="line">    doSomething: function() &#123;&#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><code>exports</code> 仅仅是 <code>module.exports</code> 的一个引用。在 <code>factory</code> 内部给 <code>exports</code> 重新赋值时，并不会改变 <code>module.exports</code> 的值。因此给 <code>exports</code> 赋值是无效的，不能用来更改模块接口。</p>
<p>我说句简单的话：exports和module.exports，都是地址，指向同一个内容，如果你给exports赋值了一个新对象，他指向的内容就完全变了，和module.exprots就指向不是同一个地方了</p>
<h2 id="module"><a href="#module" class="headerlink" title="module"></a>module</h2><p>modeule是一个对象，存储与当前模块相关联的一些属性和方法，默认为{}</p>
<p>module:function</p>
<p>module.id:String模块标识</p>
<p>module.url：String返回绝对路径（默认id=url，除非手写id）</p>
<p>module.dependencies:Array模块依赖</p>
<p>module.export:Object 大部分情况下和exports通用，但如果模块是一个类，就应该直接赋值给module.exports，这样调用就是一个类的构造器，可以直接new实例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">module.exports=new Person();</span><br><span class="line">const p = require(./xxx.js);</span><br><span class="line">p.say();</span><br><span class="line">//or</span><br><span class="line">exports.p = new Person();</span><br><span class="line">const &#123;p&#125; = require(./xxxjs);</span><br><span class="line">p.say();</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>other</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2020/03/11/2020-03-11-MaximumDepthOfBinaryTree/</url>
    <content><![CDATA[<h1 id="Prolem-104"><a href="#Prolem-104" class="headerlink" title="Prolem 104"></a>Prolem 104</h1><p>Given a binary tree, find its maximum depth.</p>
<p>The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.</p>
<p><strong>Note:</strong> A leaf is a node with no children.</p>
<p><strong>Example:</strong></p>
<p>Given binary tree <code>[3,9,20,null,null,15,7]</code>,</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  3</span><br><span class="line"> / \</span><br><span class="line">9  20</span><br><span class="line">  /  \</span><br><span class="line"> 15   7</span><br></pre></td></tr></table></figure>
<p>return its depth = 3.</p>
<h2 id="key"><a href="#key" class="headerlink" title="key"></a>key</h2><p>判断树的深浅，采用</p>
<blockquote>
<p>int left = max(root.left);<br><strong>int</strong> right = max(root.right);<br><strong>return</strong> Math.max(left,right) + 1; </p>
</blockquote>
<blockquote>
<p>//或者简写</p>
<p>return Math.max(max(root.left) + 1, max(root.right) + 1);</p>
</blockquote>
<p>进行递归</p>
<blockquote>
<p>Runtime: 0 ms, faster than 100.00% of Java online submissions for Maximum Depth of Binary Tree.</p>
<p>Memory Usage: 39.2 MB, less than 94.62% of Java online submissions for Maximum Depth of Binary Tree.</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> max(root);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">max</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Math.max(max(root.left) + <span class="number">1</span>, max(root.right) + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Easy</tag>
      </tags>
  </entry>
  <entry>
    <title>SymmetricTree</title>
    <url>/2020/03/10/2020-03-10-SymmetricTree/</url>
    <content><![CDATA[<h1 id="Problem101"><a href="#Problem101" class="headerlink" title="Problem101"></a>Problem101</h1><p>Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).</p>
<p>For example, this binary tree <code>[1,2,2,3,4,4,3]</code> is symmetric:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    1</span><br><span class="line">   / \</span><br><span class="line">  2   2</span><br><span class="line"> / \ / \</span><br><span class="line">3  4 4  3</span><br></pre></td></tr></table></figure>
<p>But the following <code>[1,2,2,null,3,null,3]</code> is not:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  1</span><br><span class="line"> / \</span><br><span class="line">2   2</span><br><span class="line"> \   \</span><br><span class="line"> 3    3</span><br></pre></td></tr></table></figure>
<p><strong>Note:</strong><br>Bonus points if you could solve it both recursively and iteratively.</p>
<h2 id="key"><a href="#key" class="headerlink" title="key"></a>key</h2><p>一道验证树是否是对称的问题，主要采取递归的方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Definition for a binary tree node.</span><br><span class="line"> * public class TreeNode &#123;</span><br><span class="line"> *     int val;</span><br><span class="line"> *     TreeNode left;</span><br><span class="line"> *     TreeNode right;</span><br><span class="line"> *     TreeNode(int x) &#123; val = x; &#125;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span><br><span class="line">class Solution &#123;</span><br><span class="line">    public boolean isSymmetric(TreeNode root) &#123;</span><br><span class="line">        return isMirror(root,root);</span><br><span class="line">    &#125;</span><br><span class="line">    public boolean isMirror(TreeNode root,TreeNode self)&#123;</span><br><span class="line">        if(root==null &amp;&amp; self==null)return true;</span><br><span class="line">        if(root==null ||self==null) return false;</span><br><span class="line">        return root.val==self.val &amp;&amp; isMirror(root.left,self.right)&amp;&amp;isMirror(root.right,self.left);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Easy</tag>
      </tags>
  </entry>
  <entry>
    <title>Egg插件到底封装了啥</title>
    <url>/2020/03/13/2020-03-13-Egg%E6%8F%92%E4%BB%B6%E5%88%B0%E5%BA%95%E5%B0%81%E8%A3%85%E4%BA%86%E5%95%A5/</url>
    <content><![CDATA[<p>迫于比较好奇，下载了egg-redis，看看他如何将node直接可以引用的包，封装成为egg的插件<br><img src="../img/1584077589714.png" alt="1584077589714"></p>
<p>核心代码通过</p>
]]></content>
  </entry>
  <entry>
    <title>Traversal</title>
    <url>/2020/03/15/2020-03-15-BinaryTreeLevelOrderTraversal/</url>
    <content><![CDATA[<h1 id="Problem-102-107"><a href="#Problem-102-107" class="headerlink" title="Problem 102 107"></a>Problem 102 107</h1><p>Given a binary tree, return the <em>level order</em> traversal of its nodes’ values. (ie, from left to right, level by level).</p>
<p>For example:<br>Given binary tree <code>[3,9,20,null,null,15,7]</code>,</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  3</span><br><span class="line"> / \</span><br><span class="line">9  20</span><br><span class="line">  /  \</span><br><span class="line"> 15   7</span><br></pre></td></tr></table></figure>
<p>return its level order traversal as:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  [3],</span><br><span class="line">  [9,20],</span><br><span class="line">  [15,7]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>key：</p>
<ul>
<li>层序遍历</li>
<li>递归</li>
</ul>
<p>在Java中可以先定义一个List保存结果,List里面再嵌入ArrayList来记录每一层的数据</p>
<blockquote>
<p>List&lt;List<Integer>&gt; res = new ArrayList&lt;&gt;();</p>
<p>res.add(new ArrayList&lt;&gt;());</p>
</blockquote>
<p>将递归中的root节点追加进入res.get(level)的数组中</p>
<blockquote>
<p>  res.get(level).add(root.val);</p>
</blockquote>
<p>通过递归完成算法</p>
<blockquote>
<p>travelsal(root.left,level+1);<br>travelsal(root.right,level+1);</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; levelOrder(TreeNode root) &#123;</span><br><span class="line">        travelsal(root, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span>  res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">travelsal</span><span class="params">(TreeNode root,<span class="keyword">int</span> level)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(level==res.size())&#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">        &#125;</span><br><span class="line">        res.get(level).add(root.val);</span><br><span class="line">        travelsal(root.left,level+<span class="number">1</span>);</span><br><span class="line">        travelsal(root.right,level+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p>接下来是107，是102的变种，改成了叶节点开始遍历</p>
<p>difficulty：Easy</p>
<p>Given a binary tree, return the <em>bottom-up level order</em> traversal of its nodes’ values. (ie, from left to right, level by level from leaf to root).</p>
<p>For example:<br>Given binary tree <code>[3,9,20,null,null,15,7]</code>,</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  3</span><br><span class="line"> / \</span><br><span class="line">9  20</span><br><span class="line">  /  \</span><br><span class="line"> 15   7</span><br></pre></td></tr></table></figure>
<p>return its bottom-up level order traversal as:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  [15,7],</span><br><span class="line">  [9,20],</span><br><span class="line">  [3]</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="key"><a href="#key" class="headerlink" title="key"></a>key</h1><p>题目本身没有设置太多的难度，我们只需要将<strong>level</strong>实现数组的内层数组的倒序就可以了</p>
<blockquote>
<p> res.get(level).add(root.val);<br> change this code to<br> res.get(res.size()-i-1).add(root.val);</p>
</blockquote>
<p>原本判断新增数组的语句变成在第0个位置新增一个数组</p>
<blockquote>
<p>if(i &gt;= res.size()){<br>    res.add(0,new ArrayList<Integer>());<br>}</p>
</blockquote>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Medium</tag>
      </tags>
  </entry>
  <entry>
    <title>QUIC</title>
    <url>/2020/03/16/2020-03-16-QUIC/</url>
    <content><![CDATA[<h1 id="What"><a href="#What" class="headerlink" title="What"></a>What</h1><p><strong>快速UDP网络连接（Quick UDP Internet Connections，QUIC）</strong></p>
<p>是一种实验性的传输层网络传输协议，由Google开发，在2013年实现。QUIC使用UDP协议，它在两个端点间创建连线，且支持多路复用连线。在设计之初，QUIC希望能够提供等同于SSL/TLS层级的网络安全保护，减少数据传输及创建连线时的延迟时间，双向控制带宽，以避免网络拥塞。Google希望使用这个协议来取代TCP协议，使网页传输速度加快。2018年10月，IETF的HTTP及QUIC工作小组正式将基于QUIC协议的HTTP（HTTP over QUIC）重命名为HTTP/3以为确立下一代规范做准备。</p>
<h1 id="Feature"><a href="#Feature" class="headerlink" title="Feature"></a>Feature</h1><p>compared with HTTP2+TCP+TLS</p>
<ul>
<li>无TCP握手及TLS握手–&gt;快</li>
<li>改进的拥塞控制</li>
<li>避免队头阻塞的多路复用</li>
<li>前向冗余纠错</li>
</ul>
<h1 id="Reason"><a href="#Reason" class="headerlink" title="Reason"></a>Reason</h1><ul>
<li>中间设备僵化（防火墙，NAT等硬件设备固话443，80端口，NAT擦写地址，抛弃不认识的选项字段等旧规则）</li>
<li>依赖操作系统实现导致的协议僵化（依赖底层TCP很难快迭代）</li>
<li>建立连接的握手延迟大（HTTPS/2 use TSL 使得TCP，TLS握手时间较长）</li>
<li>队头阻塞（序号顺序接受，前面丢了后面接受直接丢弃）</li>
</ul>
<h1 id="Why"><a href="#Why" class="headerlink" title="Why"></a>Why</h1><h2 id="RTT"><a href="#RTT" class="headerlink" title="RTT"></a>RTT</h2><p>0RTT (0次Round-Trip Time,0次往返)建连可以说是 QUIC 相比 HTTP2 最大的性能优势。那什么是 0RTT 建连呢？这里面有两层含义。</p>
<ol>
<li>传输层 0RTT 就能建立连接。</li>
<li>加密层 0RTT 就能建立加密连接。</li>
</ol>
<p><img src="../img/v2-b4b3eb89464b192eed0304e5647a2d26_r.jpg" alt="preview"></p>
<blockquote>
<p>一个完整的 TLS 握手需要两次：</p>
<ol>
<li>Client 发送 ClientHello；Server 回复 ServerHello</li>
<li>Client 回复最终确定的 Key，Finished；Server 回复 Finished</li>
<li>握手完毕，Client 发送加密后的 HTTP 请求；Server 回复加密后的 HTTP 响应</li>
</ol>
<p>TLS Session Resumption</p>
<ol>
<li>Client 发送 ClientHello（包含 Session ID）；Server 回复 ServerHello 和 Finished</li>
<li>握手完毕，Client 发送加密后的 HTTP 请求；Server 回复加密后的 HTTP 响应</li>
</ol>
<p>TLS 0RTT</p>
<p>0 RTT 是 TLSv1.3 的可选功能。客户端和服务器第一次建立会话时，会生成一个 PSK（pre-shared key）。服务器会用 ticket key 去加密 PSK，作为 Session Ticket 返回。 客户端再次和服务器建立会话时，会先用 PSK 去加密 HTTP 请求，然后把加密后的内容发给服务器。服务器解密 PSK，然后再用 PSK 去解密 HTTP 请求，并加密 HTTP 响应。</p>
<p> HTTPS 握手已经跟 HTTP 请求合并到一起</p>
<p>​    1.Client 发送 ClientHello（包含 PSK）和加密后的 HTTP 请求；Server 回复 ServerHello 和 Finished 和加密后的 HTTP 响应。</p>
</blockquote>
<h2 id="congestion-control"><a href="#congestion-control" class="headerlink" title="congestion control"></a>congestion control</h2><p>TCP采用了</p>
<ul>
<li>慢启动</li>
<li>拥塞避免</li>
<li>快重传</li>
<li>快恢复</li>
</ul>
<p>QUCI默认支持Cubic，另外支持CubicBytes,Reno,RenoBytes,BBR,PCC</p>
<h2 id="Pluggable"><a href="#Pluggable" class="headerlink" title="Pluggable"></a>Pluggable</h2><p>可插拔，即灵活生效不需要重启或改变底层</p>
<ul>
<li>应用层实现不同的拥塞控制算法，不需要底层支持</li>
<li>单个应用程序的不同连接支持不同的拥塞控制，如BBR，Cubic</li>
<li>应用程序无需变动直接变更拥塞控制，reload生效</li>
</ul>
<p>STGW在配置层面进行了优化，针对不同业务，不同网络芝士，不同RTT，使用不同拥塞控制</p>
<h2 id="单递增的Packet-Number"><a href="#单递增的Packet-Number" class="headerlink" title="单递增的Packet Number"></a>单递增的Packet Number</h2><p>为了保障TCP的可靠性，使用Seq（sequenceNumber 序号）和ack来确认,N丢失，重传N（问题：N如果重传两次，收到一个ACK，不知道是哪个的ACK）</p>
<p>QUIC使用PacketNumber代替seq，并且packetnumber严格递增，也就是说就算 Packet N 丢失了，重传的 Packet N 的 Packet Number 已经不是 N，而是一个比 N 大的值,另外支持Stream offset更好支持多个packet传输</p>
<h2 id="不允许Reneging"><a href="#不允许Reneging" class="headerlink" title="不允许Reneging"></a>不允许Reneging</h2><p>reneging：TCP通信时，如果发送序列中间某个数据包丢失，TCP会通过重传最后确认的包开始的后续包，这样原先已经正确传输的包也可能重复发送，急剧降低了TCP性能。</p>
<p>为改善这种情况，发展出SACK(Selective Acknowledgment, 选择性确认)技术，使TCP只重新发送丢失的包，不用发送后续所有的包，而且提供相应机制使接收方能告诉发送方哪些数据丢失，哪些数据重发了，哪些数据已经提前收到等</p>
<p>QUIC禁止reneging</p>
<h2 id="更多的ack块"><a href="#更多的ack块" class="headerlink" title="更多的ack块"></a>更多的ack块</h2><p>TCP 的 Sack 选项能够告诉发送方已经接收到的连续 Segment 的范围，方便发送方进行选择性重传。</p>
<p>由于 TCP 头部最大只有 60 个字节，标准头部占用了 20 字节，所以 Tcp Option 最大长度只有 40 字节，再加上 Tcp Timestamp option 占用了 10 个字节 [25]，所以留给 Sack 选项的只有 30 个字节。</p>
<p>每一个 Sack Block 的长度是 8 个，加上 Sack Option 头部 2 个字节，也就意味着 Tcp Sack Option 最大只能提供 3 个 Block。</p>
<p>但是 Quic Ack Frame 可以同时提供 256 个 Ack Block，在丢包率比较高的网络下，更多的 Sack Block 可以提升网络的恢复速度，减少重传量。</p>
<h2 id="ack-delay时间"><a href="#ack-delay时间" class="headerlink" title="ack delay时间"></a>ack delay时间</h2><p>收到客户端请求到响应的过程时间成为ack delay,QUIC的RTT需要减掉ack delay（计算我是没看懂。。。）</p>
<h2 id="基于stream和connection级别的流量控制"><a href="#基于stream和connection级别的流量控制" class="headerlink" title="基于stream和connection级别的流量控制"></a>基于stream和connection级别的流量控制</h2><p>作用：</p>
<ul>
<li>stream可以认为是一条HTTP请求</li>
<li>Connection可以类比一条TCP连接，在connection上存在多条stream</li>
</ul>
<p>tcp承载多个http请求</p>
<ol>
<li>window_update告诉对方自己接受的字节数</li>
<li>blockFrame告诉对方由于流量控制被阻塞，无法发送数据</li>
<li>stream可用窗口=最大窗口数-收到的最大偏移数</li>
<li>connection可用窗口=$\sum$streams可用窗口</li>
</ol>
<h2 id="没有队头阻塞的多路复用"><a href="#没有队头阻塞的多路复用" class="headerlink" title="没有队头阻塞的多路复用"></a>没有队头阻塞的多路复用</h2><p>QUIC 的多路复用和 HTTP2 类似。在一条 QUIC 连接上可以并发发送多个 HTTP 请求 (stream)。但是 QUIC 的多路复用相比 HTTP2 有一个很大的优势。</p>
<p>QUIC 一个连接上的多个 stream 之间没有依赖。这样假如 stream2 丢了一个 udp packet，也只会影响 stream2 的处理。不会影响 stream2 之前及之后的 stream 的处理。</p>
<p>这也就在很大程度上缓解甚至消除了队头阻塞的影响。</p>
<p>HTTP2 在一个 TCP 连接上同时发送 4 个 Stream。其中 Stream1 已经正确到达，并被应用层读取。但是 Stream2 的第三个 tcp segment 丢失了，TCP 为了保证数据的可靠性，需要发送端重传第 3 个 segment 才能通知应用层读取接下去的数据，虽然这个时候 Stream3 和 Stream4 的全部数据已经到达了接收端，但都被阻塞住了。</p>
<p>不仅如此，由于 HTTP2 强制使用 TLS，还存在一个 TLS 协议层面的队头阻塞 </p>
<p>Record 是 TLS 协议处理的最小单位，最大不能超过 16K，一些服务器比如 Nginx 默认的大小就是 16K。由于一个 record 必须经过数据一致性校验才能进行加解密，所以一个 16K 的 record，就算丢了一个字节，也会导致已经接收到的 15.99K 数据无法处理，因为它不完整。</p>
<p>那 QUIC 多路复用为什么能避免上述问题呢？</p>
<ol>
<li>QUIC 最基本的传输单元是 Packet，不会超过 MTU 的大小，整个加密和认证过程都是基于 Packet 的，不会跨越多个 Packet。这样就能避免 TLS 协议存在的队头阻塞。</li>
<li>Stream 之间相互独立，比如 Stream2 丢了一个 Pakcet，不会影响 Stream3 和 Stream4。不存在 TCP 队头阻塞。</li>
</ol>
<p>当然，并不是所有的 QUIC 数据都不会受到队头阻塞的影响，比如 QUIC 当前也是使用 Hpack 压缩算法 [10]，由于算法的限制，丢失一个头部数据时，可能遇到队头阻塞。</p>
<p>总体来说，QUIC 在传输大量数据时，比如视频，受到队头阻塞的影响很小。</p>
<h2 id="加密认证的报文"><a href="#加密认证的报文" class="headerlink" title="加密认证的报文"></a>加密认证的报文</h2><p>TCP 协议头部没有经过任何加密和认证，所以在传输过程中很容易被中间网络设备篡改，注入和窃听。比如修改序列号、滑动窗口。这些行为有可能是出于性能优化，也有可能是主动攻击。</p>
<p>但是 QUIC 的 packet 可以说是武装到了牙齿。除了个别报文比如 PUBLIC_RESET 和 CHLO，所有报文头部都是经过认证的，报文 Body 都是经过加密的。</p>
<p>这样只要对 QUIC 报文任何修改，接收端都能够及时发现，有效地降低了安全风险。</p>
<h2 id="连接迁移"><a href="#连接迁移" class="headerlink" title="连接迁移"></a>连接迁移</h2><p>一条 TCP 连接 [17] 是由四元组标识的（源 IP，源端口，目的 IP，目的端口）,当其中任何一个元素发生变化时，这条连接依然维持着，能够保持业务逻辑不中断</p>
<p>比如大家使用手机在 WIFI 和 4G 移动网络切换时，客户端的 IP 肯定会发生变化，需要重新建立和服务端的 TCP 连接。</p>
<p>又比如大家使用公共 NAT 出口时，有些连接竞争时需要重新绑定端口，导致客户端的端口发生变化，同样需要重新建立 TCP 连接。</p>
<p>针对 TCP 的连接变化，MPTCP[5] 其实已经有了解决方案，但是由于 MPTCP 需要操作系统及网络协议栈支持，部署阻力非常大，目前并不适用。</p>
<p>所以从 TCP 连接的角度来讲，这个问题是无解的。</p>
<p>那 QUIC 是如何做到连接迁移呢？很简单，任何一条 QUIC 连接不再以 IP 及端口四元组标识，而是以一个<code>64 位的随机数</code>作为 ID 来标识，这样就算 IP 或者端口发生变化时，只要 ID 不变，这条连接依然维持着，上层业务逻辑感知不到变化，不会中断，也就不需要重连。</p>
<p>由于这个 ID 是客户端随机产生的，并且长度有 64 位，所以冲突概率非常低。</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>此外，QUIC 还能实现前向冗余纠错，在重要的包比如握手消息发生丢失时，能够根据冗余信息还原出握手消息。</p>
<p>QUIC 还能实现证书压缩，减少证书传输量，针对包头进行验证等。</p>
]]></content>
      <categories>
        <category>Introduction</category>
      </categories>
      <tags>
        <tag>QUIC</tag>
      </tags>
  </entry>
  <entry>
    <title>UniqueBinarySearchTrees</title>
    <url>/2020/03/22/2020-03-22-UniqueBinarySearchTrees/</url>
    <content><![CDATA[<h1 id="Problem-96"><a href="#Problem-96" class="headerlink" title="Problem 96"></a>Problem 96</h1><p>Given <em>n</em>, how many structurally unique <strong>BST’s</strong> (binary search trees) that store values 1 … <em>n</em>?</p>
<p><strong>Example:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: 3</span><br><span class="line">Output: 5</span><br><span class="line">Explanation:</span><br><span class="line">Given n = 3, there are a total of 5 unique BST&#x27;s:</span><br><span class="line"></span><br><span class="line">   1         3     3      2      1</span><br><span class="line">    \       /     /      / \      \</span><br><span class="line">     3     2     1      1   3      2</span><br><span class="line">    /     /       \                 \</span><br><span class="line">   2     1         2                 3</span><br></pre></td></tr></table></figure>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>题目其实相对比较简单，给出1~n，给出能够成的BST的数目，题目一开始的想法是用1~n去生成BST，看一下有多少种情况，然后做了很多无用功=.=</p>
<p>越写越不对劲后来查了一下，这道题是有数学规律的</p>
<p>BST有几个特点</p>
<ul>
<li>中序遍历依次增（大于等于）</li>
<li>左右自述也是BST（recursion）</li>
</ul>
<p>所以在i作为根节点时，左子树i-1个节点，右子树n-i个节点</p>
<p>数学的思想在于<strong>唯一二叉树的个数为左子树结点的个数乘以右子树的个数。而根节点可以从1到n 中选择</strong>，所以有</p>
<blockquote>
<p>for(int i=1;i&lt;=n;++i)<br>           sum+=numTrees(i-1)*numTrees(n-i);</p>
</blockquote>
<p>再加上边际控制n&lt;=1–&gt;sum=1</p>
<p>就有了解题的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numTrees</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n&lt;=<span class="number">1</span>)    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">            sum+=numTrees(i-<span class="number">1</span>)*numTrees(n-i);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sum;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Solution-95-Unique-Binary-Search-Trees-II"><a href="#Solution-95-Unique-Binary-Search-Trees-II" class="headerlink" title="Solution 95 Unique Binary Search Trees II"></a>Solution 95 Unique Binary Search Trees II</h2><p>万幸，自己折腾的生成BST的代码没白写</p>
<p>Given an integer <em>n</em>, generate all structurally unique <strong>BST’s</strong> (binary search trees) that store values 1 … <em>n</em>.</p>
<p><strong>Example:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: 3</span><br><span class="line">Output:</span><br><span class="line">[</span><br><span class="line">  [1,null,3,2],</span><br><span class="line">  [3,2,null,1],</span><br><span class="line">  [3,1,null,null,2],</span><br><span class="line">  [2,1,3],</span><br><span class="line">  [1,null,2,null,3]</span><br><span class="line">]</span><br><span class="line">Explanation:</span><br><span class="line">The above output corresponds to the 5 unique BST&#x27;s shown below:</span><br><span class="line"></span><br><span class="line">   1         3     3      2      1</span><br><span class="line">    \       /     /      / \      \</span><br><span class="line">     3     2     1      1   3      2</span><br><span class="line">    /     /       \                 \</span><br><span class="line">   2     1         2                 3</span><br></pre></td></tr></table></figure>
<p>看题目是前序遍历,我们从上向下查找，外面一层大循环遍历根节点</p>
<blockquote>
<p>for(int i=start ;i&lt;=end;i++){}</p>
</blockquote>
<p>确定了i节点后可以通过递归写出根节点i的情况下的左右子树</p>
<blockquote>
<p> List<TreeNode> leftChild = recursion(start, i - 1);</p>
<p>List<TreeNode> rightChild = recursion(i + 1, end);</p>
</blockquote>
<p>然后遍历左右子树的每个元素，两层for循环嵌套</p>
<blockquote>
<p>  for(TreeNode left : leftChild) {<br>                for(TreeNode right : rightChild) {<br>                    TreeNode root = new TreeNode(i);<br>                    root.left = left;<br>                    root.right = right;<br>                    res.add(root);<br>                }<br>            }</p>
</blockquote>
<p>得到最后的res进行返回，以及处理一下start&gt;end的边际条件就完成了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;TreeNode&gt; <span class="title">generateTrees</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">if</span>(n &lt; <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;TreeNode&gt;();</span><br><span class="line">        <span class="keyword">return</span> recursion(<span class="number">1</span>, n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;TreeNode&gt; <span class="title">recursion</span><span class="params">(<span class="keyword">int</span> start,<span class="keyword">int</span> end)</span></span>&#123;</span><br><span class="line">        List&lt;TreeNode&gt; res = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        <span class="keyword">if</span>(start &gt; end) &#123;</span><br><span class="line">            res.add(<span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = start;i&lt;=end;i++)&#123;</span><br><span class="line">            List&lt;TreeNode&gt; leftChild = recursion(start, i - <span class="number">1</span>);</span><br><span class="line">            List&lt;TreeNode&gt; rightChild = recursion(i + <span class="number">1</span>, end);</span><br><span class="line">            <span class="keyword">for</span>(TreeNode left : leftChild) &#123;</span><br><span class="line">                <span class="keyword">for</span>(TreeNode right : rightChild) &#123;</span><br><span class="line">                    TreeNode root = <span class="keyword">new</span> TreeNode(i);</span><br><span class="line">                    root.left = left;</span><br><span class="line">                    root.right = right;</span><br><span class="line">                    res.add(root);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>问题当时卡在   </p>
<p>List<TreeNode> leftChild = recursion(start, i - 1);<br>List<TreeNode> rightChild = recursion(i + 1, end);</p>
<p>当然采用recursion虽然简洁易懂，但两条题目的复杂度都相对较高，是递归的压栈造成的，很多可能相同点的地方可能计算了两遍，导致了两道题目都是打败了5%的solution，当然我们可以通过dp(来自LeetCode)的方式来进行完成</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;TreeNode&gt; <span class="title">generateTrees</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;TreeNode&gt;[][] dp = <span class="keyword">new</span> ArrayList[n][n];</span><br><span class="line">        <span class="keyword">return</span> helper(<span class="number">1</span>, n, dp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;TreeNode&gt; <span class="title">helper</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end, List&lt;TreeNode&gt;[][] dp)</span></span>&#123;</span><br><span class="line">        List&lt;TreeNode&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(start &gt; end)&#123;</span><br><span class="line">            res.add(<span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(dp[start - <span class="number">1</span>][end - <span class="number">1</span>] != <span class="keyword">null</span> &amp;&amp; !dp[start - <span class="number">1</span>][end - <span class="number">1</span>].isEmpty())&#123;</span><br><span class="line">            <span class="keyword">return</span> dp[start - <span class="number">1</span>][end - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = start ; i &lt;= end ; i++) &#123;</span><br><span class="line">            List&lt;TreeNode&gt; left = helper(start, i - <span class="number">1</span>, dp);</span><br><span class="line">            List&lt;TreeNode&gt; right = helper(i + <span class="number">1</span>, end, dp);</span><br><span class="line">            <span class="keyword">for</span>(TreeNode a : left)&#123;</span><br><span class="line">                <span class="keyword">for</span>(TreeNode b : right)&#123;</span><br><span class="line">                    TreeNode node = <span class="keyword">new</span> TreeNode(i);</span><br><span class="line">                    node.left = a;</span><br><span class="line">                    node.right = b;</span><br><span class="line">                    res.add(node);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[start - <span class="number">1</span>][end - <span class="number">1</span>] = res;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Medium</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCodeWeek1</title>
    <url>/2020/04/05/2020-04-05-LeetCodeWeek1/</url>
    <content><![CDATA[<h1 id="Problem-Single-Number"><a href="#Problem-Single-Number" class="headerlink" title="Problem  Single Number"></a>Problem  Single Number</h1><p>好久没有刷题了，刚好遇到LeetCode，30天计划，打算强迫自己完成</p>
<p>Given a <strong>non-empty</strong> array of integers, every element appears <em>twice</em> except for one. Find that single one.</p>
<p><strong>Note:</strong></p>
<p>Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: [2,2,1]</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: [4,1,2,1,2]</span><br><span class="line">Output: 4</span><br></pre></td></tr></table></figure>
<h1 id="Key"><a href="#Key" class="headerlink" title="Key"></a>Key</h1><p>思路</p>
<ul>
<li>第一个思路O(n^2)去做类似于冒泡遍历的办法</li>
<li>借助Array.sort()可以迅速排序，然后O(n)的办法遍历得到结果</li>
<li>（以上是自己的思路，以下为LeetCode代码思考）</li>
<li><a href="## 异或">通过异或操作迅速比较</a></li>
<li>通过 Arrays.stream(nums).reduce(0, (x, y) -&gt; x ^ y)来更快迭代每个元素</li>
</ul>
<h2 id="Array-steam"><a href="#Array-steam" class="headerlink" title="Array.steam()"></a>Array.steam()</h2><p>以下参考<a href="https://blog.csdn.net/a13662080711/article/details/84928181">CSDN</a></p>
<p>Stream 不是集合元素，它不是数据结构并不保存数据，它是有关算法和计算的，它更像一个高级版本的 Iterator。原始版本的 Iterator，用户只能显式地一个一个遍历元素并对其执行某些操作；高级版本的 Stream，用户只要给出需要对其包含的元素执行什么操作，比如 “过滤掉长度大于 10 的字符串”、“获取每个字符串的首字母”等，Stream 会隐式地在内部进行遍历，做出相应的数据转换。</p>
<p>Stream 就如同一个迭代器（Iterator），单向，不可往复，数据只能遍历一次，遍历过一次后即用尽了，就好比流水从面前流过，一去不复返。</p>
<p>而和迭代器又不同的是，Stream 可以并行化操作，迭代器只能命令式地、串行化操作。顾名思义，当使用串行方式去遍历时，每个 item 读完后再读下一个 item。而使用并行去遍历时，数据会被分成多个段，其中每一个都在不同的线程中处理，然后将结果一起输出。Stream 的并行操作依赖于 Java7 中引入的 Fork/Join 框架（JSR166y）来拆分任务和加速处理过程</p>
<p>简单说，对 Stream 的使用就是实现一个 filter-map-reduce 过程，产生一个最终结果，或者导致一个副作用（side effect）。</p>
<p>（以下为个人理解）</p>
<p>相对于Java中的Stream流，Java中也有，比如Array.reduce(),Array.foreach()等，通过回调函数的方式进行，</p>
<h2 id="异或"><a href="#异或" class="headerlink" title="异或"></a>异或</h2><p>|=：两个二进制对应位都为0时，结果等于0，否则结果等于1；</p>
<p>&amp;=：两个二进制的对应位都为1时，结果为1，否则结果等于0；</p>
<p>^=：两个二进制的对应位相同，结果为0，否则结果为1。</p>
<p>对于这道题来说，[2,2,1]</p>
<p>第零次遍历：init res=0,题目要求找出出现一次的数，所以这个数肯定存在</p>
<p>第一次遍历：res=2</p>
<p>第二次遍历：res=0，因为res^=2（即res=res^2）</p>
<p>第三次遍历：res=1结束遍历</p>
<p><strong>综上：常用^= 以及&gt;&gt;位运算符，C级别的性能</strong></p>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><ul>
<li>对于异或方法（0ms）</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> n : nums) &#123;</span><br><span class="line">            result ^= n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>自己的方法就不贴了。。==感觉好蠢==写了半天。</p>
<h1 id="Problem-Move-Zeroes"><a href="#Problem-Move-Zeroes" class="headerlink" title="Problem  Move Zeroes"></a>Problem  Move Zeroes</h1><p>Given an array <code>nums</code>, write a function to move all <code>0</code>‘s to the end of it while maintaining the relative order of the non-zero elements.</p>
<p><strong>Example:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: [0,1,0,3,12]</span><br><span class="line">Output: [1,3,12,0,0]</span><br></pre></td></tr></table></figure>
<p><strong>Note</strong>:</p>
<ol>
<li>You must do this <strong>in-place</strong> without making a copy of the array.</li>
<li>Minimize the total number of operations.</li>
</ol>
<h1 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h1><p>第一版：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">moveZeroes</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;nums.length-<span class="number">1</span>;j++)&#123;</span><br><span class="line">                    nums[j]=nums[j+<span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                nums[nums.length-<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>原本根据题目的意思，想法就是找到一个0，整体往前移动一位，一把梭，但写完发现，<strong>本身没有必要整体前移</strong>，因为我的判断是num[i]是不是为0，所以只需要将0的个数记录下来，非0的元素前移，最后补0就可以了</p>
<p>第二版</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public void moveZeroes(int[] nums) &#123;</span><br><span class="line">         if (nums == null || nums.length == 0) return;        </span><br><span class="line"> </span><br><span class="line">        int insertPos = 0;</span><br><span class="line">        for (int num: nums) &#123;</span><br><span class="line">            if (num != 0) nums[insertPos++] = num;</span><br><span class="line">        &#125;        </span><br><span class="line"></span><br><span class="line">        while (insertPos &lt; nums.length) &#123;</span><br><span class="line">            nums[insertPos++] = 0;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Problem-Best-Time-to-Buy-and-Sell-Stock-II"><a href="#Problem-Best-Time-to-Buy-and-Sell-Stock-II" class="headerlink" title="Problem Best Time to Buy and Sell Stock II"></a>Problem Best Time to Buy and Sell Stock II</h1><p>Say you have an array for which the ith element is the price of a given stock on day i.</p>
<p>Design an algorithm to find the maximum profit. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times).</p>
<p>Note: You may not engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again).</p>
<p>Example 1:</p>
<p>Input: [7,1,5,3,6,4]<br>Output: 7<br>Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.<br>             Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.<br>Example 2:</p>
<p>Input: [1,2,3,4,5]<br>Output: 4<br>Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.<br>             Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are<br>             engaging multiple transactions at the same time. You must sell before buying again.<br>Example 3:</p>
<p>Input: [7,6,4,3,1]<br>Output: 0<br>Explanation: In this case, no transaction is done, i.e. max profit = 0.</p>
<h1 id="key"><a href="#key" class="headerlink" title="key"></a>key</h1><p>题目获取最大利润，本以为是通过动态规划DP来做，但是仔细一想，差值就能解决问题<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int maxProfit(int[] prices) &#123;</span><br><span class="line">        int res = 0;</span><br><span class="line">        for (int i = 0; i &lt; prices.length - 1; ++i) &#123;</span><br><span class="line">            if (prices[i] &lt; prices[i + 1]) &#123;</span><br><span class="line">                res += prices[i + 1] - prices[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="Problem-happy-Number"><a href="#Problem-happy-Number" class="headerlink" title="Problem happy Number"></a>Problem happy Number</h1><p>Write an algorithm to determine if a number is “happy”.</p>
<p>A happy number is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy numbers.</p>
<p><strong>Example:</strong> </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: 19</span><br><span class="line">Output: true</span><br><span class="line">Explanation: </span><br><span class="line">12 + 92 = 82</span><br><span class="line">82 + 22 = 68</span><br><span class="line">62 + 82 = 100</span><br><span class="line">12 + 02 + 02 = 1</span><br></pre></td></tr></table></figure>
<h1 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h1><p>第一版</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public boolean isHappy(int n) &#123;</span><br><span class="line">         int sum =0;</span><br><span class="line">        while (sum != 1) &#123;</span><br><span class="line">            if(sum!=0)&#123;</span><br><span class="line">                n=sum;sum=0;</span><br><span class="line">            &#125;</span><br><span class="line">            while (n &gt; 0) &#123;</span><br><span class="line">                int t = n % 10;</span><br><span class="line">                sum += t * t;</span><br><span class="line">                n /= 10;</span><br><span class="line">            &#125;</span><br><span class="line">            if(sum==0)return false;</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其实写完这个框架我就想起来了，可能在计算上存在死循环，就比如</p>
<p><img src="../img/aHR0cHM6Ly9waWMubGVldGNvZGUtY24uY29tL0ZpZ3VyZXMvMjAyL2ltYWdlMi5wbmc.jfif" alt="在这里插入图片描述"></p>
<p>如果这样的题目就进入了死循环，所以干脆直接通过hashset的方式进行过滤</p>
<p>添加了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(set.contains(sum))&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    set.add(sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>整体代码如下：</p>
<p>Runtime: 5 ms, faster than 9.41% of Java online submissions for Happy Number.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isHappy</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    Set&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    <span class="keyword">int</span> sum =<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (sum != <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(sum!=<span class="number">0</span>)&#123;</span><br><span class="line">            n=sum;sum=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> t = n % <span class="number">10</span>;</span><br><span class="line">            sum += t * t;</span><br><span class="line">            n /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(sum==<span class="number">0</span>)<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(set.contains(sum))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            set.add(sum);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Easy</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCodeWeek2</title>
    <url>/2020/04/08/2020-04-08-LeetCodeWeek2/</url>
    <content><![CDATA[<h1 id="Prolem876-Submission-Detail"><a href="#Prolem876-Submission-Detail" class="headerlink" title="Prolem876-Submission Detail"></a>Prolem876-Submission Detail</h1><p>Given a non-empty, singly linked list with head node <code>head</code>, return a middle node of linked list.</p>
<p>If there are two middle nodes, return the second middle node.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: [1,2,3,4,5]</span><br><span class="line">Output: Node 3 from this list (Serialization: [3,4,5])</span><br><span class="line">The returned node has value 3.  (The judge&#x27;s serialization of this node is [3,4,5]).</span><br><span class="line">Note that we returned a ListNode object ans, such that:</span><br><span class="line">ans.val = 3, ans.next.val = 4, ans.next.next.val = 5, and ans.next.next.next = NULL.</span><br></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: [1,2,3,4,5,6]</span><br><span class="line">Output: Node 4 from this list (Serialization: [4,5,6])</span><br><span class="line">Since the list has two middle nodes with values 3 and 4, we return the second one.</span><br></pre></td></tr></table></figure>
<p><strong>Note:</strong></p>
<ul>
<li>The number of nodes in the given list will be between <code>1</code> and <code>100</code>.</li>
</ul>
<h2 id="key"><a href="#key" class="headerlink" title="key"></a>key</h2><p>题目输出单向链表的中间元素，有这么几个思路</p>
<ul>
<li>O(N)–&gt;遍历放数组，1/2输出<code>return A[t / 2]</code></li>
<li>O(N)–&gt;根据中间特点，mid前进一格，end前进两格</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>第一次提交:0ms</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">middleNode</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        ListNode mid = head;</span><br><span class="line">        ListNode end = head;</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(end.next!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            mid = head.next;</span><br><span class="line">            ListNode tmp = mid;</span><br><span class="line">            i++;</span><br><span class="line">            <span class="keyword">int</span> j=i;</span><br><span class="line">            <span class="keyword">while</span>(j&gt;<span class="number">0</span>)&#123;<span class="comment">//搞复杂了</span></span><br><span class="line">                <span class="keyword">if</span>(tmp.next==<span class="keyword">null</span>)<span class="keyword">return</span> mid;</span><br><span class="line">                end = tmp.next;</span><br><span class="line">                tmp=tmp.next;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            head=head.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mid;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第二次参考其他代码-提交：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public ListNode middleNode(ListNode head) &#123;</span><br><span class="line">        ListNode mid = head, end = head;</span><br><span class="line">        while (mid != null &amp;&amp; end.next != null) &#123;</span><br><span class="line">            mid = mid.next;</span><br><span class="line">            end = end.next.next;</span><br><span class="line">        &#125;</span><br><span class="line">        return mid;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Easy</tag>
      </tags>
  </entry>
  <entry>
    <title>node整理</title>
    <url>/2020/04/10/2020-04-10-eventloop/</url>
    <content><![CDATA[<h1 id="What"><a href="#What" class="headerlink" title="What"></a>What</h1><p>eventloop使得单线程机制的node实现非阻塞I/O的机制，将任务通过libuv分发给线程池后，交由系统内核完成（多线程），完成后内核通知nodejs，将回调放入<code>poll</code>队列执行</p>
<p>启动nodejs时，eventloop初始化，进程会输入很多script，包括：</p>
<ul>
<li>async API calls</li>
<li>定时器</li>
<li>process.nextTick()</li>
</ul>
<p><img src="../img/phaseOfEventloop-1586590365657.png" alt=""></p>
<p>eventloop有六个队列</p>
<ul>
<li>timers</li>
<li>pending callbacks</li>
<li>idle,prepare</li>
<li>poll(connections,data,etc)</li>
<li>check</li>
<li>close callbacks</li>
</ul>
<p>这些队列被称作phase,每个phase都是一个可以放callback的FIFO队列，当进入一个phase时，队列将执行完phase中的callback或者执行最大数目的callback后将进入另一个phase</p>
<ul>
<li>timers：执行定时器，包括setTimeout，setInerval</li>
<li>pending callbacks 执行延迟到下一个循环的I/O callback</li>
<li>idle，prepare 处理系统内部</li>
<li>poll：检查新的I/O事件，执行I/O回调,node会适当的在此阻塞</li>
<li>check:setImmediate()</li>
<li>close：关闭回调函数，如：socket.on(‘close’,foo())</li>
</ul>
<h1 id="Detail"><a href="#Detail" class="headerlink" title="Detail"></a>Detail</h1><h2 id="Timers"><a href="#Timers" class="headerlink" title="Timers"></a>Timers</h2><p>设定延迟后，timers会在规定的时间执行，但存在情况延迟，如<code>poll</code> phase执行回调，超过了timer设定的时间。因为poll必须完成一个任务后才可以检查最近的定时器，没到时间就执行下一个callback，执行callback期间无法中断</p>
<blockquote>
<p>可以得出结论：<code>poll</code>控制着定时器何时执行</p>
</blockquote>
<p>另外为了防止poll phase 变成恶汉，libuv 制定了一个依赖于系统的硬性最大值，来停止轮询获取更多事件</p>
<h2 id="pending-callbacks"><a href="#pending-callbacks" class="headerlink" title="pending callbacks"></a>pending callbacks</h2><p>该队列在系统错误时执行回调（如TCP err），如TCP socket尝试重连收到了<code>ECONNREFUSED</code>，系统需要这些错误报告，那这个错误报告回调就会放在pending callbacks中等待被执行</p>
<h2 id="poll"><a href="#poll" class="headerlink" title="poll"></a>poll</h2><p>最重要的阶段，poll主要包含两个功能：</p>
<ol>
<li><p>计算阻塞和轮询的IO时间</p>
</li>
<li><p>执行poll 队列里的events</p>
</li>
</ol>
<p>当eventloop进入<code>poll</code>阶段，并没有timers的时候</p>
<ul>
<li><code>poll</code>不为空，顺序同步执行任务，直到为空或达到处理数量上限</li>
<li><code>poll</code>为空：如果有setImmediate()，则进入<code>check phase</code>，反之就在<code>poll</code>等客人</li>
</ul>
<p>一但<code>poll</code>为空，eventlopp将会检查计时器是否有快到的，如果有需要执行的，eventloop将要进入<code>timers</code>阶段来顺序执行timer callback</p>
<h2 id="check"><a href="#check" class="headerlink" title="check"></a>check</h2><p>这个phase可以在<code>poll</code>执行完成时开始执行setImmediate()回调。他其实是特殊的定时器队列，<strong>使用libuv API在poll完成的阶段执行</strong>（这也是他存在的原因）。</p>
<h2 id="close-callbacks"><a href="#close-callbacks" class="headerlink" title="close callbacks"></a>close callbacks</h2><p>socket.desroy()等执行关闭event时候会进入该phase，否则会被process.nextTick()触发</p>
<h1 id="setImmedate-vs-setTimeout"><a href="#setImmedate-vs-setTimeout" class="headerlink" title="setImmedate() vs setTimeout()"></a>setImmedate() vs setTimeout()</h1><p>相似却又不同</p>
<ul>
<li>setImmediate()是poll执行完成后执行的script</li>
<li>setTimeout()是定时执行的</li>
</ul>
<p>执行哪个收到上下文的约束，如果两个都被主模块调用，那么进程性能将会收到约束（影响其他app运行）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">without IO</span><br><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">  console.log(&#x27;timeout&#x27;);</span><br><span class="line">&#125;, 0);</span><br><span class="line"></span><br><span class="line">setImmediate(() =&gt; &#123;</span><br><span class="line">  console.log(&#x27;immediate&#x27;);</span><br><span class="line">&#125;);</span><br><span class="line">//</span><br><span class="line">$ node timeout_vs_immediate.js</span><br><span class="line">timeout</span><br><span class="line">immediate</span><br><span class="line"></span><br><span class="line">$ node timeout_vs_immediate.js</span><br><span class="line">immediate</span><br><span class="line">timeout</span><br><span class="line"></span><br><span class="line">with IO</span><br><span class="line">// timeout_vs_immediate.js</span><br><span class="line">const fs = require(&#x27;fs&#x27;);</span><br><span class="line"></span><br><span class="line">fs.readFile(__filename, () =&gt; &#123;</span><br><span class="line">  setTimeout(() =&gt; &#123;</span><br><span class="line">    console.log(&#x27;timeout&#x27;);</span><br><span class="line">  &#125;, 0);</span><br><span class="line">  setImmediate(() =&gt; &#123;</span><br><span class="line">    console.log(&#x27;immediate&#x27;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">//</span><br><span class="line">immediate</span><br><span class="line">timeout</span><br></pre></td></tr></table></figure>
<p>setImmediate()好处在于，如果有IO时会比setTimeout先执行</p>
<h2 id="process-nextTick"><a href="#process-nextTick" class="headerlink" title="process.nextTick()"></a>process.nextTick()</h2><p>它是个异步API，并没有出现在六个phase中，他并不属于eventloop的一部分，当操作完成后处理nextTickQueue而不管eventloop执行到哪个阶段，这个异步API依赖于C/C++处理 JavaScript</p>
<p>他的callbakcs会立即执行，<strong>直到执行完</strong>，eventloop才会正常工作（如果nextTick递归调用则会死循环）</p>
<p>为什么会出现这种设计？</p>
<p>出于所有<strong>接口都应该异步</strong>的设计思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function apiCall(arg, callback) &#123;</span><br><span class="line">  if (typeof arg !== &#x27;string&#x27;)</span><br><span class="line">    return process.nextTick(callback,</span><br><span class="line">                            new TypeError(&#x27;argument should be string&#x27;));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>代码段会校验参数，如果不正确，它将会把错误传递给回调。该API最近更新，允许传任何参给process.nextTick(),所以你不需要嵌套。仅在剩余代码执行之后我们会把错误反馈给用户，通过nextTick，我们保证<code>apiCal()</code>始终在用户胜于代码之后及eventloop继续之前，执行。为了达到这个目标，JS栈内存允许展开并且立即执行提供的callback，似的nextTick递归不会有报错。</p>
<h3 id="process-nextTick-vs-setImmediate"><a href="#process-nextTick-vs-setImmediate" class="headerlink" title="process.nextTick() vs setImmediate()"></a>process.nextTick() vs setImmediate()</h3><ul>
<li>process.nextTick()立刻执行</li>
<li>setImmediate()下次tick执行</li>
</ul>
<p>为什么需要process.nextTick()</p>
<ul>
<li>允许用户处理errors，清理不需要的资源，事件循环前 尝试重新连接</li>
<li>有时有必要在eventloop继续之前，在call stack unwound之后，让callback执行</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const server = net.createServer();</span><br><span class="line">server.on(&#x27;connection&#x27;, (conn) =&gt; &#123; &#125;);</span><br><span class="line"></span><br><span class="line">server.listen(8080);</span><br><span class="line">server.on(&#x27;listening&#x27;, () =&gt; &#123; &#125;);</span><br></pre></td></tr></table></figure>
<p>listen()的callback调用的是setImmiate()，除非传递Hostname，否则立即绑定端口。为了保证eventloop继续，他必须进入<code>poll</code> phase，这意味着，存在可能已经收到了连接，从而允许在侦听事件之前触发连接事件</p>
]]></content>
      <categories>
        <category>Node</category>
      </categories>
      <tags>
        <tag>整理</tag>
      </tags>
  </entry>
  <entry>
    <title>同一宿主机下docker互相访问</title>
    <url>/2020/04/16/2020-04-16-%E5%90%8C%E4%B8%80%E5%AE%BF%E4%B8%BB%E6%9C%BA%E4%B8%8Bdocker%E4%BA%92%E7%9B%B8%E8%AE%BF%E9%97%AE/</url>
    <content><![CDATA[<h1 id="what"><a href="#what" class="headerlink" title="what"></a>what</h1><p>该文档解决：docker下，altermanager收不到prometheus消息</p>
<p>事因，我在一个宿主机下建立了多个docker容器</p>
<ul>
<li>node-exporter</li>
<li>prometheus</li>
<li>grafana</li>
<li>alertmanager</li>
<li>timonwong/prometheus-webhook-dingtalk</li>
</ul>
<p>这些服务之间会有一些互相访问，如prometheus可以发送数据给alertmanager来发送报警信息，alertmanager通过规则处理可以发送邮件，发送钉钉等方式告知用户，问题就出在prometheus的yml配置文档中：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">alerting:</span><br><span class="line">  alertmanagers:</span><br><span class="line">    - static_configs:</span><br><span class="line">        - targets: [&#x27;localhost:9002&#x27;]  </span><br><span class="line">        </span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##############</span></span></span><br><span class="line">修改后：</span><br><span class="line">alerting:</span><br><span class="line">  alertmanagers:</span><br><span class="line">    - static_configs:</span><br><span class="line">        - targets: [&#x27;10.10.10.10:9002&#x27;]  </span><br></pre></td></tr></table></figure>
<p>问题出在了prometheus的配置中访问了localhost端口，但这个并不是访问宿主机的9002的端口，而是访问的是<code>docker内部的9002</code>端口</p>
<p>找到问题后，使用了宿主机ip+port的方式进行访问</p>
<h1 id="how"><a href="#how" class="headerlink" title="how"></a>how</h1><p>查询了资料后，发现解决该问题的方法有：</p>
<ul>
<li>宿主ip：port访问</li>
<li>容器ip访问</li>
<li>link建立通信网络(单向，不推荐)–link xxx</li>
<li>user-defined networks（docker dns server/bridge）</li>
</ul>
<p>前两种不太推荐，因为如果容器ip更改或者宿主机ip更改就需要更新配置文档，第三种方法不太推荐，run 时候link只是单向的建立连接，第四种<a href="https://docs.docker.com/engine/reference/commandline/network_create/">docker network create</a>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//创建网络</span><br><span class="line">docker network create -d bridge my-bridge-network</span><br><span class="line">//run时候加入网络</span><br><span class="line">docker run -it --network test-network --network-alias mysql  -e MYSQL_ROOT_PASSWORD=123 mysql:5.7</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Question</category>
      </categories>
      <tags>
        <tag>整理</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCodeWeek2</title>
    <url>/2020/04/19/2020-04-19-LeetCodeWeek1/</url>
    <content><![CDATA[<h1 id="Problem-Product-of-Array-Except-Self"><a href="#Problem-Product-of-Array-Except-Self" class="headerlink" title="Problem Product of Array Except Self"></a>Problem Product of Array Except Self</h1><p>Given an array <code>nums</code> of <em>n</em> integers where <em>n</em> &gt; 1,  return an array <code>output</code> such that <code>output[i]</code> is equal to the product of all the elements of <code>nums</code> except <code>nums[i]</code>.</p>
<p><strong>Example:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input:  [1,2,3,4]</span><br><span class="line">Output: [24,12,8,6]</span><br></pre></td></tr></table></figure>
<p><strong>Constraint:</strong> It’s guaranteed that the product of the elements of any prefix or suffix of the array (including the whole array) fits in a 32 bit integer.</p>
<p><strong>Note:</strong> Please solve it <strong>without division</strong> and in O(<em>n</em>).</p>
<p><strong>Follow up:</strong><br>Could you solve it with constant space complexity? (The output array <strong>does not</strong> count as extra space for the purpose of space complexity analysis.)</p>
<h2 id="key"><a href="#key" class="headerlink" title="key"></a>key</h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//3ms</span><br><span class="line">class Solution &#123;</span><br><span class="line">    public int[] productExceptSelf(int[] nums) &#123;</span><br><span class="line">        int sum =1;</span><br><span class="line">        int hasZero =0;</span><br><span class="line">        for(int num :nums)&#123;</span><br><span class="line">            if(num!=0)&#123;</span><br><span class="line">                sum*=num;</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                hasZero++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        for(int i=0;i&lt;nums.length;i++)&#123;</span><br><span class="line">            if(hasZero&gt;=2)&#123;</span><br><span class="line">                nums[i]=0;</span><br><span class="line">            &#125;else if(hasZero==1)&#123;</span><br><span class="line">                if(nums[i]==0)&#123;</span><br><span class="line">                    nums[i]=sum;</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    nums[i]=0;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                nums[i]=sum/nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return nums;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//1ms</span><br><span class="line">class Solution &#123;</span><br><span class="line">    public int[] productExceptSelf(int[] nums) &#123;</span><br><span class="line">        int n = nums.length;</span><br><span class="line">        int[] left = new int[n];</span><br><span class="line">        left[0] = 1;</span><br><span class="line">        for (int i = 1; i &lt; n; i++) &#123;</span><br><span class="line">            left[i] = left[i-1] * nums[i-1];</span><br><span class="line">        &#125;</span><br><span class="line">        int product = 1;</span><br><span class="line">        for (int i = n - 1; i &gt;= 0; i--) &#123;</span><br><span class="line">            left[i] *= product;</span><br><span class="line">            product *= nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        return left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Problem-678Valid-Parenthesis-String"><a href="#Problem-678Valid-Parenthesis-String" class="headerlink" title="Problem-678Valid Parenthesis String"></a>Problem-678Valid Parenthesis String</h1><p><strong>Medium</strong></p>
<p>Given a string containing only three types of characters: ‘(‘, ‘)’ and ‘*’, write a function to check whether this string is valid. We define the validity of a string by these rules:</p>
<ol>
<li>Any left parenthesis <code>&#39;(&#39;</code> must have a corresponding right parenthesis <code>&#39;)&#39;</code>.</li>
<li>Any right parenthesis <code>&#39;)&#39;</code> must have a corresponding left parenthesis <code>&#39;(&#39;</code>.</li>
<li>Left parenthesis <code>&#39;(&#39;</code> must go before the corresponding right parenthesis <code>&#39;)&#39;</code>.</li>
<li><code>&#39;*&#39;</code> could be treated as a single right parenthesis <code>&#39;)&#39;</code> or a single left parenthesis <code>&#39;(&#39;</code> or an empty string.</li>
<li>An empty string is also valid.</li>
</ol>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: &quot;()&quot;</span><br><span class="line">Output: True</span><br></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: &quot;(*)&quot;</span><br><span class="line">Output: True</span><br></pre></td></tr></table></figure>
<p><strong>Example 3:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: &quot;(*))&quot;</span><br><span class="line">Output: True</span><br></pre></td></tr></table></figure>
<p><strong>Note:</strong></p>
<ol>
<li>The string size will be in the range [1, 100].</li>
</ol>
<h2 id="key-1"><a href="#key-1" class="headerlink" title="key"></a>key</h2><h2 id="solution-1"><a href="#solution-1" class="headerlink" title="solution"></a>solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkValidString</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s.length() == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;<span class="keyword">int</span> star=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">char</span>[] c = s.toCharArray();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> i : c) &#123;</span><br><span class="line">            <span class="keyword">switch</span> (i) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;(&#x27;</span>:</span><br><span class="line">                    left++;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;)&#x27;</span>:</span><br><span class="line">                    left--;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">                    star++;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (left == <span class="number">0</span> || left - star == <span class="number">0</span> || left + star == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Brute-Force"><a href="#Brute-Force" class="headerlink" title="Brute Force"></a>Brute Force</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> ans = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkValidString</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        solve(<span class="keyword">new</span> StringBuilder(s), <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">(StringBuilder sb, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (i == sb.length()) &#123;</span><br><span class="line">            ans |= valid(sb);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sb.charAt(i) == <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">char</span> c: <span class="string">&quot;() &quot;</span>.toCharArray()) &#123;</span><br><span class="line">                sb.setCharAt(i, c);</span><br><span class="line">                solve(sb, i+<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span> (ans) <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            sb.setCharAt(i, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span></span><br><span class="line">            solve(sb, i + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">valid</span><span class="params">(StringBuilder sb)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> bal = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sb.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> c = sb.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">&#x27;(&#x27;</span>) bal++;</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">&#x27;)&#x27;</span>) bal--;</span><br><span class="line">            <span class="keyword">if</span> (bal &lt; <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bal == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Dynamic-Programming"><a href="#Dynamic-Programming" class="headerlink" title="Dynamic Programming"></a>Dynamic Programming</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkValidString</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = s.length();</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">boolean</span>[][] dp = <span class="keyword">new</span> <span class="keyword">boolean</span>[n][n];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s.charAt(i) == <span class="string">&#x27;*&#x27;</span>) dp[i][i] = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; n-<span class="number">1</span> &amp;&amp;</span><br><span class="line">                    (s.charAt(i) == <span class="string">&#x27;(&#x27;</span> || s.charAt(i) == <span class="string">&#x27;*&#x27;</span>) &amp;&amp;</span><br><span class="line">                    (s.charAt(i+<span class="number">1</span>) == <span class="string">&#x27;)&#x27;</span> || s.charAt(i+<span class="number">1</span>) == <span class="string">&#x27;*&#x27;</span>)) &#123;</span><br><span class="line">                dp[i][i+<span class="number">1</span>] = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> size = <span class="number">2</span>; size &lt; n; size++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i + size &lt; n; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (s.charAt(i) == <span class="string">&#x27;*&#x27;</span> &amp;&amp; dp[i+<span class="number">1</span>][i+size] == <span class="keyword">true</span>) &#123;</span><br><span class="line">                    dp[i][i+size] = <span class="keyword">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s.charAt(i) == <span class="string">&#x27;(&#x27;</span> || s.charAt(i) == <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> k = i+<span class="number">1</span>; k &lt;= i+size; k++) &#123;</span><br><span class="line">                        <span class="keyword">if</span> ((s.charAt(k) == <span class="string">&#x27;)&#x27;</span> || s.charAt(k) == <span class="string">&#x27;*&#x27;</span>) &amp;&amp;</span><br><span class="line">                                (k == i+<span class="number">1</span> || dp[i+<span class="number">1</span>][k-<span class="number">1</span>]) &amp;&amp;</span><br><span class="line">                                (k == i+size || dp[k+<span class="number">1</span>][i+size])) &#123;</span><br><span class="line">                            dp[i][i+size] = <span class="keyword">true</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">0</span>][n-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Greedy"><a href="#Greedy" class="headerlink" title="Greedy"></a>Greedy</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkValidString</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> lo = <span class="number">0</span>, hi = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">char</span> c: s.toCharArray()) &#123;</span><br><span class="line">           lo += c == <span class="string">&#x27;(&#x27;</span> ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">           hi += c != <span class="string">&#x27;)&#x27;</span> ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">           <span class="keyword">if</span> (hi &lt; <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">           lo = Math.max(lo, <span class="number">0</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> lo == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Easy</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.JSv14</title>
    <url>/2020/04/22/2020-04-22-Node14/</url>
    <content><![CDATA[<h1 id="new"><a href="#new" class="headerlink" title="new"></a>new</h1><p>mod<br>今天看到Node Current更新了14的版本，看看都有些什么东西</p>
<p>前置了解了一下doc中提到的semver，是一个语义化版本semantic versioning，实现版本和版本规范的解析，计算，比较，用以解决在大型项目中对依赖的版本失去控制的问题，Node.js 的包管理工具 npm 也完全基于 Semantic Versioning 来管理依赖的版本。</p>
<p>参考资料：<a href="https://zhuanlan.zhihu.com/p/20747196">semver：语义化版本规范在 Node.js 中的实现</a></p>
<h2 id="deprecations"><a href="#deprecations" class="headerlink" title="deprecations"></a>deprecations</h2><p>sermver弃用一部分功能</p>
<ul>
<li><strong>(SEMVER-MAJOR)</strong> <strong>crypto</strong>: move pbkdf2 without digest to EOL (James M Snell) </li>
<li><strong>(SEMVER-MAJOR)</strong> <strong>fs</strong>: deprecate closing FileHandle on garbage collection (James M Snell)</li>
<li><strong>(SEMVER-MAJOR)</strong> <strong>http</strong>: move OutboundMessage.prototype.flush to EOL (James M Snell)</li>
<li><strong>(SEMVER-MAJOR)</strong> <strong>lib</strong>: move GLOBAL and root aliases to EOL (James M Snell)</li>
<li><strong>(SEMVER-MAJOR)</strong> <strong>os</strong>: move tmpDir() to EOL (James M Snell) </li>
<li><strong>(SEMVER-MAJOR)</strong> <strong>src</strong>: remove deprecated wasm type check (Clemens Backes) </li>
<li><strong>(SEMVER-MAJOR)</strong> <strong>stream</strong>: move _writableState.buffer to EOL (James M Snell)</li>
<li><strong>(SEMVER-MINOR)</strong> <strong>doc</strong>: deprecate process.mainModule (Antoine du HAMEL)</li>
<li><strong>(SEMVER-MINOR)</strong> <strong>doc</strong>: deprecate process.umask() with no arguments (Colin Ihrig) </li>
</ul>
<h2 id="ECMAScript-Modules"><a href="#ECMAScript-Modules" class="headerlink" title="ECMAScript Modules"></a>ECMAScript Modules</h2><p>在 <code>v13</code> 中，需要调用 <code>--experimental-modules</code> 来开启 <code>ESM module</code> 支持， 而且还会有警告，但目前已经移除警告（还是需要手动开启）<br>仍在实验中，但是其已经非常完善，移除警告迈向了stable的重要一步</p>
<h2 id="New-V8-ArrayBuffer-API"><a href="#New-V8-ArrayBuffer-API" class="headerlink" title="New V8 ArrayBuffer API"></a>New V8 ArrayBuffer API</h2><p>v8不再支持多个ArrayBuffer指向相同的base address</p>
<h2 id="Toolchain-and-Compiler-Upgrades"><a href="#Toolchain-and-Compiler-Upgrades" class="headerlink" title="Toolchain and Compiler Upgrades"></a>Toolchain and Compiler Upgrades</h2><p>//没看懂</p>
<ul>
<li><strong>(SEMVER-MAJOR)</strong> <strong>build</strong>: update macos deployment target to 10.13 for 14.x (AshCripps) <a href="https://github.com/nodejs/node/pull/32454">#32454</a></li>
<li><strong>(SEMVER-MAJOR)</strong> <strong>doc</strong>: update cross compiler machine for Linux armv7 (Richard Lau) <a href="https://github.com/nodejs/node/pull/32812">#32812</a></li>
<li><strong>(SEMVER-MAJOR)</strong> <strong>doc</strong>: update Centos/RHEL releases use devtoolset-8 (Richard Lau) <a href="https://github.com/nodejs/node/pull/32812">#32812</a></li>
<li><strong>(SEMVER-MAJOR)</strong> <strong>doc</strong>: remove SmartOS from official binaries (Richard Lau) <a href="https://github.com/nodejs/node/pull/32812">#32812</a></li>
<li><strong>(SEMVER-MAJOR)</strong> <strong>win</strong>: block running on EOL Windows versions (João Reis) <a href="https://github.com/nodejs/node/pull/31954">#31954</a></li>
</ul>
<p>It is expected that there will be an ABI mismatch on ARM between the Node.js binary and native addons. Native addons are only broken if they interact with <code>std::shared_ptr</code>. This is expected to be fixed in a later version of Node.js 14.</p>
<h2 id="Update-to-V8-8-1"><a href="#Update-to-V8-8-1" class="headerlink" title="Update to V8 8.1"></a>Update to V8 8.1</h2><h2 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h2><ul>
<li><strong>cli, report</strong>: move –report-on-fatalerror to stable (Colin Ihrig) </li>
<li><strong>deps</strong>: upgrade to libuv 1.37.0 (Colin Ihrig) </li>
<li><strong>fs</strong>: add fs/promises alias module </li>
</ul>
]]></content>
      <categories>
        <category>Node</category>
      </categories>
      <tags>
        <tag>14</tag>
      </tags>
  </entry>
  <entry>
    <title>2020-05-25-FirstUniqueCharacterInAString</title>
    <url>/2020/05/30/2020-05-25-FirstUniqueCharacterInAString/</url>
    <content><![CDATA[<h1 id="Leetcode-64"><a href="#Leetcode-64" class="headerlink" title="Leetcode-64"></a>Leetcode-64</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Given a string, find the first non-repeating character in it and return it&#x27;s index. If it doesn&#x27;t exist, return -1.</span><br><span class="line"></span><br><span class="line">Examples:</span><br><span class="line"></span><br><span class="line">s = &quot;leetcode&quot;</span><br><span class="line">return 0.</span><br><span class="line"></span><br><span class="line">s = &quot;loveleetcode&quot;,</span><br><span class="line">return 2.</span><br><span class="line">Note: You may assume the string contain only lowercase letters.</span><br></pre></td></tr></table></figure>
<h1 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @param &#123;string&#125; s</span><br><span class="line"> * @return &#123;number&#125;</span><br><span class="line"> */</span><br><span class="line">var firstUniqChar = function(s) &#123;</span><br><span class="line">    for(var i=0;i&lt;s.length;i++)&#123;</span><br><span class="line">        var flag = false;</span><br><span class="line">        for(var j=0;j&lt;s.length;j++)&#123;</span><br><span class="line">            if(i==j)continue;</span><br><span class="line">            if(s[i]==s[j])flag=true;</span><br><span class="line">        &#125;</span><br><span class="line">        if(!flag)return i;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    return -1;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int firstUniqChar(String s) &#123;</span><br><span class="line">        HashMap&lt;Character, Integer&gt; count = new HashMap&lt;Character, Integer&gt;();</span><br><span class="line">        int n = s.length();</span><br><span class="line">        // build hash map : character and how often it appears</span><br><span class="line">        for (int i = 0; i &lt; n; i++) &#123;</span><br><span class="line">            char c = s.charAt(i);</span><br><span class="line">            count.put(c, count.getOrDefault(c, 0) + 1);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        // find the index</span><br><span class="line">        for (int i = 0; i &lt; n; i++) &#123;</span><br><span class="line">            if (count.get(s.charAt(i)) == 1) </span><br><span class="line">                return i;</span><br><span class="line">        &#125;</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Easy</tag>
      </tags>
  </entry>
  <entry>
    <title>monit</title>
    <url>/2020/05/13/2020-05-13-%E7%9B%91%E6%8E%A7%E8%BD%AF%E4%BB%B6/</url>
    <content><![CDATA[<p>监控</p>
<h1 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h1><p>prometheus vs zabbix</p>
<p>先对两者的各自特点进行一下对比：</p>
<table>
<thead>
<tr>
<th>Zabbix</th>
<th>Prometheus</th>
</tr>
</thead>
<tbody>
<tr>
<td>后端用 C 开发，界面用 PHP 开发，定制化难度很高。</td>
<td>后端用 golang 开发，前端是 Grafana，JSON 编辑即可解决。定制化难度较低。</td>
</tr>
<tr>
<td>集群规模上限为 10000 个节点。</td>
<td>支持更大的集群规模，速度也更快。</td>
</tr>
<tr>
<td>更适合监控物理机环境。</td>
<td>更适合云环境的监控，对 OpenStack，<strong>Kubernetes</strong> 有更好的集成。</td>
</tr>
<tr>
<td>监控数据存储在关系型数据库内，如 MySQL，很难从现有数据中扩展维度。</td>
<td>监控数据存储在基于<strong>时间序列(TSDB)</strong>的数据库内，便于对已有数据进行新的聚合。</td>
</tr>
<tr>
<td>安装简单，zabbix-server 一个软件包中包括了所有的服务端功能。</td>
<td>安装相对复杂，<strong>监控、告警和界面</strong>都分属于不同的组件。</td>
</tr>
<tr>
<td><strong>图形化界面</strong>比较成熟，界面上基本上能完成全部的配置操作。</td>
<td>界面相对较弱，很多配置需要修改配置文件。</td>
</tr>
<tr>
<td>发展时间更长，对于很多监控场景，都有现成的解决方案。</td>
<td>2015 年后开始快速发展，但发展时间较短，成熟度不及 Zabbix。</td>
</tr>
</tbody>
</table>
<p>由于最后敲定了Prometheus方案，对于zabbix就云评测了，欢迎指正</p>
<ul>
<li>虽然图形化界面弱化，很多配置走yml文件，但图形化界面真的没有必要</li>
<li>时序数据库，高并发下好于mysql（不然干嘛开发tsdb应对监控场景）</li>
<li>prom支持pull和push模型，可以支持k8s，swarm等服务发现</li>
</ul>
<h1 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h1><p>Performance？webVitals？以后用到再补充</p>
<p>主要关注性能，pv，redirect，err等问题</p>
<h1 id="页面是否可用"><a href="#页面是否可用" class="headerlink" title="页面是否可用"></a>页面是否可用</h1><p>阿里云-云监控控制台</p>
<p>可提供网址监控，包括cookie, headers 等自定义的简单配置，进行电话，邮件，短信，旺旺等报警</p>
]]></content>
      <categories>
        <category>monit</category>
      </categories>
      <tags>
        <tag>intro</tag>
      </tags>
  </entry>
  <entry>
    <title>算法图解</title>
    <url>/2020/06/08/2020-06-08-%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="1-算法简介"><a href="#1-算法简介" class="headerlink" title="1. 算法简介"></a>1. 算法简介</h1><h2 id="1-1-二分"><a href="#1-1-二分" class="headerlink" title="1.1 二分"></a>1.1 二分</h2><p>Why: 复杂度O(n)—&gt;O(logn)</p>
<p>使用限制：有序数组</p>
<h2 id="1-2-大O表示"><a href="#1-2-大O表示" class="headerlink" title="1.2 大O表示"></a>1.2 大O表示</h2><p>指出算法运行时间的增速，算法需要做的就是把O(n^2)优化到O(n)等</p>
<h1 id="2-选择排序"><a href="#2-选择排序" class="headerlink" title="2. 选择排序"></a>2. 选择排序</h1><h2 id="2-1-数组-链表"><a href="#2-1-数组-链表" class="headerlink" title="2.1 数组 链表"></a>2.1 数组 链表</h2><p>数组：连续物理空间，可随机访问，增删数据复杂度高</p>
<p>链表：分散无力空间，不可随机访问（只能顺序），增删数据复杂度低</p>
<table>
<thead>
<tr>
<th></th>
<th>数组</th>
<th>链表</th>
</tr>
</thead>
<tbody>
<tr>
<td>读改</td>
<td>O(1)</td>
<td>O(n)</td>
</tr>
<tr>
<td>增删</td>
<td>O(n)</td>
<td>O(1)</td>
</tr>
</tbody>
</table>
<p>根据互相特性，选择合适的方式，如频繁增删用链表，反之用数组</p>
<h2 id="2-2-选择排序"><a href="#2-2-选择排序" class="headerlink" title="2.2 选择排序"></a>2.2 选择排序</h2><p>复杂度：O(n^2)</p>
<p>遍历n 个元素<strong>选择</strong> 最小/大的，遍历n-1个元素<strong>选择</strong> 最小/大的</p>
<h1 id="3-递归"><a href="#3-递归" class="headerlink" title="3. 递归"></a>3. 递归</h1><p>类比：套娃 :call_me_hand:</p>
<p>性能和易读不可兼得</p>
<p>避免<strong>死循环</strong>！</p>
<p><strong>尾递归</strong>可以解决部分性能问题</p>
<p>递归调用栈是性能降低的原因，遵循FIFO</p>
<h1 id="4-快排"><a href="#4-快排" class="headerlink" title="4. 快排"></a>4. 快排</h1><p>核心：分而治之divide and conquer，快排只是其中的一个应用</p>
<p>思想：递归的一种应用</p>
<p>快排（递归）是一种<strong>函数式编程</strong></p>
<p>快排通过基准值（可以选第一个元素）进行分而治之</p>
<h1 id="5-散列表"><a href="#5-散列表" class="headerlink" title="5. 散列表"></a>5. 散列表</h1><p>实现方式：<strong>数组</strong>，非链表，检索值key类似数组的下表，可直接访问value</p>
<p>应用：DNS，阻止重复数据(类set集)，作缓存（服务器端）</p>
<table>
<thead>
<tr>
<th>复杂度</th>
<th>散列平均</th>
<th>散列最糟</th>
<th>数组</th>
<th>链表</th>
</tr>
</thead>
<tbody>
<tr>
<td>查找</td>
<td>1</td>
<td>n</td>
<td>1</td>
<td>n</td>
</tr>
<tr>
<td>插入删除</td>
<td>1</td>
<td>n</td>
<td>n</td>
<td>1</td>
</tr>
</tbody>
</table>
<p>装填因子（0.4）=散列元素（4）/位置总数（10）</p>
<p>避免冲突：1.良好的散列函数（均匀分布） 2.较低的装填因子（&lt;<strong>0.7</strong>）</p>
<p>将满时候：1.申请两倍于原来的 新空间 2.hash所有元素到新空间</p>
<p>冲突解决：</p>
<ul>
<li>开放地址（最简单就是冲突顺延下一位，直到为空）</li>
<li>拉链发（指在某个位子上再拉一条链表，非👖拉链）</li>
</ul>
<h1 id="6-BFS"><a href="#6-BFS" class="headerlink" title="6.BFS"></a>6.BFS</h1><p>广度优先搜索breadth first search，解决<strong>无加权</strong>最短路径问题之一</p>
<p>应用：国际跳棋，拼写检查，人际关系网络</p>
<h1 id="7-Dijkstra"><a href="#7-Dijkstra" class="headerlink" title="7. Dijkstra"></a>7. Dijkstra</h1><p><strong>正加权有向无环</strong>图的解决算法</p>
<ol>
<li>最短时间内到达的节点</li>
<li>更新该节点临接节点的开销</li>
<li>重复</li>
<li>计算最终路径</li>
</ol>
<p>解决环：</p>
<p>负加权：bellman ford algorithm</p>
<h1 id="8-Greedy"><a href="#8-Greedy" class="headerlink" title="8. Greedy"></a>8. Greedy</h1><p>每步最优–&gt;全局最优，得到近似正确的结果</p>
<h1 id="9-DP"><a href="#9-DP" class="headerlink" title="9.DP"></a>9.DP</h1><p>列出所有可能</p>
<h1 id="10-K最邻近算法"><a href="#10-K最邻近算法" class="headerlink" title="10. K最邻近算法"></a>10. K最邻近算法</h1><h1 id="11-next"><a href="#11-next" class="headerlink" title="11.next"></a>11.next</h1><p>树解决了二分查找中，插入删除O(n)降低到O(log n)，但是降低了随机访问能力</p>
<p>树包括：二叉树，平衡二叉树，B树 B+树，，红黑树</p>
<p>反向索引：散列表，用于创建搜索引擎—&gt;应用：傅里叶变换</p>
<p>并行算法，单机并行or分布式，应用：mapreduce，map-&gt;映射 ，reduce-&gt;归并</p>
<p>布隆过滤器：庞大的散列表（如谷歌的上亿条），通常使用redis实现，是一种概率型数据结构（<strong>偶尔出错</strong>），使用理由，存储空间少</p>
<p>hyperLogLog：类似布隆，是个日志</p>
<p>SHA算法</p>
<ul>
<li>散列的一种应用</li>
<li>判断两个（超大）文件是否相同（散列值相同）</li>
<li>SHA（用户输入密码）？== 数据库存储的SHA值，且拖库后无法还原密码</li>
<li>SHA是一系列算法的统称，包括SHA-0 ,SHA-1 SHA-2 SHA-3 bcrypt etc</li>
<li>SHA全局敏感（改动局部，整体全变），SIMhash局部敏感（局部改变，散列值局部改变），后者用于判断网页是否已经搜集，作业是否抄袭，相似度查询</li>
<li>diffie-hellman密钥交换<ul>
<li>双方无需知道加密算法，破解难度大</li>
<li>公钥与私钥，client获取公钥后，1.使用公钥加密 2.服务器端使用私钥解密</li>
</ul>
</li>
</ul>
<p>线性规划：simplex算法</p>
]]></content>
      <categories>
        <category>Books</category>
      </categories>
      <tags>
        <tag>算法图解</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ</title>
    <url>/2020/09/14/2020-09-14-RabbitMQ/</url>
    <content><![CDATA[<h1 id="what"><a href="#what" class="headerlink" title="what"></a>what</h1><p>MQ-message queue</p>
<p>三足鼎立</p>
<p>rocketmq​​ -Made by Java 吞吐量高一些 阿里中间件</p>
<p>rabbitmq -Made by Erlang</p>
<p>Kafka-</p>
<p><img  src="../img/mq.jpg" align='left'/></p>
<p>以后有更多的了解再补充性能/功能差距</p>
<h1 id="why"><a href="#why" class="headerlink" title="why"></a>why</h1><p>功能：解耦(双方通过mq交互)、异步、削峰</p>
<p>应用：</p>
<ul>
<li>阿里双11</li>
</ul>
<p>问题：</p>
<ul>
<li>处理好新增的复杂性</li>
<li>处理好系统可用性</li>
</ul>
<h1 id="how"><a href="#how" class="headerlink" title="how"></a>how</h1><p>之所以选择rabbitmq是因为rocketmq的nameserver所需要的内存太大了，更何况boker，对于1C2G的乞丐机器来说根本跑不起来</p>
<h2 id="1-docker-run"><a href="#1-docker-run" class="headerlink" title="1.docker run"></a>1.docker run</h2><p>Because of rocketmq need more than </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull rabbitmq:management</span><br><span class="line"></span><br><span class="line">docker run -dit --name rabbitmq -e RABBITMQ_DEFAULT_USER=admin -e RABBITMQ_DEFAULT_PASS=admin -p 15672:15672 -p 5672:5672 rabbitmq:management</span><br><span class="line"></span><br><span class="line">--name containername</span><br><span class="line">-e RABBITMQ_DEFAULT_USER 参数用户名，密码同理</span><br><span class="line">-p 端口映射，主机：容器，15672-UI，5672-service</span><br><span class="line">rabbitmq:management image&#x27;s name</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="2-Usage"><a href="#2-Usage" class="headerlink" title="2.Usage"></a>2.Usage</h2><p>1.open chrome and input ‘localhost:15672’ or ‘192.168.1.1:15672’ then you can touch rabbitmq UI</p>
<p>Overview–the queued msg, msg rate in your server,  some global counts, your nodes stats (if u use the above method,you only see one node in the screen ),you also can build a cluster with more nodes</p>
<p>Connections–</p>
<p>Channels–</p>
<p>Exchanges–direct,fanout,headers,match,trace,topic</p>
<p>Queses–</p>
<p>Admin–users management with passport &amp;&amp; permission</p>
<p>2.use 5672 in your code</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">amqp.connect(&#123;</span><br><span class="line">            <span class="attr">protocol</span>: <span class="string">&#x27;amqp&#x27;</span>,</span><br><span class="line">            <span class="attr">hostname</span>: <span class="string">&#x27;example.com&#x27;</span>,<span class="comment">//localhost</span></span><br><span class="line">            <span class="attr">port</span>: <span class="string">&#x27;5672&#x27;</span>,</span><br><span class="line">            <span class="attr">username</span>: <span class="string">&#x27;admin&#x27;</span>,</span><br><span class="line">            <span class="attr">password</span>: <span class="string">&#x27;xxx&#x27;</span>,</span><br><span class="line">            <span class="attr">vhost</span>: <span class="string">&#x27;/&#x27;</span>,<span class="comment">//important</span></span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure>
<p>more in official docs–&gt;<a href="https://www.rabbitmq.com/tutorials/tutorial-one-javascript.html"> I’m doc</a></p>
<p>or some blogs–&gt;<a href="https://www.cnblogs.com/wukong-holmes/p/9306733.html">I’m blog</a></p>
<p>or my GitHub–&gt;<a href="https://github.com/ShawnGoethe/phones/tree/master/app/controller/pmq.js">click here</a></p>
]]></content>
      <categories>
        <category>MQ</category>
      </categories>
      <tags>
        <tag>basic</tag>
      </tags>
  </entry>
  <entry>
    <title>chevereto</title>
    <url>/2020/09/15/2020-09-15-Chevereto/</url>
    <content><![CDATA[<h1 id="what"><a href="#what" class="headerlink" title="what"></a>what</h1><p>To solve some problems</p>
<ul>
<li>some web only use markdown and can’t upload pictures,such as v2ex.com</li>
<li>some pics you don’t want to give it to others for long time,such as your interesting story </li>
<li>give your blog’s  can speed when download bigger pics</li>
<li>and so on</li>
</ul>
<p>Picture Bed can offer you a excellent platform to share your pictures and protect them, however it has a problem that you need a server to run the service,even though  you can use 七牛云,alioss,weibo for free.</p>
<h1 id="why"><a href="#why" class="headerlink" title="why"></a>why</h1><p>Chevereto is aim what I find</p>
<ul>
<li>dockerhub has chevereto images</li>
<li>Combined with <a href="https://getsharex.com/">ShareX</a> (only for windows😢),chevereto can write markdown essay easily</li>
<li>it has api ,you can make it stronger</li>
<li>Chevereto Free v1.2.2 now</li>
<li>Something others you can discover by yourself</li>
</ul>
<h1 id="how"><a href="#how" class="headerlink" title="how"></a>how</h1><p>Chevereto is a php project , I use docker to run it </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull nmtan/chevereto:latest</span><br><span class="line"></span><br><span class="line">//use docker-compose.yml(next block)</span><br><span class="line"></span><br><span class="line">// or docker run </span><br><span class="line">docker run -it --name chevereto -d     -p 8000:80     -v &quot;/home/xxx/images&quot;:/var/www/html/images     -e &quot;CHEVERETO_DB_HOST=127.0.0.1&quot;     -e &quot;CHEVERETO_DB_USERNAME=root&quot;     -e &quot;CHEVERETO_DB_PASSWORD=rootpass&quot;     -e &quot;CHEVERETO_DB_NAME=chevereto&quot;     -e &quot;CHEVERETO_DB_PREFIX=chv_&quot;  nmtan/chevereto</span><br><span class="line">//-v save photos in server instead of container</span><br><span class="line">//-e mysql:5.7.31 host,username,password,db_name(db must exist first)</span><br><span class="line">//open chrome and input 127.0.0.1:8000</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//this is docker-compose.yml</span><br><span class="line">version: &#x27;3&#x27;</span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  db:</span><br><span class="line">    image: mariadb</span><br><span class="line">    volumes:</span><br><span class="line">      - ./database:/var/lib/mysql:rw</span><br><span class="line">    restart: always</span><br><span class="line">    networks:</span><br><span class="line">      - private</span><br><span class="line">    environment:</span><br><span class="line">      MYSQL_ROOT_PASSWORD: xxxxx</span><br><span class="line">      MYSQL_DATABASE: xxxxx</span><br><span class="line">      MYSQL_USER: xxxxx</span><br><span class="line">      MYSQL_PASSWORD: xxxxx</span><br><span class="line"></span><br><span class="line">  chevereto:</span><br><span class="line">    depends_on:</span><br><span class="line">      - db</span><br><span class="line">    image: nmtan/chevereto</span><br><span class="line">    restart: always</span><br><span class="line">    networks:</span><br><span class="line">      - private</span><br><span class="line">    environment:</span><br><span class="line">      CHEVERETO_DB_HOST: db</span><br><span class="line">      CHEVERETO_DB_USERNAME: xxxxxx</span><br><span class="line">      CHEVERETO_DB_PASSWORD: xxxxx</span><br><span class="line">      CHEVERETO_DB_NAME: xxxxx</span><br><span class="line">      CHEVERETO_DB_PREFIX: chv_</span><br><span class="line">    volumes:</span><br><span class="line">      - ./images:/var/www/html/images:rw</span><br><span class="line">      - ./php.ini:/usr/local/etc/php/php.ini:ro</span><br><span class="line">    ports:</span><br><span class="line">      - 8080:80</span><br><span class="line"></span><br><span class="line">networks:</span><br><span class="line">  private:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// start command</span><br><span class="line">nohup docker-compose up  &amp;&gt; run.log &amp;</span><br><span class="line">disown</span><br></pre></td></tr></table></figure>
<p>You maybe run into a stone wall when you first visit 127.0.0.1:8000</p>
<ul>
<li><p>Before you can use <code>docker exec -it chevereto bash</code> into container /var/www/html</p>
</li>
<li><p>no permission write phots to /home/xxx/images,you can use <code>chmod -R 777 /home/xxx/images</code></p>
</li>
<li>no permission update chevereto from 1.1.4 to1.2.2 ,<code>no update possible: /app/install/update/temp/ path</code>,that is no temp folder in /app/install/update/ under version 1.2.0,you can mkdir temp and then chmod -R 777 ./temp and then refresh the webpage ,the prics bed will update successfully</li>
</ul>
<p>So , you can use ip address to visit your chevereto . However , we usually use domain name such as example.com to visit web, a https isn ecessary as well</p>
<ul>
<li>1.Use <a href="https://yundunnext.console.aliyun.com/?spm=5176.2020520163.0.0.475556a7iLgQoU&amp;p=cas">aliyun</a> to apply  a free ssl license for a domain name such as pics.example.com</li>
<li>2.Download pem and keys to your server and put it in nginx conf folder</li>
<li>3.Use the conf as follows</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">      listen 80;</span><br><span class="line">      server_name  pics.example.com;</span><br><span class="line">      return 301 https://pics.example.com$request_uri;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  server &#123;</span><br><span class="line">      listen 443 ssl;</span><br><span class="line">      server_name  pics.example.com;</span><br><span class="line">      gzip on;    </span><br><span class="line"></span><br><span class="line">      ssl_certificate cert/xxxxxx9_pics.example.com.pem; # pem&#x27;s filename</span><br><span class="line">      ssl_certificate_key cert/xxxxxx9_pics.example.com.key;# key&#x27;s filename</span><br><span class="line"></span><br><span class="line">      location / &#123;</span><br><span class="line">          proxy_redirect off;</span><br><span class="line">          proxy_pass http://dockername;</span><br><span class="line"></span><br><span class="line">          proxy_set_header  Host                $http_host;</span><br><span class="line">          proxy_set_header  X-Real-IP           $remote_addr;</span><br><span class="line">          proxy_set_header  X-Forwarded-Ssl     on;</span><br><span class="line">          proxy_set_header  X-Forwarded-For     $proxy_add_x_forwarded_for;</span><br><span class="line">          proxy_set_header  X-Forwarded-Proto   $scheme;</span><br><span class="line">          proxy_set_header  X-Frame-Options     SAMEORIGIN;</span><br><span class="line"></span><br><span class="line">          client_max_body_size        100m;</span><br><span class="line">          client_body_buffer_size     128k;</span><br><span class="line"></span><br><span class="line">          proxy_buffer_size           4k;</span><br><span class="line">          proxy_buffers               4 32k;</span><br><span class="line">          proxy_busy_buffers_size     64k;</span><br><span class="line">          proxy_temp_file_write_size  64k;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><ol start="4">
<li>And then you can visit <code>https://pics.example.com</code> </li>
</ol>
</li>
</ul>
<p>That‘s my story that building pics bed  ,and hope to help you.</p>
<p><code>2020-09-28 append</code></p>
<p>use <code>picgo</code>，upload pictures in typora to chevereto</p>
<ol>
<li><p>GitHub download picgo,mac use <a href="https://github.com/Molunerfinn/PicGo/releases/download/v2.3.0-beta.3/PicGo-2.3.0-beta.3.dmg">.dmp</a>,and then install it</p>
</li>
<li><p>open <code>插件设置</code>,search <code>chevereto</code> and install <code>chevereto 1.0.0</code></p>
</li>
<li><p>Open <code>图床设置&gt;Chevereto Uploader</code> and put in params,</p>
<p>Url is your upload service ip/domain</p>
<p>Key is chevereto api in <code>Dashboard&gt;Settings&gt;API&gt;API v1 key</code></p>
<p>param is not in use now</p>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Url:https://example.com/api/1/upload</span><br><span class="line">Key:xxx</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>Click <code>确定</code> and <code>设为默认图库</code></li>
<li>make sure server is on <code>PicGo设置&gt;设置Server&gt;点击设置</code>,if it is on ,noting should be done</li>
</ol>
<p>and then we modify config in typaro</p>
<ol>
<li>Open Typora and open ‘preferences&gt;Images` </li>
<li>Choose Upload images in when Insert and check <code>apply above rules to local images</code> and <code>apply above rules to online images</code> in option, and I suggest you check both of them to approve all pics managed by chevereto</li>
<li>Choose <code>PicGo.app</code> in images Uploader and click <code>Test Uploader</code> to test your upload pictures automatically</li>
</ol>
<p>for more information ,youcan visit </p>
<ul>
<li><a href="https://github.com/Molunerfinn/PicGo">PicGo</a> and <a href="https://picgo.github.io/PicGo-Core-Doc/">PicGo-Core</a></li>
<li><a href="https://blog.csdn.net/qq_19564393/article/details/108506062">Upload your pictures in personal album instead of visitors’ albulm</a></li>
<li><a href="https://v3-docs.chevereto.com/API/V1.html#api-key">Chevereto API</a></li>
</ul>
<h1 id="thanks"><a href="#thanks" class="headerlink" title="thanks"></a>thanks</h1><ul>
<li><a href="https://chevereto.com/">Chevereto</a></li>
<li><a href="https://getsharex.com/">ShareX</a></li>
<li><a href="https://www.ioiox.com/archives/80.html">ioiox’s blog</a></li>
<li><a href="https://dana5haw.com/posts/Docker-Image-Hosting-Chevereto.html">dana5haw’s blog</a></li>
</ul>
]]></content>
      <categories>
        <category>Chevereto</category>
      </categories>
      <tags>
        <tag>pictureBed</tag>
      </tags>
  </entry>
  <entry>
    <title>Jupyter</title>
    <url>/2020/09/25/2020-09-25-Jupyter/</url>
    <content><![CDATA[<h1 id="what"><a href="#what" class="headerlink" title="what"></a>what</h1><p>Jupiter = Julia + Python + R</p>
<blockquote>
<p>Jupyter notebook（<a href="https://link.zhihu.com/?target=http%3A//jupyter.org/">http://jupyter.org/</a>） 是一种 Web 应用，能让用户将说明文本、数学方程、代码和可视化内容全部组合到一个易于共享的文档中。</p>
</blockquote>
<h1 id="why"><a href="#why" class="headerlink" title="why"></a>why</h1><ul>
<li>将代码和文档结合在一起，更直观的编写人工智能，大数据的代码</li>
<li>分块运行</li>
<li>直接运行shell不需要切换环境</li>
<li>so on</li>
</ul>
<h1 id="how"><a href="#how" class="headerlink" title="how"></a>how</h1><ol>
<li>Download images</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$docker pull jupyter jupyter/scipy-notebook:latest</span><br><span class="line">$docker run -itd --rm -p 1000:8888 -e JUPYTER_ENABLE_LAB=yes -v /home/zehai/jupyter:/home/jovyan/work --name jupyter jupyter/scipy-notebook:latest</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>docker logs -f  container’s ID and find token</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">To access the notebook, open this file in a browser:</span><br><span class="line">    file:///home/jovyan/.local/share/jupyter/runtime/nbserver-6-open.html</span><br><span class="line">Or copy and paste one of these URLs:</span><br><span class="line">    http://896bb1e66101:8888/?token=fda8565a9b5cd5b8c621b45322ee72f716fd7ddea089fb51</span><br><span class="line"> or http://127.0.0.1:8888/?token=fda8565a9b5cd5b8c621b45322ee72f716fd7ddea089fb51</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>more info visit official <a href="https://jupyter-docker-stacks.readthedocs.io/en/latest/">docs</a></li>
<li>enjoy (pics powered by cherevero)</li>
</ol>
<p><img src="https://pics.tbjd.xyz/images/2020/09/25/3318a2fadaf085f2bee7f0de3b42971c.png" alt="3318a2fadaf085f2bee7f0de3b42971c.png"></p>
]]></content>
  </entry>
  <entry>
    <title>NodeJS</title>
    <url>/2020/09/27/2020-09-27-NodeJS/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://github.com/theanarkh/understand-nodejs">https://github.com/theanarkh/understand-nodejs</a></p>
</blockquote>
<p>文档还是不错的</p>
]]></content>
  </entry>
  <entry>
    <title>2020-10-16-promise用法</title>
    <url>/2020/10/16/2020-10-16-promise%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<h1 id="What"><a href="#What" class="headerlink" title="What"></a>What</h1><p>ECMAscript 6 原生提供了 Promise 对象。</p>
<p>Promise 对象代表了未来将要发生的事件，用来传递异步操作的消息。</p>
<h3 id="Promise-对象有以下两个特点"><a href="#Promise-对象有以下两个特点" class="headerlink" title="Promise 对象有以下两个特点:"></a>Promise 对象有以下两个特点:</h3><p>1、对象的状态不受外界影响。Promise 对象代表一个异步操作，有三种状态：</p>
<ul>
<li>pending: 初始状态，不是成功或失败状态。</li>
<li>fulfilled: 意味着操作成功完成。</li>
<li>rejected: 意味着操作失败。</li>
</ul>
<p>只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是 Promise 这个名字的由来，它的英语意思就是「承诺」，表示其他手段无法改变。</p>
<p>2、一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise 对象的状态改变，只有两种可能：从 Pending 变为 Resolved 和从 Pending 变为 Rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果。就算改变已经发生了，你再对 Promise 对象添加回调函数，也会立即得到这个结果。这与事件（Event）完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var promise = new Promise(function(resolve, reject) &#123;</span><br><span class="line">    // 异步处理</span><br><span class="line">    // 处理结束后、调用resolve 或 reject</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>以上来自:<a href="https://www.runoob.com/w3cnote/javascript-promise-object.html">菜鸟https://www.runoob.com/w3cnote/javascript-promise-object.html</a></p>
<h1 id="Why"><a href="#Why" class="headerlink" title="Why"></a>Why</h1><p>因为在<a href="/2020/01/07/2020-01-07-%E5%85%B3%E4%BA%8EPromise%E7%9A%84%E6%80%9D%E8%80%83/">2020年01月07日有一篇文章</a>讲了使用promise实现延时队列的一道面试题，因为之前写业务没有用到过所以一直以为用处不大，但今天对接阿里的<code>录音文件识别</code>转文字的接口中，示例代码是一个setInterval轮询得到结果的一种方式，但是他带来了一个很严重的问题</p>
<blockquote>
<p>！！没有办法返回前端转文字的结果！！</p>
</blockquote>
<p>大概代码如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//url:https://help.aliyun.com/document_detail/94242.html?spm=a2c4g.11174283.6.601.15eb7275a8rq00</span></span><br><span class="line"><span class="comment">// 这段代码会异步执行，可以得到结果，但是直接用这个代码返回给前端</span></span><br><span class="line">client.submitTask(taskParams, options).then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(response);</span><br><span class="line">        <span class="comment">// 服务端响应信息的状态描述StatusText。</span></span><br><span class="line">        <span class="keyword">var</span> statusText = response.StatusText;</span><br><span class="line">        <span class="keyword">if</span> (statusText != <span class="string">&#x27;SUCCESS&#x27;</span>) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;录音文件识别请求响应失败!&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;录音文件识别请求响应成功!&#x27;</span>);</span><br><span class="line">        <span class="comment">// 获取录音文件识别请求任务的TaskId，以供识别结果查询使用。</span></span><br><span class="line">        <span class="keyword">var</span> taskId = response.TaskId;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 以TaskId为查询参数，提交识别结果查询请求。</span></span><br><span class="line"><span class="comment">         * 以轮询的方式进行识别结果的查询，直到服务端返回的状态描述为&quot;SUCCESS&quot;、SUCCESS_WITH_NO_VALID_FRAGMENT，</span></span><br><span class="line"><span class="comment">         * 或者为错误描述，则结束轮询。</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">var</span> taskIdParams = &#123;</span><br><span class="line">            <span class="attr">TaskId</span> : taskId</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">var</span> timer = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            client.getTaskResult(taskIdParams).then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&#x27;识别结果查询响应：&#x27;</span>);</span><br><span class="line">                <span class="built_in">console</span>.log(response);</span><br><span class="line">                <span class="keyword">var</span> statusText = response.StatusText;</span><br><span class="line">                <span class="keyword">if</span> (statusText == <span class="string">&#x27;RUNNING&#x27;</span> || statusText == <span class="string">&#x27;QUEUEING&#x27;</span>) &#123;</span><br><span class="line">                    <span class="comment">// 继续轮询，注意间隔周期。</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (statusText == <span class="string">&#x27;SUCCESS&#x27;</span> || statusText == <span class="string">&#x27;SUCCESS_WITH_NO_VALID_FRAGMENT&#x27;</span>) &#123;</span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="string">&#x27;录音文件识别成功：&#x27;</span>);</span><br><span class="line">                        <span class="keyword">var</span> sentences = response.Result;</span><br><span class="line">                        <span class="built_in">console</span>.log(sentences);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="string">&#x27;录音文件识别失败!&#x27;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 退出轮询</span></span><br><span class="line">                    <span class="built_in">clearInterval</span>(timer);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.error(error);</span><br><span class="line">                <span class="comment">// 异常情况，退出轮询。</span></span><br><span class="line">                <span class="built_in">clearInterval</span>(timer);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;, <span class="number">10000</span>);</span><br><span class="line">    &#125;).catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(error);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="How"><a href="#How" class="headerlink" title="How"></a>How</h1><p>使用promise进行包裹，等到promise内部的函数取到了结果在返回</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (statusText == <span class="string">&#x27;SUCCESS&#x27;</span> || statusText == <span class="string">&#x27;SUCCESS_WITH_NO_VALID_FRAGMENT&#x27;</span>) &#123;</span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="string">&#x27;录音文件识别成功：&#x27;</span>);</span><br><span class="line">                        <span class="keyword">var</span> sentences = response.Result;</span><br><span class="line">                        <span class="built_in">console</span>.log(sentences);</span><br><span class="line">  											<span class="comment">//这里新增resolve</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="string">&#x27;录音文件识别失败!&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>外层通过如下代码实现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var promise = new Promise(function(resolve, reject) &#123;</span><br><span class="line">    // 异步处理</span><br><span class="line">    // 处理结束后、调用resolve 或 reject</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getWords</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        client</span><br><span class="line">          .submitTask(taskParams, options)</span><br><span class="line">          .then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(response);</span><br><span class="line">            <span class="comment">// 服务端响应信息的状态描述StatusText。</span></span><br><span class="line">            <span class="keyword">const</span> statusText = response.StatusText;</span><br><span class="line">            <span class="keyword">if</span> (statusText != <span class="string">&#x27;SUCCESS&#x27;</span>) &#123;</span><br><span class="line">              <span class="built_in">console</span>.log(<span class="string">&#x27;录音文件识别请求响应失败!&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;录音文件识别请求响应成功!&#x27;</span>);</span><br><span class="line">            <span class="comment">// 获取录音文件识别请求任务的TaskId，以供识别结果查询使用。</span></span><br><span class="line">            <span class="keyword">const</span> taskId = response.TaskId;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 以TaskId为查询参数，提交识别结果查询请求。</span></span><br><span class="line"><span class="comment">             * 以轮询的方式进行识别结果的查询，直到服务端返回的状态描述为&quot;SUCCESS&quot;、SUCCESS_WITH_NO_VALID_FRAGMENT，</span></span><br><span class="line"><span class="comment">             * 或者为错误描述，则结束轮询。</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">const</span> taskIdParams = &#123;</span><br><span class="line">              <span class="attr">TaskId</span>: taskId,</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">const</span> timer = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">              client</span><br><span class="line">                .getTaskResult(taskIdParams)</span><br><span class="line">                .then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">                  <span class="built_in">console</span>.log(<span class="string">&#x27;识别结果查询响应：&#x27;</span>);</span><br><span class="line">                  <span class="built_in">console</span>.log(response);</span><br><span class="line">                  <span class="keyword">const</span> statusText = response.StatusText;</span><br><span class="line">                  <span class="keyword">if</span> (statusText == <span class="string">&#x27;RUNNING&#x27;</span> || statusText == <span class="string">&#x27;QUEUEING&#x27;</span>) &#123;</span><br><span class="line">                    <span class="comment">// 继续轮询，注意间隔周期。</span></span><br><span class="line">                  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (</span><br><span class="line">                      statusText == <span class="string">&#x27;SUCCESS&#x27;</span> ||</span><br><span class="line">                      statusText == <span class="string">&#x27;SUCCESS_WITH_NO_VALID_FRAGMENT&#x27;</span></span><br><span class="line">                    ) &#123;</span><br><span class="line">                      <span class="built_in">console</span>.log(<span class="string">&#x27;录音文件识别成功：&#x27;</span>);</span><br><span class="line">                      <span class="keyword">let</span> sentences = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">                      <span class="keyword">for</span> (<span class="keyword">const</span> s <span class="keyword">of</span> response.Result.Sentences) &#123;</span><br><span class="line">                        sentences += s.Text;</span><br><span class="line">                      &#125;</span><br><span class="line">                      <span class="built_in">console</span>.log(response.Result);</span><br><span class="line">                      resolve(sentences);<span class="comment">//**重点**//</span></span><br><span class="line">                      <span class="comment">// return sentences;</span></span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                      <span class="built_in">console</span>.log(<span class="string">&#x27;录音文件识别失败!&#x27;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 退出轮询</span></span><br><span class="line">                    <span class="built_in">clearInterval</span>(timer);</span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">                  <span class="built_in">console</span>.error(error);</span><br><span class="line">                  <span class="comment">// 异常情况，退出轮询。</span></span><br><span class="line">                  <span class="built_in">clearInterval</span>(timer);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;, <span class="number">10000</span>);</span><br><span class="line">          &#125;)</span><br><span class="line">          .catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.error(error);</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> getWords();<span class="comment">//返回前端，翻译结果</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>另外记录一件事情，左侧单元图标地址：<a href="https://fontawesome.com/v4.7.0/icons/">https://fontawesome.com/v4.7.0/icons/</a></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>vscode访问服务器文件</title>
    <url>/2021/01/05/2021-01-05-vscoderemote/</url>
    <content><![CDATA[<p>1.install <code>remote ssh</code> in vscode</p>
<p>2.click <code>remote explorer</code> and select <code>ssh targets</code></p>
<p>3.click remote ssh <code>configure</code> or press <code>F1</code> and input remote-ssh:Open configuration file</p>
<p>4.selete path <code>~/.ssh/config</code>,and modify config file</p>
<p>if you dont have rsa ,please generate keys before</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">//optional</span><br><span class="line">ssh-keygen</span><br><span class="line"><span class="meta">#</span><span class="bash"> passphrase can be empty and <span class="keyword">then</span> generate keys <span class="keyword">in</span> `~/.ssh`</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> put *.pub (public key) to your server (~/.ssh/) and excute `cat id_rsa.pub &gt;&gt; authorized_keys` to merge Previous file</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> now rsa keys are ready</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Host alias</span><br><span class="line">    HostName 8.888.88.8</span><br><span class="line">    User root</span><br><span class="line">    IdentityFile ~/.ssh/id_rsa</span><br><span class="line">    RSAAuthentication yes</span><br><span class="line">    PubkeyAuthentication yes</span><br><span class="line">    PasswordAuthentication no</span><br></pre></td></tr></table></figure>
<ul>
<li>Host alias–&gt;your remote server name</li>
<li>hostName–&gt;server ip</li>
<li>User–&gt;login username</li>
<li>IdentityFile–&gt;private key path</li>
<li>RSAAuthentication–&gt;optional</li>
<li>PubkeyAuthentication–&gt;optional</li>
<li>PasswordAuthentication–&gt;no password login</li>
</ul>
<p>5.login without password ready</p>
]]></content>
      <categories>
        <category>skills</category>
      </categories>
      <tags>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title>closure</title>
    <url>/2021/01/08/2021-01-08-closure/</url>
    <content><![CDATA[<p>前置知识：JavaScript是静态作用域</p>
<p>闭包：访问自由变量的函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;<span class="comment">//既不是foo的局部变量，也不是foo函数的参数，a为自由变量</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo();<span class="comment">//1</span></span><br></pre></td></tr></table></figure>
<p>即使上下文被销毁，它仍然存在，因为在<strong>作用域链</strong>上被引用了，是js的一个特性，目前如PHP，Java不会原生支持</p>
<p><strong>面试题</strong></p>
<p>常见的新手面试题，我遇到过好几次（作用域+闭包考点）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> data = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  data[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data[<span class="number">0</span>]();</span><br><span class="line">data[<span class="number">1</span>]();</span><br><span class="line">data[<span class="number">2</span>]();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//closure </span></span><br><span class="line"><span class="keyword">var</span> data = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  data[i] = (<span class="function"><span class="keyword">function</span> (<span class="params">i</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(i);</span><br><span class="line">        &#125;</span><br><span class="line">  &#125;)(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data[<span class="number">0</span>]();<span class="comment">//不用找global的i</span></span><br><span class="line">data[<span class="number">1</span>]();</span><br><span class="line">data[<span class="number">2</span>]();</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>closure</tag>
      </tags>
  </entry>
  <entry>
    <title>currying</title>
    <url>/2021/01/15/2021-01-15-currying/</url>
    <content><![CDATA[<p>柯里化是一种将使用多个参数的一个函数转换成一系列使用一个参数的函数的技术</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行 add 函数，一次传入两个参数即可</span></span><br><span class="line">add(<span class="number">1</span>, <span class="number">2</span>) <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 假设有一个 curry 函数可以做到柯里化</span></span><br><span class="line"><span class="keyword">var</span> addCurry = curry(add);</span><br><span class="line">addCurry(<span class="number">1</span>)(<span class="number">2</span>) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>currying</tag>
      </tags>
  </entry>
  <entry>
    <title>dockerMysql</title>
    <url>/2021/02/10/2021-02-10-dockerMysql/</url>
    <content><![CDATA[<blockquote>
<p>link:<a href="https://hub.docker.com/_/mysql?tab=description&amp;page=1&amp;ordering=last_updated">mysql-docker</a></p>
</blockquote>
<h1 id="支持标签"><a href="#支持标签" class="headerlink" title="支持标签"></a>支持标签</h1><ul>
<li><a href="https://github.com/docker-library/mysql/blob/2966bfbd71cf370770cd880aa45f3c8f155d0aae/8.0/Dockerfile.debian"><code>8.0.23</code>, <code>8.0</code>, <code>8</code>, <code>latest</code></a></li>
<li><a href="https://github.com/docker-library/mysql/blob/2966bfbd71cf370770cd880aa45f3c8f155d0aae/5.7/Dockerfile.debian"><code>5.7.33</code>, <code>5.7</code>, <code>5</code></a></li>
<li><a href="https://github.com/docker-library/mysql/blob/2966bfbd71cf370770cd880aa45f3c8f155d0aae/5.6/Dockerfile.debian"><code>5.6.51</code>, <code>5.6</code></a></li>
</ul>
<h1 id="快速手册"><a href="#快速手册" class="headerlink" title="快速手册"></a>快速手册</h1><ul>
<li><strong>issues</strong>: <a href="https://github.com/docker-library/mysql/issues">https://github.com/docker-library/mysql/issues</a></li>
<li><strong>支持平台</strong>: (<a href="https://github.com/docker-library/official-images#architectures-other-than-amd64">more info</a>) <a href="https://hub.docker.com/r/amd64/mysql/"><code>amd64</code></a></li>
<li><strong>发布image 详情</strong>: <a href="https://github.com/docker-library/repo-info/blob/master/repos/mysql">repo-info repo’s <code>repos/mysql/</code> directory</a> (<a href="https://github.com/docker-library/repo-info/commits/master/repos/mysql">history</a>) (image metadata, transfer size, etc)</li>
<li><strong>Image 更新</strong>: <a href="https://github.com/docker-library/official-images/issues?q=label%3Alibrary%2Fmysql">official-images repo’s <code>library/mysql</code> label</a><br><a href="https://github.com/docker-library/official-images/blob/master/library/mysql">official-images repo’s <code>library/mysql</code> file</a> (<a href="https://github.com/docker-library/official-images/commits/master/library/mysql">history</a>)</li>
<li><strong>描述来源</strong>: <a href="https://github.com/docker-library/docs/tree/master/mysql">docs repo’s <code>mysql/</code> directory</a> (<a href="https://github.com/docker-library/docs/commits/master/mysql">history</a>)</li>
</ul>
<h1 id="什么是-MySQL"><a href="#什么是-MySQL" class="headerlink" title="什么是 MySQL?"></a>什么是 MySQL?</h1><p>MySQL 是最受欢迎的，开源的数据库. 凭借被验证过的性能表现，可靠性，易用性, MySQL已经成为基于web的应用程序的 主要选择,包括完整得个人项目和网站项目（电子上午，信息服务）,也包括优秀的Facebook Facebook, Twitter, YouTube, Yahoo! </p>
<h1 id="如何使用mysql-image"><a href="#如何使用mysql-image" class="headerlink" title="如何使用mysql image"></a>如何使用mysql image</h1><h2 id="创建-mysql-服务实例"><a href="#创建-mysql-服务实例" class="headerlink" title="创建 mysql 服务实例"></a>创建 <code>mysql</code> 服务实例</h2><p>启动 MySQL 比较简单:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag</span><br></pre></td></tr></table></figure>
<ul>
<li>some-mysql 容器名称</li>
<li>my-secret-pw 是root账户的密码</li>
<li>tag 是mysql的版本</li>
</ul>
<h2 id="通过mysql命令行连接mysql"><a href="#通过mysql命令行连接mysql" class="headerlink" title="通过mysql命令行连接mysql"></a>通过mysql命令行连接mysql</h2><p>以下命令可以启动mysql容器并运行终端，执行SQL语句</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ docker run -it --network some-network --rm mysql mysql -hsome-mysql -uexample-user -p</span><br></pre></td></tr></table></figure>
<ul>
<li>some-mysql 容器名称</li>
<li>some-network 连接网络（方便容器间访问）</li>
</ul>
<p>也可以直接运行客户端，访问远程数据库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker run -it --rm mysql mysql -hsome.mysql.host -usome-mysql-user -p</span><br></pre></td></tr></table></figure>
<p>更多命令请访问 <a href="http://dev.mysql.com/doc/en/mysql.html">MySQL documentation</a></p>
<h2 id="使用docker-stack-或docker-compose部署"><a href="#使用docker-stack-或docker-compose部署" class="headerlink" title="使用docker stack 或docker-compose部署"></a>使用docker stack 或docker-compose部署</h2><p>示例<code>stack.yml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Use root/example as user/password credentials</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.1&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">--default-authentication-plugin=mysql_native_password</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">example</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">adminer:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">adminer</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8080</span><span class="string">:8080</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>docker stack deploy -c stack.yml mysql</code> </li>
<li><code>docker-compose -f stack.yml up</code></li>
</ul>
<p>启动后, 访问 <code>http://swarm-ip:8080</code>, <code>http://localhost:8080</code>, or <code>http://host-ip:8080</code> </p>
<h2 id="shell访问查看-MySQL-日志"><a href="#shell访问查看-MySQL-日志" class="headerlink" title="shell访问查看 MySQL 日志"></a>shell访问查看 MySQL 日志</h2><p>使用 <code>docker exec</code> 可以让你在容器内执行命令，命令如下 </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ docker <span class="built_in">exec</span> -it some-mysql bash</span><br></pre></td></tr></table></figure>
<p>容器日志:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker logs some-mysql</span><br></pre></td></tr></table></figure>
<h2 id="自定义-MySQL-配置文件"><a href="#自定义-MySQL-配置文件" class="headerlink" title="自定义 MySQL 配置文件"></a>自定义 MySQL 配置文件</h2><p>mysql默认配置文件在 <code>/etc/mysql/my.cnf</code>, 也可能指定了额外文件如： <code>/etc/mysql/conf.d</code> or <code>/etc/mysql/mysql.conf.d</code>. 请检查mysqlimage本身的相关文件和目录以了解更多信息</p>
<p>如果 <code>/my/custom/config-file.cnf</code> 是你自定义的文件未知和名字, 你可以这样启动你的<code>mysql</code> 容器 </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ docker run --name some-mysql -v /my/custom:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag</span><br></pre></td></tr></table></figure>
<p>你会启动一个用你自定义配置 <code>/etc/mysql/my.cnf</code> and <code>/etc/mysql/conf.d/config-file.cnf</code>, 的mysql容器</p>
<h3 id="不使用cnf-文件配置"><a href="#不使用cnf-文件配置" class="headerlink" title="不使用cnf 文件配置"></a>不使用<code>cnf</code> 文件配置</h3><p>很多配置都可以传给 <code>mysqld</code>. 使你自定义容器而不需要 <code>cnf</code> 文件. 如当你想改变默认编码和排序规则，使用 UTF-8 (<code>utf8mb4</code>) 只需要执行如下命令:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci</span><br></pre></td></tr></table></figure>
<p>如果你想看到所有的配置项，只需要执行:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ docker run -it --rm mysql:tag --verbose --<span class="built_in">help</span></span><br></pre></td></tr></table></figure>
<h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><p>docker run 时，可以一个或多个参数进行配置. 不过需要注意，如果使用已经包含数据库的数据目录启动容器，以下变量不会产生影响，在启动时，任何预先存在的数据库都保持不变，任何之前存在的数据库在容器启动时将保持不变.</p>
<h3 id="MYSQL-ROOT-PASSWORD"><a href="#MYSQL-ROOT-PASSWORD" class="headerlink" title="MYSQL_ROOT_PASSWORD"></a><code>MYSQL_ROOT_PASSWORD</code></h3><p>该变量是必须的，是root账户的密码.</p>
<h3 id="MYSQL-DATABASE"><a href="#MYSQL-DATABASE" class="headerlink" title="MYSQL_DATABASE"></a><code>MYSQL_DATABASE</code></h3><p>该变量可选，允许在启动时，指定数据库的名称. 如果提供了用户名/密码，用户会被赋予超级权限.</p>
<h3 id="MYSQL-USER-MYSQL-PASSWORD"><a href="#MYSQL-USER-MYSQL-PASSWORD" class="headerlink" title="MYSQL_USER, MYSQL_PASSWORD"></a><code>MYSQL_USER</code>, <code>MYSQL_PASSWORD</code></h3><p>可选变量，用于创建新用户和密码，用户将获得超级管理员权限，两个参数都是必须的.</p>
<p>注意：不需要使用该机制来创建root超级用户，默认使用 <code>MYSQL_ROOT_PASSWORD</code> 来创建密码</p>
<h3 id="MYSQL-ALLOW-EMPTY-PASSWORD"><a href="#MYSQL-ALLOW-EMPTY-PASSWORD" class="headerlink" title="MYSQL_ALLOW_EMPTY_PASSWORD"></a><code>MYSQL_ALLOW_EMPTY_PASSWORD</code></h3><p>可选变量，设置非空值（如yes），允许root用户无密码启动容器. <em>注意</em>: 除非你知道你在做什么，否则不建议设置为 <code>yes</code> ,因为这将使mysql实例完全不受保护,允许所有人获得完全的超级用户权限.</p>
<h3 id="MYSQL-RANDOM-ROOT-PASSWORD"><a href="#MYSQL-RANDOM-ROOT-PASSWORD" class="headerlink" title="MYSQL_RANDOM_ROOT_PASSWORD"></a><code>MYSQL_RANDOM_ROOT_PASSWORD</code></h3><p>可选变量，设置非空值（如yes）,使用pwgen , 为root用户随机生成密码 .密码将被打印.</p>
<h3 id="MYSQL-ONETIME-PASSWORD"><a href="#MYSQL-ONETIME-PASSWORD" class="headerlink" title="MYSQL_ONETIME_PASSWORD"></a><code>MYSQL_ONETIME_PASSWORD</code></h3><p>设置用户 初始化完成后过期，在首次登录时候强制修改密码. 任何非空值将激活这个配置，注意：仅支持5.6+版本，以下版本会报错</p>
<h3 id="MYSQL-INITDB-SKIP-TZINFO"><a href="#MYSQL-INITDB-SKIP-TZINFO" class="headerlink" title="MYSQL_INITDB_SKIP_TZINFO"></a><code>MYSQL_INITDB_SKIP_TZINFO</code></h3><p>默认，entrypoint脚本自动加载<code>CONVERT_TZ()</code>函数需要的时区数据，如果不需要，任何非空值都将禁用时区加载</p>
<h2 id="Docker-Secrets"><a href="#Docker-Secrets" class="headerlink" title="Docker Secrets"></a>Docker Secrets</h2><p>通过环境变量传递敏感信息，还有另一种方法, <code>_FILE</code>  可以附加到前面列的环境变量，使得可以从文件中的变量初始化脚本，特别是，这可以用于存在<code>/run/secrets/&lt;secret_name&gt;</code>中的docker screts从加载密码, 如 ：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ docker run --name some-mysql -e MYSQL_ROOT_PASSWORD_FILE=/run/secrets/mysql-root -d mysql:tag</span><br></pre></td></tr></table></figure>
<p>目前仅支持： <code>MYSQL_ROOT_PASSWORD</code>, <code>MYSQL_ROOT_HOST</code>, <code>MYSQL_DATABASE</code>, <code>MYSQL_USER</code>, 和<code>MYSQL_PASSWORD</code>.</p>
<h1 id="初始化新实例"><a href="#初始化新实例" class="headerlink" title="初始化新实例"></a>初始化新实例</h1><p>刚启动容器,指定名字的新数据库会被创建，并且根据提供的变量初始化. 此外,它将执行扩展名为<code>.sh</code>, <code>.sql</code> 和 <code>.sql.gz</code> （ <code>/docker-entrypoint-initdb.d</code>文件夹中）.文件将按照字幕顺序执行. 你可以轻松使用dump备份填充，. 默认情况下，sql文件将被保存在 <code>MYSQL_DATABASE</code> 指定的数据库中.</p>
<h1 id="Caveats-告诫"><a href="#Caveats-告诫" class="headerlink" title="Caveats//告诫"></a>Caveats//告诫</h1><h2 id="数据存储在哪里"><a href="#数据存储在哪里" class="headerlink" title="数据存储在哪里"></a>数据存储在哪里</h2><p>重要内容：有几种方式在容器运行时存储数据. 我们推荐 <code>mysql</code> 用户熟悉可用的选项,包括:</p>
<ul>
<li>让docker使用自己的内部volume 将数据库文件写入主机系统上的磁盘（而不在容器内）从而管理数据库数据的存储。这也是默认的配置，也非常简单透明。缺点是相比直接部署<strong>找文件困难</strong>.</li>
<li>在主机上创建一个数据目录，并将其装载到容器内部的一个目录中，使得数据库文件放置在主机已知的位置上，更轻松访问文件，缺点是需要确保目录存在，且有权限和安全机制</li>
</ul>
<p>Docker 文档是理解不同存储选项和变量的最好起步，并且有很多博客论坛讨论并提供建议，我们将简单展示基本过程:</p>
<ol>
<li><p>创建文件夹在主机如 <code>/my/own/datadir</code>.</p>
</li>
<li><p>启动 <code>mysql</code> 容器</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ docker run --name some-mysql -v /my/own/datadir:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag</span><br></pre></td></tr></table></figure>
<p><code>-v /my/own/datadir:/var/lib/mysql</code> 将 <code>/my/own/datadir</code> 目录从主机装入容器中作为 <code>/var/lib/mysql</code>  默认不传-v情况下，mysql将写入其他数据文件.</p>
</li>
</ol>
<h2 id="直到初始化完成才有连接"><a href="#直到初始化完成才有连接" class="headerlink" title="直到初始化完成才有连接"></a>直到初始化完成才有连接</h2><p>如果容器启动没有初始化数据库，则创建默认数据库. 初始化完成之前不会接受传入连接. 在使用自动化工具如 <code>docker-compose</code>同时启动多个容器时,这可能会导致问题.</p>
<p>如果应用尝试连接不提供服务的mysql，需要继续重试等待连接成功. 官方示例, 详见 <a href="https://github.com/docker-library/wordpress/blob/1b48b4bccd7adb0f7ea1431c7b470a40e186f3da/docker-entrypoint.sh#L195-L235">WordPress</a> or <a href="https://github.com/docker-library/docs/blob/9660a0cccb87d8db842f33bc0578d769caaf3ba9/bonita/stack.yml#L28-L44">Bonita</a>.</p>
<h2 id="现用数据库使用"><a href="#现用数据库使用" class="headerlink" title="现用数据库使用"></a>现用数据库使用</h2><p>如果在一个有mysql数据目录的volume启动mqsql，应省略 <code>$MYSQL_ROOT_PASSWORD</code>命令; 及时填写也不会生效, 且不会更改预先存在的数据库.</p>
<h2 id="以任意用户身份运行"><a href="#以任意用户身份运行" class="headerlink" title="以任意用户身份运行"></a>以任意用户身份运行</h2><p>如果你正确设置了目录权限，或者你需要使用特定的uid/gid运行mysqld，则可以通过 <code>--user</code> 设为任意值（root/0外）来实现所需的权限/配置:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ mkdir data</span><br><span class="line">$ ls -lnd data</span><br><span class="line">drwxr-xr-x 2 1000 1000 4096 Aug 27 15:54 data</span><br><span class="line">$ docker run -v <span class="string">&quot;<span class="variable">$PWD</span>/data&quot;</span>:/var/lib/mysql --user 1000:1000 --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag</span><br></pre></td></tr></table></figure>
<h2 id="创建备份"><a href="#创建备份" class="headerlink" title="创建备份"></a>创建备份</h2><p>大多数工具都会正常工作,尽管他们的使用在某些情况下可能有点复杂， 以确保可以访问mysqld服务器，确保这一点的一个简单方法是使用 <code>docker exec</code> 并从同一容器运行工具，如:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ docker <span class="built_in">exec</span> some-mysql sh -c <span class="string">&#x27;exec mysqldump --all-databases -uroot -p&quot;$MYSQL_ROOT_PASSWORD&quot;&#x27;</span> &gt; /some/path/on/your/host/all-databases.sql</span><br></pre></td></tr></table></figure>
<h2 id="从备份还原数据"><a href="#从备份还原数据" class="headerlink" title="从备份还原数据"></a>从备份还原数据</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ docker <span class="built_in">exec</span> -i some-mysql sh -c <span class="string">&#x27;exec mysql -uroot -p&quot;$MYSQL_ROOT_PASSWORD&quot;&#x27;</span> &lt; /some/path/on/your/host/all-databases.sqlwith any relevant licenses <span class="keyword">for</span> all software contained within.1</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>prototype</title>
    <url>/2021/03/07/2021-03-07-prototype/</url>
    <content><![CDATA[<h1 id="Prototype"><a href="#Prototype" class="headerlink" title="Prototype"></a>Prototype</h1><p>含义：proto（/ˈproʊtə/）原始, 原型, 原始的</p>
<p>目的：补充JavaScript对于对象的支持，通过protype来实现class中的method</p>
<p>过程：熟悉实例对象<--->构造函数<--->原型 三者之间的关系</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//构造函数 创建对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dog</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> dog = <span class="keyword">new</span> Dog();<span class="comment">//Person 为构造函数,person为实例对象</span></span><br><span class="line">dog.name = <span class="string">&#x27;柯基&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(dog.name) <span class="comment">// 柯基</span></span><br></pre></td></tr></table></figure>
<ul>
<li>构造函数通过prototype访问原型（一个类的属性，对象都可以访问）</li>
<li>实例对象通过 <code>_proto_</code> 访问原型 === 构造函数通过<code>prototype</code>访问原型（原型也有<code>_proto_</code>）</li>
<li>实例原型通过<code>constructor</code>访问构造函数(Dog=== Dog.prototype.constructor)</li>
</ul>
<p><img src="../img/image-20210224154735705.png" alt="image-20210224154735705"></p>
<ul>
<li>原型遵循向上原则，即找不到就不断向上（prototype）查询</li>
<li>原型因为不停延长形成链，称作原型链，但是  <code>Object.prototype.__proto__</code> 的值为 null 跟 Object.prototype 没有原型</li>
<li>原型链大概实现了类（Class）以及继承（Extend）的问题，但它并不是复制，是建立一种关联，通过<code>prototype</code>/<code>_proto_</code> 来访问其他对象的属性和方法，属于委托/借用</li>
</ul>
<h1 id="Extend"><a href="#Extend" class="headerlink" title="Extend"></a>Extend</h1><p>一共分为6种</p>
<ul>
<li>原型链继承</li>
<li>借用构造函数（经典继承）</li>
<li>组合继承</li>
<li>原型式继承</li>
<li>寄生式继承</li>
<li>寄生组合式继承</li>
</ul>
<h2 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.names = [<span class="string">&#x27;kevin&#x27;</span>, <span class="string">&#x27;daisy&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">Child.prototype = <span class="keyword">new</span> Parent();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> child1 = <span class="keyword">new</span> Child();</span><br><span class="line"></span><br><span class="line">child1.names.push(<span class="string">&#x27;yayu&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(child1.names); <span class="comment">// [&quot;kevin&quot;, &quot;daisy&quot;, &quot;yayu&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> child2 = <span class="keyword">new</span> Child();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(child2.names); <span class="comment">// [&quot;kevin&quot;, &quot;daisy&quot;, &quot;yayu&quot;]</span></span><br></pre></td></tr></table></figure>
<p>问题：</p>
<ul>
<li>属性被所有child共享</li>
<li>创建child实例时，不能向parent传参</li>
</ul>
<h2 id="借用构造函数"><a href="#借用构造函数" class="headerlink" title="借用构造函数"></a>借用构造函数</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">    Parent.call(<span class="built_in">this</span>, name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> child1 = <span class="keyword">new</span> Child(<span class="string">&#x27;kevin&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(child1.name); <span class="comment">// kevin</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> child2 = <span class="keyword">new</span> Child(<span class="string">&#x27;daisy&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(child2.name); <span class="comment">// daisy</span></span><br></pre></td></tr></table></figure>
<p>有点：</p>
<ul>
<li>避免引用类型的属性被所有实例共享</li>
<li>可以在Child中间parent传参</li>
</ul>
<p>缺点：</p>
<ul>
<li>方法在构造函数中定义，每次创建势力都会创建一遍方法</li>
</ul>
<h2 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h2><p>以上两种方法的组合,为最常用的继承方式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.colors = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;green&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Parent.prototype.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    Parent.call(<span class="built_in">this</span>, name);</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Child.prototype = <span class="keyword">new</span> Parent();</span><br><span class="line">Child.prototype.constructor = Child;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> child1 = <span class="keyword">new</span> Child(<span class="string">&#x27;kevin&#x27;</span>, <span class="string">&#x27;18&#x27;</span>);</span><br><span class="line"></span><br><span class="line">child1.colors.push(<span class="string">&#x27;black&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(child1.name); <span class="comment">// kevin</span></span><br><span class="line"><span class="built_in">console</span>.log(child1.age); <span class="comment">// 18</span></span><br><span class="line"><span class="built_in">console</span>.log(child1.colors); <span class="comment">// [&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;, &quot;black&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> child2 = <span class="keyword">new</span> Child(<span class="string">&#x27;daisy&#x27;</span>, <span class="string">&#x27;20&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(child2.name); <span class="comment">// daisy</span></span><br><span class="line"><span class="built_in">console</span>.log(child2.age); <span class="comment">// 20</span></span><br><span class="line"><span class="built_in">console</span>.log(child2.colors); <span class="comment">// [&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;]</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>prototype</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode剑指offer53</title>
    <url>/2021/07/16/2021-07-16-Leetcode%E5%89%91%E6%8C%8753/</url>
    <content><![CDATA[<h1 id="LeetCode：剑指-Offer-53"><a href="#LeetCode：剑指-Offer-53" class="headerlink" title="LeetCode：剑指 Offer 53"></a>LeetCode：<a href="https://leetcode-cn.com/problems/zai-pai-xu-shu-zu-zhong-cha-zhao-shu-zi-lcof/">剑指 Offer 53</a></h1><p>打开网页，突然看到日推是easy难度，本来想就几行代码的事情，弄完了就休息了，提交后–傻了眼–:cry:，居然只打败了6.27%的人，草率了</p>
<p>题目：</p>
<blockquote>
<h4 id="剑指-Offer-53-I-在排序数组中查找数字-I"><a href="#剑指-Offer-53-I-在排序数组中查找数字-I" class="headerlink" title="剑指 Offer 53 - I. 在排序数组中查找数字 I"></a><a href="https://leetcode-cn.com/problems/zai-pai-xu-shu-zu-zhong-cha-zhao-shu-zi-lcof/">剑指 Offer 53 - I. 在排序数组中查找数字 I</a></h4><p>统计一个数字在排序数组中出现的次数。</p>
<p>示例 1:</p>
<p>输入: nums = [5,7,7,8,8,10], target = 8<br>输出: 2<br>示例 2:</p>
<p>输入: nums = [5,7,7,8,8,10], target = 6<br>输出: 0</p>
<p>限制：</p>
<p>0 &lt;= 数组长度 &lt;= 50000</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// first commit</span></span><br><span class="line"><span class="comment">// 执行用时：2 ms, 在所有 Java 提交中击败了6.27%的用户</span></span><br><span class="line"><span class="comment">// 内存消耗：40.8 MB, 在所有 Java 提交中击败了98.84%的用户</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">if</span>(nums==<span class="keyword">null</span>||nums.length&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Integer num : nums) &#123;</span><br><span class="line">            <span class="keyword">if</span>(num&gt;target)<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">if</span> (target == num)</span><br><span class="line">                count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>找到了耗时1ms的答案一看，是foreach替换成了for循环 果然下标访问更快一些</p>
<p>以下贴一个最优解：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 就是left right 更快的定位，总体复杂度差不多，不过</span></span><br><span class="line">       <span class="keyword">int</span> left = getRight(nums,target-<span class="number">1</span>);</span><br><span class="line">       <span class="keyword">int</span> right = getRight(nums,target);</span><br><span class="line">       <span class="keyword">return</span> right-left;</span><br><span class="line">            </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getRight</span><span class="params">(<span class="keyword">int</span>[] nums ,<span class="keyword">int</span> target)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = nums.length-<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(left&lt;=right)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (left+right)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid]&gt;target)&#123;</span><br><span class="line">                right = mid-<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid]&lt;=target)&#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Easy</tag>
      </tags>
  </entry>
  <entry>
    <title>1109. 航班预订统计</title>
    <url>/2021/07/26/2021-07-26-%E8%88%AA%E7%8F%AD%E9%A2%84%E8%AE%A2%E7%BB%9F%E8%AE%A1/</url>
    <content><![CDATA[<p>#Leetcode-<a href="https://leetcode-cn.com/problems/corporate-flight-bookings/">1109. 航班预订统计</a></p>
<p>难度中等157收藏分享切换为英文接收动态反馈</p>
<p>这里有 <code>n</code> 个航班，它们分别从 <code>1</code> 到 <code>n</code> 进行编号。</p>
<p>有一份航班预订表 <code>bookings</code> ，表中第 <code>i</code> 条预订记录 <code>bookings[i] = [firsti, lasti, seatsi]</code> 意味着在从 <code>firsti</code> 到 <code>lasti</code> （<strong>包含</strong> <code>firsti</code> 和 <code>lasti</code> ）的 <strong>每个航班</strong> 上预订了 <code>seatsi</code> 个座位。</p>
<p>请你返回一个长度为 <code>n</code> 的数组 <code>answer</code>，其中 <code>answer[i]</code> 是航班 <code>i</code> 上预订的座位总数。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：bookings = [[1,2,10],[2,3,20],[2,5,25]], n = 5</span><br><span class="line">输出：[10,55,45,25,25]</span><br><span class="line">解释：</span><br><span class="line">航班编号        1   2   3   4   5</span><br><span class="line">预订记录 1 ：   10  10</span><br><span class="line">预订记录 2 ：       20  20</span><br><span class="line">预订记录 3 ：       25  25  25  25</span><br><span class="line">总座位数：      10  55  45  25  25</span><br><span class="line">因此，answer = [10,55,45,25,25]</span><br></pre></td></tr></table></figure>
<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：bookings = [[1,2,10],[2,2,15]], n = 2</span><br><span class="line">输出：[10,25]</span><br><span class="line">解释：</span><br><span class="line">航班编号        1   2</span><br><span class="line">预订记录 1 ：   10  10</span><br><span class="line">预订记录 2 ：       15</span><br><span class="line">总座位数：      10  25</span><br><span class="line">因此，answer = [10,25]</span><br></pre></td></tr></table></figure>
<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= n &lt;= 2 * 104</code></li>
<li><code>1 &lt;= bookings.length &lt;= 2 * 104</code></li>
<li><code>bookings[i].length == 3</code></li>
<li><code>1 &lt;= firsti &lt;= lasti &lt;= n</code></li>
<li><code>1 &lt;= seatsi &lt;= 104</code></li>
</ul>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>题目到是很简单，主要做的就是一维数组做个累加，时间复杂度O(N^2)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> corpFlightBookings = <span class="function"><span class="keyword">function</span> (<span class="params">bookings, n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> answer = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++)answer.push(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> bookings) &#123;</span><br><span class="line">    <span class="keyword">const</span> [first, last, seats] = item;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = first; j &lt;= last; j++) &#123;</span><br><span class="line">      answer[j-<span class="number">1</span>] += seats;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> answer;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(corpFlightBookings([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">10</span>], [<span class="number">2</span>, <span class="number">3</span>, <span class="number">20</span>], [<span class="number">2</span>, <span class="number">5</span>, <span class="number">25</span>]], <span class="number">5</span>))</span><br></pre></td></tr></table></figure>
<p>但是时间只超过了50%，就考虑问题</p>
<p>问题应该在O^2的复杂度上</p>
<p>后来想遍历的时候</p>
<ul>
<li>Array(n).fill(0) 代码更优美</li>
<li>把<strong>增量</strong>加在数组里，最后走for循环跑一次就可以降一层for循环</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [first, last, seats] = item;</span><br><span class="line">answer[first - <span class="number">1</span>] += seats;</span><br><span class="line"><span class="keyword">if</span> (last &lt; n) answer[last] -= seats;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Medium</tag>
      </tags>
  </entry>
  <entry>
    <title>second-minimum-node-in-a-binary-tree</title>
    <url>/2021/07/27/2021-07-27-second-minimum-node-in-a-binary-tree/</url>
    <content><![CDATA[<h1 id="Leetcode-671"><a href="#Leetcode-671" class="headerlink" title="Leetcode 671"></a>Leetcode 671</h1><h4 id="671-二叉树中第二小的节点"><a href="#671-二叉树中第二小的节点" class="headerlink" title="671. 二叉树中第二小的节点"></a><a href="https://leetcode-cn.com/problems/second-minimum-node-in-a-binary-tree/">671. 二叉树中第二小的节点</a></h4><p>难度简单198收藏分享切换为英文接收动态反馈</p>
<p>给定一个非空特殊的二叉树，每个节点都是正数，并且每个节点的子节点数量只能为 <code>2</code> 或 <code>0</code>。如果一个节点有两个子节点的话，那么该节点的值等于两个子节点中较小的一个。</p>
<p>更正式地说，<code>root.val = min(root.left.val, root.right.val)</code> 总成立。</p>
<p>给出这样的一个二叉树，你需要输出所有节点中的<strong>第二小的值。</strong>如果第二小的值不存在的话，输出 -1 <strong>。</strong></p>
<p><strong>示例 1：</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2020/10/15/smbt1.jpg" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = [2,2,5,null,null,5,7]</span><br><span class="line">输出：5</span><br><span class="line">解释：最小的值是 2 ，第二小的值是 5 。</span><br></pre></td></tr></table></figure>
<p><strong>示例 2：</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2020/10/15/smbt2.jpg" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：root = [2,2,2]</span><br><span class="line">输出：-1</span><br><span class="line">解释：最小的值是 2, 但是不存在第二小的值。</span><br></pre></td></tr></table></figure>
<p><strong>提示：</strong></p>
<ul>
<li>树中节点数目在范围 <code>[1, 25]</code> 内</li>
<li><code>1 &lt;= Node.val &lt;= 231 - 1</code></li>
<li>对于树中每个节点 <code>root.val == min(root.left.val, root.right.val)</code></li>
</ul>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>如题意，父节点就是最小值，借鉴了答案，递归条件写错了</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val, left, right) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.left = (left===undefined ? null : left)</span></span><br><span class="line"><span class="comment"> *     this.right = (right===undefined ? null : right)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> findSecondMinimumValue = <span class="function"><span class="keyword">function</span> (<span class="params">root</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> ans = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">const</span> parentValue = root.val;<span class="comment">//root value</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> dfs = <span class="function">(<span class="params">node</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (node === <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ans !== -<span class="number">1</span> &amp;&amp; node.val &gt;= ans) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node.val &gt; parentValue) &#123;</span><br><span class="line">            ans = node.val;</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(node.left);</span><br><span class="line">        dfs(node.right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dfs(root);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Easy</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode144</title>
    <url>/2021/07/31/2021-07-31-Leetcode144/</url>
    <content><![CDATA[<h4 id="144-二叉树的前序遍历"><a href="#144-二叉树的前序遍历" class="headerlink" title="144. 二叉树的前序遍历"></a><a href="https://leetcode-cn.com/problems/binary-tree-preorder-traversal/">144. 二叉树的前序遍历</a></h4><p>总体思路递归，easy等级</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val, left, right) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.left = (left===undefined ? null : left)</span></span><br><span class="line"><span class="comment"> *     this.right = (right===undefined ? null : right)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> preorderTraversal = <span class="function"><span class="keyword">function</span> (<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> ans = [];</span><br><span class="line">    recursion(root, ans);</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">recursion</span>(<span class="params">root, ans</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root === <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">    ans.push(root.val);</span><br><span class="line">    recursion(root.left, ans)</span><br><span class="line">    recursion(root.right, ans)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Easy</tag>
      </tags>
  </entry>
  <entry>
    <title>2021-08-02-Leetcode743</title>
    <url>/2021/08/02/2021-08-02-Leetcode743/</url>
    <content><![CDATA[<h4 id="743-网络延迟时间"><a href="#743-网络延迟时间" class="headerlink" title="743. 网络延迟时间"></a><a href="https://leetcode-cn.com/problems/network-delay-time/">743. 网络延迟时间</a></h4><p>难度中等371收藏分享切换为英文接收动态反馈</p>
<p>有 <code>n</code> 个网络节点，标记为 <code>1</code> 到 <code>n</code>。</p>
<p>给你一个列表 <code>times</code>，表示信号经过 <strong>有向</strong> 边的传递时间。 <code>times[i] = (ui, vi, wi)</code>，其中 <code>ui</code> 是源节点，<code>vi</code> 是目标节点， <code>wi</code> 是一个信号从源节点传递到目标节点的时间。</p>
<p>现在，从某个节点 <code>K</code> 发出一个信号。需要多久才能使所有节点都收到信号？如果不能使所有节点收到信号，返回 <code>-1</code> 。</p>
<p><strong>示例 1：</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2019/05/23/931_example_1.png" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：times = [[2,1,1],[2,3,1],[3,4,1]], n = 4, k = 2</span><br><span class="line">输出：2</span><br></pre></td></tr></table></figure>
<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：times = [[1,2,1]], n = 2, k = 1</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure>
<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：times = [[1,2,1]], n = 2, k = 2</span><br><span class="line">输出：-1</span><br></pre></td></tr></table></figure>
<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= k &lt;= n &lt;= 100</code></li>
<li><code>1 &lt;= times.length &lt;= 6000</code></li>
<li><code>times[i].length == 3</code></li>
<li><code>1 &lt;= ui, vi &lt;= n</code></li>
<li><code>ui != vi</code></li>
<li><code>0 &lt;= wi &lt;= 100</code></li>
<li>所有 <code>(ui, vi)</code> 对都 <strong>互不相同</strong>（即，不含重复边）</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>明显的思路，</p>
<ul>
<li>Dijkstra</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> networkDelayTime = <span class="function"><span class="keyword">function</span> (<span class="params">times, n, k</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> INF = <span class="built_in">Number</span>.MAX_SAFE_INTEGER;<span class="comment">// max value</span></span><br><span class="line">    <span class="keyword">const</span> g = <span class="keyword">new</span> <span class="built_in">Array</span>(n).fill(INF).map(<span class="function">() =&gt;</span> <span class="keyword">new</span> <span class="built_in">Array</span>(n).fill(INF));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> t <span class="keyword">of</span> times) &#123;</span><br><span class="line">        <span class="keyword">const</span> x = t[<span class="number">0</span>] - <span class="number">1</span>, y = t[<span class="number">1</span>] - <span class="number">1</span>;</span><br><span class="line">        g[x][y] = t[<span class="number">2</span>];<span class="comment">// 赋值</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> dist = <span class="keyword">new</span> <span class="built_in">Array</span>(n).fill(INF);<span class="comment">//distance</span></span><br><span class="line">    dist[k - <span class="number">1</span>] = <span class="number">0</span>;<span class="comment">//k 本身为0</span></span><br><span class="line">    <span class="keyword">const</span> used = <span class="keyword">new</span> <span class="built_in">Array</span>(n).fill(<span class="literal">false</span>);<span class="comment">//遍历标记</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;<span class="comment">//遍历每个顶点</span></span><br><span class="line">        <span class="keyword">let</span> x = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> y = <span class="number">0</span>; y &lt; n; ++y) &#123;</span><br><span class="line">            <span class="comment">// 未标记过并且(x为-1 或者 y的距离小于x的距离) 准备需要更新的节点</span></span><br><span class="line">            <span class="keyword">if</span> (!used[y] &amp;&amp; (x === -<span class="number">1</span> || dist[y] &lt; dist[x])) &#123;</span><br><span class="line">                x = y;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        used[x] = <span class="literal">true</span>;<span class="comment">//遍历标记</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> y = <span class="number">0</span>; y &lt; n; ++y) &#123;</span><br><span class="line">            <span class="comment">// k到x的最小值</span></span><br><span class="line">            dist[y] = <span class="built_in">Math</span>.min(dist[y], dist[x] + g[x][y]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> ans = <span class="built_in">Math</span>.max(...dist);<span class="comment">//最小值的最大值</span></span><br><span class="line">    <span class="keyword">return</span> ans === INF ? -<span class="number">1</span> : ans;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(networkDelayTime([[<span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>], [<span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>]], <span class="number">4</span>, <span class="number">2</span>))</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Medium</tag>
      </tags>
  </entry>
  <entry>
    <title>mongodbTransaction</title>
    <url>/2021/08/02/2021-08-02-mongodbTransaction/</url>
    <content><![CDATA[<p>前几天面试官说mongodb5出了事务，就赶紧来看看，毕竟业务层处理还是挺麻烦的，以前只支持操作的原子性</p>
]]></content>
      <categories>
        <category>mongoDB</category>
      </categories>
      <tags>
        <tag>transactions</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode581</title>
    <url>/2021/08/03/2021-08-03-Leetcode581/</url>
    <content><![CDATA[<h4 id="581-最短无序连续子数组"><a href="#581-最短无序连续子数组" class="headerlink" title="581. 最短无序连续子数组"></a><a href="https://leetcode-cn.com/problems/shortest-unsorted-continuous-subarray/">581. 最短无序连续子数组</a></h4><p>难度中等609收藏分享切换为英文接收动态反馈</p>
<p>给你一个整数数组 <code>nums</code> ，你需要找出一个 <strong>连续子数组</strong> ，如果对这个子数组进行升序排序，那么整个数组都会变为升序排序。</p>
<p>请你找出符合题意的 <strong>最短</strong> 子数组，并输出它的长度。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [2,6,4,8,10,9,15]</span><br><span class="line">输出：5</span><br><span class="line">解释：你只需要对 [6, 4, 8, 10, 9] 进行升序排序，那么整个表都会变为升序排序。</span><br></pre></td></tr></table></figure>
<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [1,2,3,4]</span><br><span class="line">输出：0</span><br></pre></td></tr></table></figure>
<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [1]</span><br><span class="line">输出：0</span><br></pre></td></tr></table></figure>
<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 104</code></li>
<li><code>-105 &lt;= nums[i] &lt;= 105</code></li>
</ul>
<p><strong>进阶：</strong>你可以设计一个时间复杂度为 <code>O(n)</code> 的解决方案吗？</p>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>目前想到的方法</p>
<ul>
<li>偏数学，找到最大最小值为界</li>
<li>排序找差别，确定子数组两边下标</li>
<li>排序后用二分（稍微提升）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> findUnsortedSubarray = <span class="function"><span class="keyword">function</span> (<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> start, end = -<span class="number">1</span>, point = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> max = -<span class="number">100000</span>, min = <span class="number">10000</span>;<span class="comment">//题目给的大小区间</span></span><br><span class="line">    <span class="keyword">while</span> (point &lt; nums.length) &#123;</span><br><span class="line">        <span class="comment">// 找分界点</span></span><br><span class="line">        max &gt; nums[point] ? end = point : max = nums[point]</span><br><span class="line">        min &lt; nums[nums.length - point - <span class="number">1</span>] ? start = nums.length - point - <span class="number">1</span> : min = nums[nums.length - point - <span class="number">1</span>]</span><br><span class="line">        point++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> end === -<span class="number">1</span> ? <span class="number">0</span> : end - start + <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Medium</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode611</title>
    <url>/2021/08/04/2021-08-04-LeetCode611/</url>
    <content><![CDATA[<h4 id="611-有效三角形的个数"><a href="#611-有效三角形的个数" class="headerlink" title="611. 有效三角形的个数"></a><a href="https://leetcode-cn.com/problems/valid-triangle-number/">611. 有效三角形的个数</a></h4><p>难度中等230收藏分享切换为英文接收动态反馈</p>
<p>给定一个包含非负整数的数组，你的任务是统计其中可以组成三角形三条边的三元组个数。</p>
<p><strong>示例 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: [2,2,3,4]</span><br><span class="line">输出: 3</span><br><span class="line">解释:</span><br><span class="line">有效的组合是: </span><br><span class="line">2,3,4 (使用第一个 2)</span><br><span class="line">2,3,4 (使用第二个 2)</span><br><span class="line">2,2,3</span><br></pre></td></tr></table></figure>
<p><strong>注意:</strong></p>
<ol>
<li>数组长度不超过1000。</li>
<li>数组里整数的范围为 [0, 1000]。</li>
</ol>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>排序后根据，a+b&gt;c 套两层for循环确定ab，理论上还可以再套一层for循环确定c，但是复杂度太高，达到o(n^3)的复杂度，我们可以通过二分法，找到a+b<c 和a+b>c的极限值，极限左边都是符合要求的数据，从而n降为lgn的复杂度</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> triangleNumber = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.length &lt; <span class="number">3</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> ans = <span class="number">0</span>;</span><br><span class="line">    nums = nums.sort();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.length ; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; nums.length ; j++) &#123;</span><br><span class="line">            <span class="comment">// 二分</span></span><br><span class="line">            <span class="keyword">let</span> left = j + <span class="number">1</span>, right = nums.length - <span class="number">1</span>, k = j;</span><br><span class="line">            <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">                <span class="keyword">const</span> mid = <span class="built_in">Math</span>.floor((left + right) / <span class="number">2</span>);</span><br><span class="line">                <span class="keyword">if</span> (nums[mid] &lt; nums[i] + nums[j]) &#123;</span><br><span class="line">                    k = mid;</span><br><span class="line">                    left = mid + <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    right = mid - <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ans += k - j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Medium</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode233</title>
    <url>/2021/08/13/2021-08-13-Leetcode233/</url>
    <content><![CDATA[<h4 id="233-数字-1-的个数"><a href="#233-数字-1-的个数" class="headerlink" title="233. 数字 1 的个数"></a><a href="https://leetcode-cn.com/problems/number-of-digit-one/">233. 数字 1 的个数</a></h4><p>难度困难303收藏分享切换为英文接收动态反馈</p>
<p>给定一个整数 <code>n</code>，计算所有小于等于 <code>n</code> 的非负整数中数字 <code>1</code> 出现的个数。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：n = 13</span><br><span class="line">输出：6</span><br></pre></td></tr></table></figure>
<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：n = 0</span><br><span class="line">输出：0</span><br></pre></td></tr></table></figure>
<p><strong>提示：</strong></p>
<ul>
<li><code>0 &lt;= n &lt;= 2 * 109</code></li>
</ul>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>拿到题目很奇怪，这道题暴力解答也就是个稍稍大于o(n)的复杂度，作为hard题目出现，只能说明暴力会超时</p>
<p>那么先回顾一下整体的超时代码段</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">n</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> countDigitOne = <span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> counter = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = n; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">let</span> num = i;</span><br><span class="line">        <span class="keyword">while</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (num % <span class="number">10</span> === <span class="number">1</span>) &#123;</span><br><span class="line">                counter++;</span><br><span class="line">            &#125;</span><br><span class="line">            num = <span class="built_in">Math</span>.floor(num / <span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> counter</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>超时之后我就开始找规律，个位1只会出现1次，十位只会出现10次，百位是100次，之后是数学方法就不解了（懒orz）,答案的主要部分</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> k = <span class="number">0</span>; n &gt;= mulk; ++k) &#123;</span><br><span class="line">      ans += (<span class="built_in">Math</span>.floor(n / (mulk * <span class="number">10</span>))) * mulk + <span class="built_in">Math</span>.min(<span class="built_in">Math</span>.max(n % (mulk * <span class="number">10</span>) - mulk + <span class="number">1</span>, <span class="number">0</span>), mulk);</span><br><span class="line">      mulk *= <span class="number">10</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Hard</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode133</title>
    <url>/2021/08/13/2021-08-13-Leetcode133/</url>
    <content><![CDATA[<h4 id="133-克隆图"><a href="#133-克隆图" class="headerlink" title="133. 克隆图"></a><a href="https://leetcode-cn.com/problems/clone-graph/">133. 克隆图</a></h4><p>难度中等390收藏分享切换为英文接收动态反馈</p>
<p>给你无向 <strong><a href="https://baike.baidu.com/item/连通图/6460995?fr=aladdin">连通</a></strong> 图中一个节点的引用，请你返回该图的 <a href="https://baike.baidu.com/item/深拷贝/22785317?fr=aladdin"><strong>深拷贝</strong></a>（克隆）。</p>
<p>图中的每个节点都包含它的值 <code>val</code>（<code>int</code>） 和其邻居的列表（<code>list[Node]</code>）。</p>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>dfs就可以解决</p>
<p>题目提供了索引就是val，所以map的key可以使用val来简化体积</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * // Definition for a Node.</span></span><br><span class="line"><span class="comment"> * function Node(val, neighbors) &#123;</span></span><br><span class="line"><span class="comment"> *    this.val = val === undefined ? 0 : val;</span></span><br><span class="line"><span class="comment"> *    this.neighbors = neighbors === undefined ? [] : neighbors;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Node&#125;</span> <span class="variable">node</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;Node&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> cloneGraph = <span class="function"><span class="keyword">function</span> (<span class="params">node</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!node) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">let</span> isVisit = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">    <span class="comment">//dfs</span></span><br><span class="line">    <span class="keyword">const</span> dfs = <span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> newNode = <span class="keyword">new</span> Node(item.val);</span><br><span class="line">        isVisit.set(item.val, newNode);</span><br><span class="line">        <span class="comment">// console.log(&#x27;isVist===&gt;&#x27;,isVisit)</span></span><br><span class="line">        <span class="comment">// deep clone</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> neighbor <span class="keyword">of</span> item.neighbors) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!isVisit.has(neighbor.val)) &#123;</span><br><span class="line">                dfs(neighbor);</span><br><span class="line">            &#125;</span><br><span class="line">            newNode.neighbors.push(isVisit.get(neighbor.val))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(node);</span><br><span class="line">    <span class="keyword">return</span> isVisit.get(node.val);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Medium</tag>
      </tags>
  </entry>
  <entry>
    <title>EventLoop Source</title>
    <url>/2020/07/24/2020-07-23-EventLoop2/</url>
    <content><![CDATA[<h1 id="eventLoop"><a href="#eventLoop" class="headerlink" title="eventLoop"></a>eventLoop</h1><p>之前也有过章节<br><a href="/2020/04/10/2020-04-10-eventloop/">node整理</a><br><a href="/Nodejs/">Node.js</a></p>
<p>有看到<a href="https://zhuanlan.zhihu.com/p/34182184">石墨技术文档</a></p>
<p><a href="https://cnodejs.org/topic/5a9108d78d6e16e56bb80882">cnode技术文档</a>，作者：youth7</p>
<p>记录以下知识点：</p>
<ul>
<li><strong>nodejs的event是基于libuv</strong>，<strong>浏览器的event loop则在<a href="https://www.w3.org/TR/html5/webappapis.html#event-loops">html5的规范</a>中明确定义</strong>，两个事物有明显的区别</li>
<li><code>process.nextTick()</code>在6个阶段结束的时候都会执行</li>
</ul>
<h2 id="eventLoop-1"><a href="#eventLoop-1" class="headerlink" title="eventLoop"></a>eventLoop</h2><table>
<thead>
<tr>
<th>timers</th>
<th>执行<code>setTimeout()</code> 和 <code>setInterval()</code>中到期的callback</th>
</tr>
</thead>
<tbody>
<tr>
<td>I/O callbacks</td>
<td>上一轮循环中有少数的I/Ocallback会被延迟到这一轮的这一阶段执行</td>
</tr>
<tr>
<td>idle, prepare</td>
<td>仅内部使用</td>
</tr>
<tr>
<td>poll</td>
<td>最为重要的阶段，执行I/O callback，在适当的条件下会阻塞在这个阶段</td>
</tr>
<tr>
<td>check</td>
<td>执行setImmediate的callback</td>
</tr>
<tr>
<td>close callbacks</td>
<td>执行close事件的callback，例如<code>socket.on(&quot;close&quot;,func)</code></td>
</tr>
</tbody>
</table>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">   ┌───────────────────────┐</span><br><span class="line">┌─&gt;│        timers         │</span><br><span class="line">│  └──────────┬────────────┘</span><br><span class="line">│  ┌──────────┴────────────┐</span><br><span class="line">│  │     I/O callbacks     │</span><br><span class="line">│  └──────────┬────────────┘</span><br><span class="line">│  ┌──────────┴────────────┐</span><br><span class="line">│  │     idle, prepare     │</span><br><span class="line">│  └──────────┬────────────┘      ┌───────────────┐</span><br><span class="line">│  ┌──────────┴────────────┐      │   incoming:   │</span><br><span class="line">│  │         poll          │&lt;─────┤  connections, │</span><br><span class="line">│  └──────────┬────────────┘      │   data, etc.  │</span><br><span class="line">│  ┌──────────┴────────────┐      └───────────────┘</span><br><span class="line">│  │        check          │</span><br><span class="line">│  └──────────┬────────────┘</span><br><span class="line">│  ┌──────────┴────────────┐</span><br><span class="line">└──┤    close callbacks    │</span><br><span class="line">   └───────────────────────┘</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"># /deps/uv/src/unix/core.<span class="function">c</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">uv_run</span><span class="params">(<span class="keyword">uv_loop_t</span>* loop, uv_run_mode mode)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> timeout;</span><br><span class="line">  <span class="keyword">int</span> r;</span><br><span class="line">  <span class="keyword">int</span> ran_pending;</span><br><span class="line"></span><br><span class="line">  r = <span class="built_in">uv__loop_alive</span>(loop);</span><br><span class="line">  <span class="comment">// if(uv_has_active_hanles||uv_has_active_reqs || lop-&gt;closing_handles!=NULL)retrun true </span></span><br><span class="line">  <span class="keyword">if</span> (!r)</span><br><span class="line">    <span class="built_in">uv__update_time</span>(loop);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (r != <span class="number">0</span> &amp;&amp; loop-&gt;stop_flag == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">uv__update_time</span>(loop);</span><br><span class="line">    <span class="comment">// main</span></span><br><span class="line">    <span class="built_in">uv__run_timers</span>(loop);<span class="comment">//timer phase</span></span><br><span class="line">    ran_pending = <span class="built_in">uv__run_pending</span>(loop);<span class="comment">//IO callback pharse</span></span><br><span class="line">    <span class="built_in">uv__run_idle</span>(loop);<span class="comment">//idle phase</span></span><br><span class="line">    <span class="built_in">uv__run_prepare</span>(loop);<span class="comment">// prepare phase</span></span><br><span class="line">    <span class="comment">// main end</span></span><br><span class="line"></span><br><span class="line">    timeout = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> ((mode == UV_RUN_ONCE &amp;&amp; !ran_pending) || mode == UV_RUN_DEFAULT)</span><br><span class="line">      timeout = <span class="built_in">uv_backend_timeout</span>(loop);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">uv__io_poll</span>(loop, timeout);<span class="comment">//poll phase</span></span><br><span class="line">    <span class="built_in">uv__run_check</span>(loop);<span class="comment">//check phase</span></span><br><span class="line">    <span class="built_in">uv__run_closing_handles</span>(loop);<span class="comment">//closing pharse</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mode == UV_RUN_ONCE) &#123;</span><br><span class="line">      <span class="comment">/* UV_RUN_ONCE implies forward progress: at least one callback must have</span></span><br><span class="line"><span class="comment">       * been invoked when it returns. uv__io_poll() can return without doing</span></span><br><span class="line"><span class="comment">       * I/O (meaning: no callbacks) when its timeout expires - which means we</span></span><br><span class="line"><span class="comment">       * have pending timers that satisfy the forward progress constraint.</span></span><br><span class="line"><span class="comment">       *</span></span><br><span class="line"><span class="comment">       * UV_RUN_NOWAIT makes no guarantees about progress so it&#x27;s omitted from</span></span><br><span class="line"><span class="comment">       * the check.</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="comment">// UV_RUN_ONCE 至少有一个回调执行,不然该循环就空转了，满足前进要求</span></span><br><span class="line">      <span class="comment">// 这也是[文章](https://zehai.info/2020/04/10/2020-04-10-eventloop/)中写到：</span></span><br><span class="line">      <span class="comment">// poll为空，eventloop将检查timer是否有快到的，如果需要执行，eventloop将要进入timers阶段来顺序执行timer callback</span></span><br><span class="line">      <span class="built_in">uv__update_time</span>(loop);</span><br><span class="line">      <span class="built_in">uv__run_timers</span>(loop);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    r = <span class="built_in">uv__loop_alive</span>(loop);</span><br><span class="line">    <span class="keyword">if</span> (mode == UV_RUN_ONCE || mode == UV_RUN_NOWAIT)</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* The if statement lets gcc compile it to a conditional store. Avoids</span></span><br><span class="line"><span class="comment">   * dirtying a cache line.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">if</span> (loop-&gt;stop_flag != <span class="number">0</span>)</span><br><span class="line">    loop-&gt;stop_flag = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="timers-phase"><a href="#timers-phase" class="headerlink" title="timers phase"></a>timers phase</h2><p>执行<code>setTimeout()</code> 和 <code>setInterval()</code>中到期的callback</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">uv__run_timers</span><span class="params">(<span class="keyword">uv_loop_t</span>* loop)</span> </span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">heap_node</span>* <span class="title">heap_node</span>;</span></span><br><span class="line">  <span class="keyword">uv_timer_t</span>* handle;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">    heap_node = <span class="built_in">heap_min</span>(<span class="built_in">timer_heap</span>(loop));</span><br><span class="line">    <span class="keyword">if</span> (heap_node == <span class="literal">NULL</span>)</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">		<span class="comment">// 取出堆中最快要被执行的timer</span></span><br><span class="line">    <span class="comment">// #define container_of(ptr, type, member) </span></span><br><span class="line">  	<span class="comment">// ((type *) ((char *) (ptr) - offsetof(type, member)))</span></span><br><span class="line">    <span class="comment">// 没看懂 handle是怎么生成的</span></span><br><span class="line">    handle = <span class="built_in">container_of</span>(heap_node, <span class="keyword">uv_timer_t</span>, heap_node);</span><br><span class="line">    <span class="keyword">if</span> (handle-&gt;timeout &gt; loop-&gt;time)<span class="comment">//执行时间大于eventloop循环一次时间，退出phase下次再说</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">uv_timer_stop</span>(handle);<span class="comment">// remove handle</span></span><br><span class="line">    <span class="built_in">uv_timer_again</span>(handle);<span class="comment">// 多次重复的timer再塞进去</span></span><br><span class="line">    handle-&gt;<span class="built_in">timer_cb</span>(handle);<span class="comment">// invoke callback</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="I-O-callbacks"><a href="#I-O-callbacks" class="headerlink" title="I/O callbacks"></a>I/O callbacks</h2><p>上一轮循环中有少数的I/Ocallback会被延迟到这一轮的这一阶段执行</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//deps/uv/src/unix/core.c</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">uv__run_pending</span><span class="params">(<span class="keyword">uv_loop_t</span>* loop)</span> </span>&#123;</span><br><span class="line">  QUEUE* q;</span><br><span class="line">  QUEUE pq;</span><br><span class="line">  <span class="keyword">uv__io_t</span>* w;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">QUEUE_EMPTY</span>(&amp;loop-&gt;pending_queue))<span class="comment">//isEmpty</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">QUEUE_MOVE</span>(&amp;loop-&gt;pending_queue, &amp;pq);<span class="comment">//move</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (!<span class="built_in">QUEUE_EMPTY</span>(&amp;pq)) &#123;</span><br><span class="line">    q = <span class="built_in">QUEUE_HEAD</span>(&amp;pq);<span class="comment">//find</span></span><br><span class="line">    <span class="built_in">QUEUE_REMOVE</span>(q);<span class="comment">//pop</span></span><br><span class="line">    <span class="built_in">QUEUE_INIT</span>(q);</span><br><span class="line">    w = <span class="built_in">QUEUE_DATA</span>(q, <span class="keyword">uv__io_t</span>, pending_queue);</span><br><span class="line">    w-&gt;<span class="built_in">cb</span>(loop, w, POLLOUT);<span class="comment">//unitl queue empty</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Idle-and-prepare-phase"><a href="#Idle-and-prepare-phase" class="headerlink" title="Idle and prepare phase"></a>Idle and prepare phase</h2><p>/<em> loop </em>/</p>
<p>void uv__run_idle(uv_loop_t* loop);</p>
<p>void uv__run_check(uv_loop_t* loop);</p>
<p>void uv__run_prepare(uv_loop_t* loop);</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> uv__run_#<span class="meta">#name(uv_loop_t* loop) &#123;</span></span><br><span class="line">  uv_#<span class="meta">#name##_t* h;</span></span><br><span class="line">  QUEUE queue;</span><br><span class="line">  QUEUE* q;</span><br><span class="line">  <span class="built_in">QUEUE_MOVE</span>(&amp;loop-&gt;name##_handles, &amp;queue);<span class="comment">//QUEUE_MOVE</span></span><br><span class="line">  <span class="keyword">while</span> (!<span class="built_in">QUEUE_EMPTY</span>(&amp;queue)) &#123;<span class="comment">//util empty</span></span><br><span class="line">    q = <span class="built_in">QUEUE_HEAD</span>(&amp;queue);<span class="comment">//pop</span></span><br><span class="line">    h = <span class="built_in">QUEUE_DATA</span>(q, uv_#<span class="meta">#name##_t, queue);<span class="comment">//element-&gt;handle</span></span></span><br><span class="line">    <span class="built_in">QUEUE_REMOVE</span>(q);<span class="comment">//remove</span></span><br><span class="line">    <span class="built_in">QUEUE_INSERT_TAIL</span>(&amp;loop-&gt;name##_handles, q);<span class="comment">//insert tail</span></span><br><span class="line">    h-&gt;name##_cb(h);<span class="comment">//callback</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure>
<h2 id="poll-phase"><a href="#poll-phase" class="headerlink" title="!!!poll phase!!!"></a>!!!poll phase!!!</h2><p>最为重要的阶段，执行I/O callback，在适当的条件下会阻塞在这个阶段</p>
<blockquote>
<p>可见poll阶段的任务就是阻塞等待监听的事件来临，然后执行对应的callback，其中阻塞是带有超时时间的，以下几种情况都会使得超时时间为0</p>
<ul>
<li>uv_run处于UV_RUN_NOWAIT模式下</li>
<li><code>uv_stop()</code>被调用</li>
<li>没有活跃的handles和request</li>
<li>有活跃的idle handles</li>
<li>有等待关闭的handles</li>
</ul>
<p>如果上述都不符合，则超时时间为距离现在最近的timer；如果没有timer则poll阶段会一直阻塞下去</p>
</blockquote>
<p>个人理解nodejs的服务，大部分时间会被阻塞在这个阶段，而不去执行closing</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 不行了，看不懂了</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">uv__io_poll</span><span class="params">(<span class="keyword">uv_loop_t</span>* loop, <span class="keyword">int</span> timeout)</span> </span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">pollfd</span> <span class="title">events</span>[1024];</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">pollfd</span> <span class="title">pqry</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">pollfd</span>* <span class="title">pe</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">poll_ctl</span> <span class="title">pc</span>;</span></span><br><span class="line">  QUEUE* q;</span><br><span class="line">  <span class="keyword">uv__io_t</span>* w;</span><br><span class="line">  <span class="keyword">uint64_t</span> base;</span><br><span class="line">  <span class="keyword">uint64_t</span> diff;</span><br><span class="line">  <span class="keyword">int</span> have_signals;</span><br><span class="line">  <span class="keyword">int</span> nevents;</span><br><span class="line">  <span class="keyword">int</span> count;</span><br><span class="line">  <span class="keyword">int</span> nfds;</span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line">  <span class="keyword">int</span> rc;</span><br><span class="line">  <span class="keyword">int</span> add_failed;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (loop-&gt;nfds == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">assert</span>(<span class="built_in">QUEUE_EMPTY</span>(&amp;loop-&gt;watcher_queue));</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (!<span class="built_in">QUEUE_EMPTY</span>(&amp;loop-&gt;watcher_queue)) &#123;<span class="comment">//until watcher queue empty</span></span><br><span class="line">    q = <span class="built_in">QUEUE_HEAD</span>(&amp;loop-&gt;watcher_queue);</span><br><span class="line">    <span class="built_in">QUEUE_REMOVE</span>(q);</span><br><span class="line">    <span class="built_in">QUEUE_INIT</span>(q);</span><br><span class="line"></span><br><span class="line">    w = <span class="built_in">QUEUE_DATA</span>(q, <span class="keyword">uv__io_t</span>, watcher_queue);</span><br><span class="line">    <span class="built_in">assert</span>(w-&gt;pevents != <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">assert</span>(w-&gt;fd &gt;= <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">assert</span>(w-&gt;fd &lt; (<span class="keyword">int</span>) loop-&gt;nwatchers);</span><br><span class="line"></span><br><span class="line">    pc.events = w-&gt;pevents;</span><br><span class="line">    pc.fd = w-&gt;fd;</span><br><span class="line"></span><br><span class="line">    add_failed = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (w-&gt;events == <span class="number">0</span>) &#123;</span><br><span class="line">      pc.cmd = PS_ADD;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">pollset_ctl</span>(loop-&gt;backend_fd, &amp;pc, <span class="number">1</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (errno != EINVAL) &#123;</span><br><span class="line">          <span class="built_in">assert</span>(<span class="number">0</span> &amp;&amp; <span class="string">&quot;Failed to add file descriptor (pc.fd) to pollset&quot;</span>);</span><br><span class="line">          <span class="built_in">abort</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* Check if the fd is already in the pollset */</span></span><br><span class="line">        pqry.fd = pc.fd;</span><br><span class="line">        rc = <span class="built_in">pollset_query</span>(loop-&gt;backend_fd, &amp;pqry);</span><br><span class="line">        <span class="built_in"><span class="keyword">switch</span></span> (rc) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">-1</span>:</span><br><span class="line">          <span class="built_in">assert</span>(<span class="number">0</span> &amp;&amp; <span class="string">&quot;Failed to query pollset for file descriptor&quot;</span>);</span><br><span class="line">          <span class="built_in">abort</span>();</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">          <span class="built_in">assert</span>(<span class="number">0</span> &amp;&amp; <span class="string">&quot;Pollset does not contain file descriptor&quot;</span>);</span><br><span class="line">          <span class="built_in">abort</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* If we got here then the pollset already contained the file descriptor even though</span></span><br><span class="line"><span class="comment">         * we didn&#x27;t think it should. This probably shouldn&#x27;t happen, but we can continue. */</span></span><br><span class="line">        add_failed = <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (w-&gt;events != <span class="number">0</span> || add_failed) &#123;</span><br><span class="line">      <span class="comment">/* Modify, potentially removing events -- need to delete then add.</span></span><br><span class="line"><span class="comment">       * Could maybe mod if we knew for sure no events are removed, but</span></span><br><span class="line"><span class="comment">       * content of w-&gt;events is handled above as not reliable (falls back)</span></span><br><span class="line"><span class="comment">       * so may require a pollset_query() which would have to be pretty cheap</span></span><br><span class="line"><span class="comment">       * compared to a PS_DELETE to be worth optimizing. Alternatively, could</span></span><br><span class="line"><span class="comment">       * lazily remove events, squelching them in the mean time. */</span></span><br><span class="line">      pc.cmd = PS_DELETE;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">pollset_ctl</span>(loop-&gt;backend_fd, &amp;pc, <span class="number">1</span>)) &#123;</span><br><span class="line">        <span class="built_in">assert</span>(<span class="number">0</span> &amp;&amp; <span class="string">&quot;Failed to delete file descriptor (pc.fd) from pollset&quot;</span>);</span><br><span class="line">        <span class="built_in">abort</span>();</span><br><span class="line">      &#125;</span><br><span class="line">      pc.cmd = PS_ADD;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">pollset_ctl</span>(loop-&gt;backend_fd, &amp;pc, <span class="number">1</span>)) &#123;</span><br><span class="line">        <span class="built_in">assert</span>(<span class="number">0</span> &amp;&amp; <span class="string">&quot;Failed to add file descriptor (pc.fd) to pollset&quot;</span>);</span><br><span class="line">        <span class="built_in">abort</span>();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    w-&gt;events = w-&gt;pevents;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">assert</span>(timeout &gt;= <span class="number">-1</span>);</span><br><span class="line">  base = loop-&gt;time;</span><br><span class="line">  count = <span class="number">48</span>; <span class="comment">/* Benchmarks suggest this gives the best throughput. */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">    nfds = <span class="built_in">pollset_poll</span>(loop-&gt;backend_fd,</span><br><span class="line">                        events,</span><br><span class="line">                        <span class="built_in">ARRAY_SIZE</span>(events),</span><br><span class="line">                        timeout);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Update loop-&gt;time unconditionally. It&#x27;s tempting to skip the update when</span></span><br><span class="line"><span class="comment">     * timeout == 0 (i.e. non-blocking poll) but there is no guarantee that the</span></span><br><span class="line"><span class="comment">     * operating system didn&#x27;t reschedule our process while in the syscall.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="built_in">SAVE_ERRNO</span>(<span class="built_in">uv__update_time</span>(loop));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (nfds == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">assert</span>(timeout != <span class="number">-1</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (nfds == <span class="number">-1</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (errno != EINTR) &#123;</span><br><span class="line">        <span class="built_in">abort</span>();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (timeout == <span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (timeout == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* Interrupted by a signal. Update timeout and poll again. */</span></span><br><span class="line">      <span class="keyword">goto</span> update_timeout;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    have_signals = <span class="number">0</span>;</span><br><span class="line">    nevents = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">assert</span>(loop-&gt;watchers != <span class="literal">NULL</span>);</span><br><span class="line">    loop-&gt;watchers[loop-&gt;nwatchers] = (<span class="keyword">void</span>*) events;</span><br><span class="line">    loop-&gt;watchers[loop-&gt;nwatchers + <span class="number">1</span>] = (<span class="keyword">void</span>*) (<span class="keyword">uintptr_t</span>) nfds;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; nfds; i++) &#123;</span><br><span class="line">      pe = events + i;</span><br><span class="line">      pc.cmd = PS_DELETE;</span><br><span class="line">      pc.fd = pe-&gt;fd;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* Skip invalidated events, see uv__platform_invalidate_fd */</span></span><br><span class="line">      <span class="keyword">if</span> (pc.fd == <span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">      <span class="built_in">assert</span>(pc.fd &gt;= <span class="number">0</span>);</span><br><span class="line">      <span class="built_in">assert</span>((<span class="keyword">unsigned</span>) pc.fd &lt; loop-&gt;nwatchers);</span><br><span class="line"></span><br><span class="line">      w = loop-&gt;watchers[pc.fd];</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (w == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="comment">/* File descriptor that we&#x27;ve stopped watching, disarm it.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * Ignore all errors because we may be racing with another thread</span></span><br><span class="line"><span class="comment">         * when the file descriptor is closed.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="built_in">pollset_ctl</span>(loop-&gt;backend_fd, &amp;pc, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* Run signal watchers last.  This also affects child process watchers</span></span><br><span class="line"><span class="comment">       * because those are implemented in terms of signal watchers.</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="keyword">if</span> (w == &amp;loop-&gt;signal_io_watcher)</span><br><span class="line">        have_signals = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        w-&gt;<span class="built_in">cb</span>(loop, w, pe-&gt;revents);</span><br><span class="line"></span><br><span class="line">      nevents++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (have_signals != <span class="number">0</span>)</span><br><span class="line">      loop-&gt;signal_io_watcher.<span class="built_in">cb</span>(loop, &amp;loop-&gt;signal_io_watcher, POLLIN);</span><br><span class="line"></span><br><span class="line">    loop-&gt;watchers[loop-&gt;nwatchers] = <span class="literal">NULL</span>;</span><br><span class="line">    loop-&gt;watchers[loop-&gt;nwatchers + <span class="number">1</span>] = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (have_signals != <span class="number">0</span>)</span><br><span class="line">      <span class="keyword">return</span>;  <span class="comment">/* Event loop should cycle now so don&#x27;t poll again. */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (nevents != <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (nfds == <span class="built_in">ARRAY_SIZE</span>(events) &amp;&amp; --count != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">/* Poll for more events but don&#x27;t block this time. */</span></span><br><span class="line">        timeout = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (timeout == <span class="number">0</span>)</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (timeout == <span class="number">-1</span>)</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">update_timeout:</span><br><span class="line">    <span class="built_in">assert</span>(timeout &gt; <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    diff = loop-&gt;time - base;</span><br><span class="line">    <span class="keyword">if</span> (diff &gt;= (<span class="keyword">uint64_t</span>) timeout)</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    timeout -= diff;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="check-phase"><a href="#check-phase" class="headerlink" title="check phase"></a>check phase</h2><p>见idle prepare</p>
<h2 id="close"><a href="#close" class="headerlink" title="close"></a>close</h2><p>关闭handle</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">uv__run_closing_handles</span><span class="params">(<span class="keyword">uv_loop_t</span>* loop)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">uv_handle_t</span>* p;</span><br><span class="line">  <span class="keyword">uv_handle_t</span>* q;</span><br><span class="line"></span><br><span class="line">  p = loop-&gt;closing_handles;</span><br><span class="line">  loop-&gt;closing_handles = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (p) &#123;</span><br><span class="line">    q = p-&gt;next_closing;</span><br><span class="line">    <span class="built_in">uv__finish_close</span>(p);</span><br><span class="line">    p = q;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="where-is-process-nextTick"><a href="#where-is-process-nextTick" class="headerlink" title="where is process.nextTick"></a>where is process.nextTick</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//lib/internal/process/task_queues.js</span></span><br><span class="line"><span class="comment">// `nextTick()` will not enqueue any callback when the process is about to</span></span><br><span class="line"><span class="comment">// exit since the callback would not have a chance to be executed.</span></span><br><span class="line"><span class="comment">// 意思就是nextTick在进程快要结束时不会排队callback,因为没有机会执行</span></span><br><span class="line"><span class="comment">// 你们看引用的文档吧，我看不下去了😭</span></span><br><span class="line"><span class="comment">// 主要的思路是JS执行process.nexTick()，然后将callback交给c++执行</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">nextTick</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> callback !== <span class="string">&#x27;function&#x27;</span>)</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> ERR_INVALID_CALLBACK(callback);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (process._exiting)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> args;</span><br><span class="line">  <span class="keyword">switch</span> (<span class="built_in">arguments</span>.length) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>: <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>: args = [<span class="built_in">arguments</span>[<span class="number">1</span>]]; <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>: args = [<span class="built_in">arguments</span>[<span class="number">1</span>], <span class="built_in">arguments</span>[<span class="number">2</span>]]; <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>: args = [<span class="built_in">arguments</span>[<span class="number">1</span>], <span class="built_in">arguments</span>[<span class="number">2</span>], <span class="built_in">arguments</span>[<span class="number">3</span>]]; <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      args = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="built_in">arguments</span>.length - <span class="number">1</span>);</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; <span class="built_in">arguments</span>.length; i++)</span><br><span class="line">        args[i - <span class="number">1</span>] = <span class="built_in">arguments</span>[i];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (queue.isEmpty())</span><br><span class="line">    setHasTickScheduled(<span class="literal">true</span>);</span><br><span class="line">  <span class="keyword">const</span> asyncId = newAsyncId();</span><br><span class="line">  <span class="keyword">const</span> triggerAsyncId = getDefaultTriggerAsyncId();</span><br><span class="line">  <span class="keyword">const</span> tickObject = &#123;</span><br><span class="line">    [async_id_symbol]: asyncId,</span><br><span class="line">    [trigger_async_id_symbol]: triggerAsyncId,</span><br><span class="line">    callback,</span><br><span class="line">    args</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">if</span> (initHooksExist())</span><br><span class="line">    emitInit(asyncId, <span class="string">&#x27;TickObject&#x27;</span>, triggerAsyncId, tickObject);</span><br><span class="line">  queue.push(tickObject);<span class="comment">//封装callback push</span></span><br><span class="line">  <span class="comment">//进入c</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="question"><a href="#question" class="headerlink" title="question"></a>question</h2><h3 id="1-setTimeout-vs-setImmediate"><a href="#1-setTimeout-vs-setImmediate" class="headerlink" title="1.setTimeout vs setImmediate"></a>1.setTimeout vs setImmediate</h3><ul>
<li>phase执行顺序</li>
<li>expire设置0是不是立刻执行</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;setTimeout&#x27;</span>)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">setImmediate(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;setImmediate&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<ul>
<li>setTimeout/setInterval 的第二个参数取值范围是：[1, 2^31 - 1]，如果<strong>超过这个范围</strong>则会<strong>初始化为 1</strong>，即 setTimeout(fn, 0) === setTimeout(fn, 1)。</li>
<li>setTimeout 的回调函数在 timer 阶段执行，setImmediate 的回调函数在 check 阶段执行，event loop 的开始会先检查 timer 阶段，但是在开始之前到 timer 阶段会消耗一定时间，所以就会出现两种情况：<ul>
<li>timer 前的准备时间超过 1ms，满足 loop-&gt;time &gt;= 1，则执行 timer 阶段（setTimeout）的回调函数</li>
<li>timer 前的准备时间小于 1ms，则先执行 check 阶段（setImmediate）的回调函数，下一次 event loop 执行 timer 阶段（setTimeout）的回调函数</li>
</ul>
</li>
</ul>
<p>在举例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;setTimeout&#x27;</span>)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">setImmediate(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;setImmediate&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> start = <span class="built_in">Date</span>.now()</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">Date</span>.now() - start &lt; <span class="number">10</span>);<span class="comment">//准备时间超过1ms，则直接执行timer</span></span><br></pre></td></tr></table></figure>
<h3 id="2-setTimeout-vs-setImmediate-2"><a href="#2-setTimeout-vs-setImmediate-2" class="headerlink" title="2.setTimeout vs setImmediate 2"></a>2.setTimeout vs setImmediate 2</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line">fs.readFile(__filename, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;setTimeout&#x27;</span>)</span><br><span class="line">  &#125;, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">  setImmediate(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;setImmediate&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//setImmediate</span></span><br><span class="line"><span class="comment">//setTimeout</span></span><br></pre></td></tr></table></figure>
<p>在引用一下官方对于check phase的介绍</p>
<blockquote>
<p>This phase allows a person to execute callbacks immediately after the <strong>poll</strong> phase has completed. If the <strong>poll</strong> phase becomes idle and scripts have been queued with <code>setImmediate()</code>, the event loop may continue to the <strong>check</strong> phase rather than waiting.</p>
<p><code>setImmediate()</code> is actually a special timer that runs in a separate phase of the event loop. It uses a libuv API that schedules callbacks to execute after the <strong>poll</strong> phase has completed.</p>
<p>Generally, as the code is executed, the event loop will eventually hit the <strong>poll</strong> phase where it will wait for an incoming connection, request, etc. However, if a callback has been scheduled with <code>setImmediate()</code> and the <strong>poll</strong> phase becomes idle, it will end and continue to the <strong>check</strong> phase rather than waiting for <strong>poll</strong> events.</p>
</blockquote>
<p>fs.readFile 的回调函数执行完后：</p>
<ol>
<li>注册 setTimeout 的回调函数到 timer 阶段</li>
<li>注册 setImmediate 的回调函数到 check 阶段</li>
<li>event loop 从 pool 阶段出来继续往下一个阶段执行，恰好是 check 阶段，所以 setImmediate 的回调函数先执行</li>
<li>本次 event loop 结束后，进入<strong>下一次 event loop</strong>，执行 setTimeout 的回调函数</li>
</ol>
<p>所以，在 I/O Callbacks 中注册的 setTimeout 和 setImmediate，永远都是 setImmediate 先执行。</p>
<h3 id="3-process-nextTick"><a href="#3-process-nextTick" class="headerlink" title="3.process.nextTick()"></a>3.process.nextTick()</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;setInterval&#x27;</span>)</span><br><span class="line">&#125;, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">process.nextTick(<span class="function"><span class="keyword">function</span> <span class="title">tick</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  process.nextTick(tick)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//note</span></span><br><span class="line">setImmediate(<span class="function"><span class="keyword">function</span> <span class="title">immediate</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;111&#x27;</span>);<span class="comment">//会直接打印出很多次111</span></span><br><span class="line">  setImmediate(immediate)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>运行结果：setInterval <strong>永远不会打印出来</strong>。</p>
<p>//这个在node<a href="https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/#process-nexttick">官方文档</a>也有相关的描述</p>
<p>//我在这里也进行了<a href="**https://zehai.info/2020/04/10/2020-04-10-eventloop/**">笔记</a>记录</p>
<p>//<em>允许用户处理errors，清理不需要的资源，事件循环前 尝试重新连接</em></p>
<p>//<em>有时有必要在eventloop继续之前，在call stack unwound之后，让callback执行</em></p>
<p><strong>解释</strong>：process.nextTick 会无限循环，将 event loop 阻塞在 microtask 阶段，导致 event loop 上其他 macrotask 阶段的回调函数没有机会执行。//<code>这段解释是前端的，后端是没有microtask的实际队列的</code></p>
<p>解决方法通常是用 setImmediate 替代 process.nextTick，如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;setInterval&#x27;</span>)</span><br><span class="line">&#125;, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">setImmediate(<span class="function"><span class="keyword">function</span> <span class="title">immediate</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  setImmediate(immediate)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>运行结果：每 100ms 打印一次 setInterval。</p>
<p><strong>解释</strong>：process.nextTick 内执行 process.nextTick 仍然将 tick 函数注册到当前 microtask 的尾部，所以导致 microtask 永远执行不完； setImmediate 内执行 setImmediate 会将 immediate 函数注册到下一次 event loop 的 check 阶段，而不是当前正在执行的 check 阶段，所以给了 event loop 上其他 macrotask 执行的机会。</p>
<p>再看个例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">setImmediate(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;setImmediate1&#x27;</span>)</span><br><span class="line">  setImmediate(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;setImmediate2&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  process.nextTick(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;nextTick&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">setImmediate(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;setImmediate3&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">setImmediate1</span><br><span class="line">setImmediate3</span><br><span class="line">nextTick</span><br><span class="line">setImmediate2</span><br></pre></td></tr></table></figure>
<p><strong>注意</strong>：并<strong>不是说 setImmediate 可以完全替代 process.nextTick</strong>，process.nextTick 在特定场景下还是无法被替代的，比如我们就想将一些操作放到最近的 microtask 里执行。</p>
<h3 id="4-promise"><a href="#4-promise" class="headerlink" title="4.promise"></a>4.promise</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="built_in">Promise</span>.resolve()</span><br><span class="line">  .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> promise</span><br><span class="line">  &#125;)</span><br><span class="line">promise.catch(<span class="built_in">console</span>.error)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TypeError: Chaining cycle detected for promise #&lt;Promise&gt;</span><br><span class="line">    at &lt;anonymous&gt;</span><br><span class="line">    at process._tickCallback (internal/process/next_tick.js:188:7)</span><br><span class="line">    at Function.Module.runMain (module.js:667:11)</span><br><span class="line">    at startup (bootstrap_node.js:187:16)</span><br><span class="line">    at bootstrap_node.js:607:3</span><br></pre></td></tr></table></figure>
<p><strong>解释</strong>：promise.then 类似于 process.nextTick，都会将回调函数注册到 microtask 阶段。上面代码会导致死循环，类似前面提到的：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">process.nextTick(<span class="function"><span class="keyword">function</span> <span class="title">tick</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  process.nextTick(tick)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>再看个例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="built_in">Promise</span>.resolve()</span><br><span class="line"></span><br><span class="line">promise.then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;promise&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">process.nextTick(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;nextTick&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nextTick</span><br><span class="line">promise</span><br></pre></td></tr></table></figure>
<p><strong>解释</strong>：promise.then 虽然和 process.nextTick 一样，都将回调函数注册到 microtask，但优先级不一样。process.nextTick 的 microtask queue 总是优先于 promise 的 microtask queue 执行。</p>
<h3 id="5-promise执行顺序"><a href="#5-promise执行顺序" class="headerlink" title="5.promise执行顺序"></a>5.promise执行顺序</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">    i === <span class="number">9999</span> &amp;&amp; resolve()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">&#125;).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">4</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">5</span>)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">3</span><br><span class="line">5</span><br><span class="line">4</span><br><span class="line">1</span><br></pre></td></tr></table></figure>
<p><strong>解释</strong>：Promise 构造函数是同步执行的，所以先打印 2、3，然后打印 5，接下来 event loop 进入执行 microtask 阶段，执行 promise.then 的回调函数打印出 4，然后执行下一个 macrotask，恰好是 timer 阶段的 setTimeout 的回调函数，打印出 1。</p>
<h3 id="6-综合"><a href="#6-综合" class="headerlink" title="6.综合"></a>6.综合</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">setImmediate(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">  &#125;, <span class="number">100</span>)</span><br><span class="line">  setImmediate(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  process.nextTick(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">4</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">process.nextTick(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">5</span>)</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">6</span>)</span><br><span class="line">  &#125;, <span class="number">100</span>)</span><br><span class="line">  setImmediate(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">7</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  process.nextTick(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">8</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">9</span>)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">9</span><br><span class="line">5</span><br><span class="line">8</span><br><span class="line">1</span><br><span class="line">7</span><br><span class="line">4</span><br><span class="line">3</span><br><span class="line">6</span><br><span class="line">2</span><br></pre></td></tr></table></figure>
<p>process.nextTick、setTimeout 和 setImmediate 的组合，请读者自己推理吧。</p>
<h1 id="other-source-code"><a href="#other-source-code" class="headerlink" title="other source code"></a>other source code</h1><h2 id="setTimeout"><a href="#setTimeout" class="headerlink" title="setTimeout()"></a>setTimeout()</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//lib/timers/promises.js</span></span><br><span class="line"><span class="comment">//setTimeout(function()&#123;&#125;,expire)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setTimeout</span>(<span class="params">after, value, options = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> args = value !== <span class="literal">undefined</span> ? [value] : value;</span><br><span class="line">  <span class="keyword">if</span> (options == <span class="literal">null</span> || <span class="keyword">typeof</span> options !== <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> PromiseReject(</span><br><span class="line">      <span class="keyword">new</span> ERR_INVALID_ARG_TYPE(</span><br><span class="line">        <span class="string">&#x27;options&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Object&#x27;</span>,</span><br><span class="line">        options));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> &#123; signal, ref = <span class="literal">true</span> &#125; = options;</span><br><span class="line">  <span class="keyword">if</span> (signal !== <span class="literal">undefined</span> &amp;&amp;</span><br><span class="line">      (signal === <span class="literal">null</span> ||</span><br><span class="line">       <span class="keyword">typeof</span> signal !== <span class="string">&#x27;object&#x27;</span> ||</span><br><span class="line">       !(<span class="string">&#x27;aborted&#x27;</span> <span class="keyword">in</span> signal))) &#123;</span><br><span class="line">    <span class="keyword">return</span> PromiseReject(</span><br><span class="line">      <span class="keyword">new</span> ERR_INVALID_ARG_TYPE(</span><br><span class="line">        <span class="string">&#x27;options.signal&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;AbortSignal&#x27;</span>,</span><br><span class="line">        signal));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> ref !== <span class="string">&#x27;boolean&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> PromiseReject(</span><br><span class="line">      <span class="keyword">new</span> ERR_INVALID_ARG_TYPE(</span><br><span class="line">        <span class="string">&#x27;options.ref&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;boolean&#x27;</span>,</span><br><span class="line">        ref));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// TODO(@jasnell): If a decision is made that this cannot be backported</span></span><br><span class="line">  <span class="comment">// to 12.x, then this can be converted to use optional chaining to</span></span><br><span class="line">  <span class="comment">// simplify the check.</span></span><br><span class="line">  <span class="keyword">if</span> (signal &amp;&amp; signal.aborted)</span><br><span class="line">    <span class="keyword">return</span> PromiseReject(lazyDOMException(<span class="string">&#x27;AbortError&#x27;</span>));</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> timeout = <span class="keyword">new</span> Timeout(resolve, after, args, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">if</span> (!ref) timeout.unref();</span><br><span class="line">    insert(timeout, timeout._idleTimeout);</span><br><span class="line">    <span class="keyword">if</span> (signal) &#123;</span><br><span class="line">      signal.addEventListener(<span class="string">&#x27;abort&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!timeout._destroyed) &#123;</span><br><span class="line">          <span class="comment">// eslint-disable-next-line no-undef</span></span><br><span class="line">          <span class="built_in">clearTimeout</span>(timeout);</span><br><span class="line">          reject(lazyDOMException(<span class="string">&#x27;AbortError&#x27;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;, &#123; <span class="attr">once</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Node</category>
      </categories>
      <tags>
        <tag>source</tag>
      </tags>
  </entry>
</search>
