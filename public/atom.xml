<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zehai&#39;blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zehai.info/"/>
  <updated>2020-04-29T08:29:49.527Z</updated>
  <id>http://zehai.info/</id>
  
  <author>
    <name>Zhang Zehai</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>prom-client</title>
    <link href="http://zehai.info/2020/04/29/2020-04-29-prom-client/"/>
    <id>http://zehai.info/2020/04/29/2020-04-29-prom-client/</id>
    <published>2020-04-29T08:18:55.000Z</published>
    <updated>2020-04-29T08:29:49.527Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>prom-client 支持nodejs收集metrics，直方图histogram，summaries，gauges，和counters</p><p>prometheus通过pull获取node服务数据</p><h2 id="支持cluster"><a href="#支持cluster" class="headerlink" title="支持cluster"></a>支持cluster</h2><h1 id="API"><a href="#API" class="headerlink" title="API"></a>API</h1><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>所有metric有两个必填参数，name与help</p><h2 id="默认"><a href="#默认" class="headerlink" title="默认"></a>默认</h2><p>1.<code>collectDefaultMetrics</code>为prom推荐metric（部分metric仅在linux生效）</p><p>2.包含node特有的metric，如eventLoop lag，active handles，gc，node version</p><p>3.collectDefaultMetrics可以接受以下参数</p><ul><li>prefix：metric自定义前缀，默认空</li><li>registry ：自定义注册表，默认global</li><li><code>gcDurationBuckets</code></li><li><code>eventLoopMonitoringPrecision</code> </li></ul><h3 id="更换registry"><a href="#更换registry" class="headerlink" title="更换registry"></a>更换registry</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> client = <span class="built_in">require</span>(<span class="string">'prom-client'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> collectDefaultMetrics = client.collectDefaultMetrics;</span><br><span class="line"><span class="keyword">const</span> Registry = client.Registry;</span><br><span class="line"><span class="keyword">const</span> register = <span class="keyword">new</span> Registry();</span><br><span class="line">collectDefaultMetrics(&#123; register &#125;);</span><br></pre></td></tr></table></figure><h3 id="To-use-custom-buckets-for-GC-duration-histogram-pass-it-in-as-gcDurationBuckets"><a href="#To-use-custom-buckets-for-GC-duration-histogram-pass-it-in-as-gcDurationBuckets" class="headerlink" title="To use custom buckets for GC duration histogram, pass it in as gcDurationBuckets:"></a>To use custom buckets for GC duration histogram, pass it in as <code>gcDurationBuckets</code>:</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> client = <span class="built_in">require</span>(<span class="string">'prom-client'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> collectDefaultMetrics = client.collectDefaultMetrics;</span><br><span class="line"></span><br><span class="line">collectDefaultMetrics(&#123; <span class="attr">gcDurationBuckets</span>: [<span class="number">0.1</span>, <span class="number">0.2</span>, <span class="number">0.3</span>] &#125;);</span><br></pre></td></tr></table></figure><h3 id="To-prefix-metric-names-with-your-own-arbitrary-string-pass-in-a-prefix"><a href="#To-prefix-metric-names-with-your-own-arbitrary-string-pass-in-a-prefix" class="headerlink" title="To prefix metric names with your own arbitrary string, pass in a prefix:"></a>To prefix metric names with your own arbitrary string, pass in a <code>prefix</code>:</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> client = <span class="built_in">require</span>(<span class="string">'prom-client'</span>);</span><br><span class="line"><span class="keyword">const</span> collectDefaultMetrics = client.collectDefaultMetrics;</span><br><span class="line"><span class="keyword">const</span> prefix = <span class="string">'my_application_'</span>;</span><br><span class="line">collectDefaultMetrics(&#123; prefix &#125;);</span><br></pre></td></tr></table></figure><h3 id="You-can-get-the-full-list-of-metrics-by-inspecting-client-collectDefaultMetrics-metricsList"><a href="#You-can-get-the-full-list-of-metrics-by-inspecting-client-collectDefaultMetrics-metricsList" class="headerlink" title="You can get the full list of metrics by inspecting client.collectDefaultMetrics.metricsList."></a>You can get the full list of metrics by inspecting <code>client.collectDefaultMetrics.metricsList</code>.</h3><p>Default metrics are collected on scrape of metrics endpoint, not on an interval.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> client = <span class="built_in">require</span>(<span class="string">'prom-client'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> collectDefaultMetrics = client.collectDefaultMetrics;</span><br><span class="line"></span><br><span class="line">collectDefaultMetrics();</span><br></pre></td></tr></table></figure><h1 id="counter"><a href="#counter" class="headerlink" title="counter"></a>counter</h1><h1 id="Gauge"><a href="#Gauge" class="headerlink" title="Gauge"></a>Gauge</h1><h1 id="Histogram"><a href="#Histogram" class="headerlink" title="Histogram"></a>Histogram</h1><h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><h1 id="Labels"><a href="#Labels" class="headerlink" title="Labels"></a>Labels</h1><h1 id="Multiple-registries"><a href="#Multiple-registries" class="headerlink" title="Multiple registries"></a>Multiple registries</h1><h1 id="Register"><a href="#Register" class="headerlink" title="Register"></a>Register</h1><h1 id="Pushgateway"><a href="#Pushgateway" class="headerlink" title="Pushgateway"></a>Pushgateway</h1><h1 id="Utilities"><a href="#Utilities" class="headerlink" title="Utilities"></a>Utilities</h1><h1 id="GC-stats"><a href="#GC-stats" class="headerlink" title="GC stats"></a>GC stats</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;prom-client 支持nodejs收集metrics，直方图histogram，summaries，gauges，和counters&lt;
      
    
    </summary>
    
      <category term="prometheus" scheme="http://zehai.info/categories/prometheus/"/>
    
    
      <category term="client" scheme="http://zehai.info/tags/client/"/>
    
  </entry>
  
  <entry>
    <title>Node.JSv14</title>
    <link href="http://zehai.info/2020/04/22/2020-04-22-Node14/"/>
    <id>http://zehai.info/2020/04/22/2020-04-22-Node14/</id>
    <published>2020-04-22T02:37:29.000Z</published>
    <updated>2020-04-22T02:53:24.483Z</updated>
    
    <content type="html"><![CDATA[<h1 id="new"><a href="#new" class="headerlink" title="new"></a>new</h1><p>今天看到Node Current更新了14的版本，看看都有些什么东西</p><p>前置了解了一下doc中提到的semver，是一个语义化版本semantic versioning，实现版本和版本规范的解析，计算，比较，用以解决在大型项目中对依赖的版本失去控制的问题，Node.js 的包管理工具 npm 也完全基于 Semantic Versioning 来管理依赖的版本。</p><p>参考资料：<a href="https://zhuanlan.zhihu.com/p/20747196" target="_blank" rel="noopener">semver：语义化版本规范在 Node.js 中的实现</a></p><h2 id="deprecations"><a href="#deprecations" class="headerlink" title="deprecations"></a>deprecations</h2><p>sermver弃用一部分功能</p><ul><li><strong>(SEMVER-MAJOR)</strong> <strong>crypto</strong>: move pbkdf2 without digest to EOL (James M Snell) </li><li><strong>(SEMVER-MAJOR)</strong> <strong>fs</strong>: deprecate closing FileHandle on garbage collection (James M Snell)</li><li><strong>(SEMVER-MAJOR)</strong> <strong>http</strong>: move OutboundMessage.prototype.flush to EOL (James M Snell)</li><li><strong>(SEMVER-MAJOR)</strong> <strong>lib</strong>: move GLOBAL and root aliases to EOL (James M Snell)</li><li><strong>(SEMVER-MAJOR)</strong> <strong>os</strong>: move tmpDir() to EOL (James M Snell) </li><li><strong>(SEMVER-MAJOR)</strong> <strong>src</strong>: remove deprecated wasm type check (Clemens Backes) </li><li><strong>(SEMVER-MAJOR)</strong> <strong>stream</strong>: move _writableState.buffer to EOL (James M Snell)</li><li><strong>(SEMVER-MINOR)</strong> <strong>doc</strong>: deprecate process.mainModule (Antoine du HAMEL)</li><li><strong>(SEMVER-MINOR)</strong> <strong>doc</strong>: deprecate process.umask() with no arguments (Colin Ihrig) </li></ul><h2 id="ECMAScript-Modules"><a href="#ECMAScript-Modules" class="headerlink" title="ECMAScript Modules"></a>ECMAScript Modules</h2><p>在 <code>v13</code> 中，需要调用 <code>--experimental-modules</code> 来开启 <code>ESM module</code> 支持， 而且还会有警告，但目前已经移除警告（还是需要手动开启）<br>仍在实验中，但是其已经非常完善，移除警告迈向了stable的重要一步</p><h2 id="New-V8-ArrayBuffer-API"><a href="#New-V8-ArrayBuffer-API" class="headerlink" title="New V8 ArrayBuffer API"></a>New V8 ArrayBuffer API</h2><p>v8不再支持多个ArrayBuffer指向相同的base address</p><h2 id="Toolchain-and-Compiler-Upgrades"><a href="#Toolchain-and-Compiler-Upgrades" class="headerlink" title="Toolchain and Compiler Upgrades"></a>Toolchain and Compiler Upgrades</h2><p>//没看懂</p><ul><li><strong>(SEMVER-MAJOR)</strong> <strong>build</strong>: update macos deployment target to 10.13 for 14.x (AshCripps) <a href="https://github.com/nodejs/node/pull/32454" target="_blank" rel="noopener">#32454</a></li><li><strong>(SEMVER-MAJOR)</strong> <strong>doc</strong>: update cross compiler machine for Linux armv7 (Richard Lau) <a href="https://github.com/nodejs/node/pull/32812" target="_blank" rel="noopener">#32812</a></li><li><strong>(SEMVER-MAJOR)</strong> <strong>doc</strong>: update Centos/RHEL releases use devtoolset-8 (Richard Lau) <a href="https://github.com/nodejs/node/pull/32812" target="_blank" rel="noopener">#32812</a></li><li><strong>(SEMVER-MAJOR)</strong> <strong>doc</strong>: remove SmartOS from official binaries (Richard Lau) <a href="https://github.com/nodejs/node/pull/32812" target="_blank" rel="noopener">#32812</a></li><li><strong>(SEMVER-MAJOR)</strong> <strong>win</strong>: block running on EOL Windows versions (João Reis) <a href="https://github.com/nodejs/node/pull/31954" target="_blank" rel="noopener">#31954</a></li></ul><p>It is expected that there will be an ABI mismatch on ARM between the Node.js binary and native addons. Native addons are only broken if they interact with <code>std::shared_ptr</code>. This is expected to be fixed in a later version of Node.js 14.</p><h2 id="Update-to-V8-8-1"><a href="#Update-to-V8-8-1" class="headerlink" title="Update to V8 8.1"></a>Update to V8 8.1</h2><h2 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h2><ul><li><strong>cli, report</strong>: move –report-on-fatalerror to stable (Colin Ihrig) </li><li><strong>deps</strong>: upgrade to libuv 1.37.0 (Colin Ihrig) </li><li><strong>fs</strong>: add fs/promises alias module </li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;new&quot;&gt;&lt;a href=&quot;#new&quot; class=&quot;headerlink&quot; title=&quot;new&quot;&gt;&lt;/a&gt;new&lt;/h1&gt;&lt;p&gt;今天看到Node Current更新了14的版本，看看都有些什么东西&lt;/p&gt;
&lt;p&gt;前置了解了一下doc中提到的semver，是一个
      
    
    </summary>
    
      <category term="Node" scheme="http://zehai.info/categories/Node/"/>
    
    
      <category term="14" scheme="http://zehai.info/tags/14/"/>
    
  </entry>
  
  <entry>
    <title>LeetCodeWeek2</title>
    <link href="http://zehai.info/2020/04/19/2020-04-19-LeetCodeWeek1/"/>
    <id>http://zehai.info/2020/04/19/2020-04-19-LeetCodeWeek1/</id>
    <published>2020-04-19T05:23:52.000Z</published>
    <updated>2020-04-20T10:47:34.557Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Problem-Product-of-Array-Except-Self"><a href="#Problem-Product-of-Array-Except-Self" class="headerlink" title="Problem Product of Array Except Self"></a>Problem Product of Array Except Self</h1><p>Given an array <code>nums</code> of <em>n</em> integers where <em>n</em> &gt; 1,  return an array <code>output</code> such that <code>output[i]</code> is equal to the product of all the elements of <code>nums</code> except <code>nums[i]</code>.</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input:  [1,2,3,4]</span><br><span class="line">Output: [24,12,8,6]</span><br></pre></td></tr></table></figure><p><strong>Constraint:</strong> It’s guaranteed that the product of the elements of any prefix or suffix of the array (including the whole array) fits in a 32 bit integer.</p><p><strong>Note:</strong> Please solve it <strong>without division</strong> and in O(<em>n</em>).</p><p><strong>Follow up:</strong><br>Could you solve it with constant space complexity? (The output array <strong>does not</strong> count as extra space for the purpose of space complexity analysis.)</p><h2 id="key"><a href="#key" class="headerlink" title="key"></a>key</h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">//3ms</span><br><span class="line">class Solution &#123;</span><br><span class="line">    public int[] productExceptSelf(int[] nums) &#123;</span><br><span class="line">        int sum =1;</span><br><span class="line">        int hasZero =0;</span><br><span class="line">        for(int num :nums)&#123;</span><br><span class="line">            if(num!=0)&#123;</span><br><span class="line">                sum*=num;</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                hasZero++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        for(int i=0;i&lt;nums.length;i++)&#123;</span><br><span class="line">            if(hasZero&gt;=2)&#123;</span><br><span class="line">                nums[i]=0;</span><br><span class="line">            &#125;else if(hasZero==1)&#123;</span><br><span class="line">                if(nums[i]==0)&#123;</span><br><span class="line">                    nums[i]=sum;</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    nums[i]=0;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                nums[i]=sum/nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return nums;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//1ms</span><br><span class="line">class Solution &#123;</span><br><span class="line">    public int[] productExceptSelf(int[] nums) &#123;</span><br><span class="line">        int n = nums.length;</span><br><span class="line">        int[] left = new int[n];</span><br><span class="line">        left[0] = 1;</span><br><span class="line">        for (int i = 1; i &lt; n; i++) &#123;</span><br><span class="line">            left[i] = left[i-1] * nums[i-1];</span><br><span class="line">        &#125;</span><br><span class="line">        int product = 1;</span><br><span class="line">        for (int i = n - 1; i &gt;= 0; i--) &#123;</span><br><span class="line">            left[i] *= product;</span><br><span class="line">            product *= nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        return left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Problem-678Valid-Parenthesis-String"><a href="#Problem-678Valid-Parenthesis-String" class="headerlink" title="Problem-678Valid Parenthesis String"></a>Problem-678Valid Parenthesis String</h1><p><strong>Medium</strong></p><p>Given a string containing only three types of characters: ‘(‘, ‘)’ and ‘*’, write a function to check whether this string is valid. We define the validity of a string by these rules:</p><ol><li>Any left parenthesis <code>&#39;(&#39;</code> must have a corresponding right parenthesis <code>&#39;)&#39;</code>.</li><li>Any right parenthesis <code>&#39;)&#39;</code> must have a corresponding left parenthesis <code>&#39;(&#39;</code>.</li><li>Left parenthesis <code>&#39;(&#39;</code> must go before the corresponding right parenthesis <code>&#39;)&#39;</code>.</li><li><code>&#39;*&#39;</code> could be treated as a single right parenthesis <code>&#39;)&#39;</code> or a single left parenthesis <code>&#39;(&#39;</code> or an empty string.</li><li>An empty string is also valid.</li></ol><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;()&quot;</span><br><span class="line">Output: True</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;(*)&quot;</span><br><span class="line">Output: True</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;(*))&quot;</span><br><span class="line">Output: True</span><br></pre></td></tr></table></figure><p><strong>Note:</strong></p><ol><li>The string size will be in the range [1, 100].</li></ol><h2 id="key-1"><a href="#key-1" class="headerlink" title="key"></a>key</h2><h2 id="solution-1"><a href="#solution-1" class="headerlink" title="solution"></a>solution</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkValidString</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s.length() == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;<span class="keyword">int</span> star=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">char</span>[] c = s.toCharArray();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> i : c) &#123;</span><br><span class="line">            <span class="keyword">switch</span> (i) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'('</span>:</span><br><span class="line">                    left++;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">')'</span>:</span><br><span class="line">                    left--;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'*'</span>:</span><br><span class="line">                    star++;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (left == <span class="number">0</span> || left - star == <span class="number">0</span> || left + star == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Brute-Force"><a href="#Brute-Force" class="headerlink" title="Brute Force"></a>Brute Force</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> ans = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkValidString</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        solve(<span class="keyword">new</span> StringBuilder(s), <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">(StringBuilder sb, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (i == sb.length()) &#123;</span><br><span class="line">            ans |= valid(sb);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sb.charAt(i) == <span class="string">'*'</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">char</span> c: <span class="string">"() "</span>.toCharArray()) &#123;</span><br><span class="line">                sb.setCharAt(i, c);</span><br><span class="line">                solve(sb, i+<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span> (ans) <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            sb.setCharAt(i, <span class="string">'*'</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span></span><br><span class="line">            solve(sb, i + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">valid</span><span class="params">(StringBuilder sb)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> bal = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sb.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> c = sb.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">'('</span>) bal++;</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">')'</span>) bal--;</span><br><span class="line">            <span class="keyword">if</span> (bal &lt; <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bal == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Dynamic-Programming"><a href="#Dynamic-Programming" class="headerlink" title="Dynamic Programming"></a>Dynamic Programming</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkValidString</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = s.length();</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">boolean</span>[][] dp = <span class="keyword">new</span> <span class="keyword">boolean</span>[n][n];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s.charAt(i) == <span class="string">'*'</span>) dp[i][i] = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; n-<span class="number">1</span> &amp;&amp;</span><br><span class="line">                    (s.charAt(i) == <span class="string">'('</span> || s.charAt(i) == <span class="string">'*'</span>) &amp;&amp;</span><br><span class="line">                    (s.charAt(i+<span class="number">1</span>) == <span class="string">')'</span> || s.charAt(i+<span class="number">1</span>) == <span class="string">'*'</span>)) &#123;</span><br><span class="line">                dp[i][i+<span class="number">1</span>] = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> size = <span class="number">2</span>; size &lt; n; size++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i + size &lt; n; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (s.charAt(i) == <span class="string">'*'</span> &amp;&amp; dp[i+<span class="number">1</span>][i+size] == <span class="keyword">true</span>) &#123;</span><br><span class="line">                    dp[i][i+size] = <span class="keyword">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s.charAt(i) == <span class="string">'('</span> || s.charAt(i) == <span class="string">'*'</span>) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> k = i+<span class="number">1</span>; k &lt;= i+size; k++) &#123;</span><br><span class="line">                        <span class="keyword">if</span> ((s.charAt(k) == <span class="string">')'</span> || s.charAt(k) == <span class="string">'*'</span>) &amp;&amp;</span><br><span class="line">                                (k == i+<span class="number">1</span> || dp[i+<span class="number">1</span>][k-<span class="number">1</span>]) &amp;&amp;</span><br><span class="line">                                (k == i+size || dp[k+<span class="number">1</span>][i+size])) &#123;</span><br><span class="line">                            dp[i][i+size] = <span class="keyword">true</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">0</span>][n-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Greedy"><a href="#Greedy" class="headerlink" title="Greedy"></a>Greedy</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkValidString</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> lo = <span class="number">0</span>, hi = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">char</span> c: s.toCharArray()) &#123;</span><br><span class="line">           lo += c == <span class="string">'('</span> ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">           hi += c != <span class="string">')'</span> ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">           <span class="keyword">if</span> (hi &lt; <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">           lo = Math.max(lo, <span class="number">0</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> lo == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Problem-Product-of-Array-Except-Self&quot;&gt;&lt;a href=&quot;#Problem-Product-of-Array-Except-Self&quot; class=&quot;headerlink&quot; title=&quot;Problem Product of A
      
    
    </summary>
    
      <category term="LeetCode" scheme="http://zehai.info/categories/LeetCode/"/>
    
    
      <category term="Easy" scheme="http://zehai.info/tags/Easy/"/>
    
  </entry>
  
  <entry>
    <title>同一宿主机下docker互相访问</title>
    <link href="http://zehai.info/2020/04/16/2020-04-16-%E5%90%8C%E4%B8%80%E5%AE%BF%E4%B8%BB%E6%9C%BA%E4%B8%8Bdocker%E4%BA%92%E7%9B%B8%E8%AE%BF%E9%97%AE/"/>
    <id>http://zehai.info/2020/04/16/2020-04-16-同一宿主机下docker互相访问/</id>
    <published>2020-04-16T10:06:19.000Z</published>
    <updated>2020-04-16T10:29:22.747Z</updated>
    
    <content type="html"><![CDATA[<h1 id="what"><a href="#what" class="headerlink" title="what"></a>what</h1><p>该文档解决：docker下，altermanager收不到prometheus消息</p><p>事因，我在一个宿主机下建立了多个docker容器</p><ul><li>node-exporter</li><li>prometheus</li><li>grafana</li><li>alertmanager</li><li>timonwong/prometheus-webhook-dingtalk</li></ul><p>这些服务之间会有一些互相访问，如prometheus可以发送数据给alertmanager来发送报警信息，alertmanager通过规则处理可以发送邮件，发送钉钉等方式告知用户，问题就出在prometheus的yml配置文档中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">alerting:</span><br><span class="line">  alertmanagers:</span><br><span class="line">    - static_configs:</span><br><span class="line">        - targets: ['localhost:9002']  </span><br><span class="line">        </span><br><span class="line"><span class="meta">#</span>##############</span><br><span class="line">修改后：</span><br><span class="line">alerting:</span><br><span class="line">  alertmanagers:</span><br><span class="line">    - static_configs:</span><br><span class="line">        - targets: ['10.10.10.10:9002']</span><br></pre></td></tr></table></figure><p>问题出在了prometheus的配置中访问了localhost端口，但这个并不是访问宿主机的9002的端口，而是访问的是<code>docker内部的9002</code>端口</p><p>找到问题后，使用了宿主机ip+port的方式进行访问</p><h1 id="how"><a href="#how" class="headerlink" title="how"></a>how</h1><p>查询了资料后，发现解决该问题的方法有：</p><ul><li>宿主ip：port访问</li><li>容器ip访问</li><li>link建立通信网络(单向，不推荐)–link xxx</li><li>user-defined networks（docker dns server/bridge）</li></ul><p>前两种不太推荐，因为如果容器ip更改或者宿主机ip更改就需要更新配置文档，第三种方法不太推荐，run 时候link只是单向的建立连接，第四种<a href="https://docs.docker.com/engine/reference/commandline/network_create/" target="_blank" rel="noopener">docker network create</a>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//创建网络</span><br><span class="line">docker network create -d bridge my-bridge-network</span><br><span class="line">//run时候加入网络</span><br><span class="line">docker run -it --network test-network --network-alias mysql  -e MYSQL_ROOT_PASSWORD=123 mysql:5.7</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;what&quot;&gt;&lt;a href=&quot;#what&quot; class=&quot;headerlink&quot; title=&quot;what&quot;&gt;&lt;/a&gt;what&lt;/h1&gt;&lt;p&gt;该文档解决：docker下，altermanager收不到prometheus消息&lt;/p&gt;
&lt;p&gt;事因，我在一个宿主机下建立
      
    
    </summary>
    
      <category term="Question" scheme="http://zehai.info/categories/Question/"/>
    
    
      <category term="整理" scheme="http://zehai.info/tags/%E6%95%B4%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>node整理</title>
    <link href="http://zehai.info/2020/04/10/2020-04-10-eventloop/"/>
    <id>http://zehai.info/2020/04/10/2020-04-10-eventloop/</id>
    <published>2020-04-10T08:44:26.000Z</published>
    <updated>2020-04-16T10:08:56.352Z</updated>
    
    <content type="html"><![CDATA[<h1 id="What"><a href="#What" class="headerlink" title="What"></a>What</h1><p>eventloop使得单线程机制的node实现非阻塞I/O的机制，将任务通过libuv分发给线程池后，交由系统内核完成（多线程），完成后内核通知nodejs，将回调放入<code>poll</code>队列执行</p><p>启动nodejs时，eventloop初始化，进程会输入很多script，包括：</p><ul><li>async API calls</li><li>定时器</li><li>process.nextTick()</li></ul><p><img src="../img/phaseOfEventloop-1586590365657.png" alt=""></p><p>eventloop有六个队列</p><ul><li>timers</li><li>pending callbacks</li><li>idle,prepare</li><li>poll(connections,data,etc)</li><li>check</li><li>close callbacks</li></ul><p>这些队列被称作phase,每个phase都是一个可以放callback的FIFO队列，当进入一个phase时，队列将执行完phase中的callback或者执行最大数目的callback后将进入另一个phase</p><ul><li>timers：执行定时器，包括setTimeout，setInerval</li><li>pending callbacks 执行延迟到下一个循环的I/O callback</li><li>idle，prepare 处理系统内部</li><li>poll：检查新的I/O事件，执行I/O回调,node会适当的在此阻塞</li><li>check:setImmediate()</li><li>close：关闭回调函数，如：socket.on(‘close’,foo())</li></ul><h1 id="Detail"><a href="#Detail" class="headerlink" title="Detail"></a>Detail</h1><h2 id="Timers"><a href="#Timers" class="headerlink" title="Timers"></a>Timers</h2><p>设定延迟后，timers会在规定的时间执行，但存在情况延迟，如<code>poll</code> phase执行回调，超过了timer设定的时间。因为poll必须完成一个任务后才可以检查最近的定时器，没到时间就执行下一个callback，执行callback期间无法中断</p><blockquote><p>可以得出结论：<code>poll</code>控制着定时器何时执行</p></blockquote><p>另外为了防止poll phase 变成恶汉，libuv 制定了一个依赖于系统的硬性最大值，来停止轮询获取更多事件</p><h2 id="pending-callbacks"><a href="#pending-callbacks" class="headerlink" title="pending callbacks"></a>pending callbacks</h2><p>该队列在系统错误时执行回调（如TCP err），如TCP socket尝试重连收到了<code>ECONNREFUSED</code>，系统需要这些错误报告，那这个错误报告回调就会放在pending callbacks中等待被执行</p><h2 id="poll"><a href="#poll" class="headerlink" title="poll"></a>poll</h2><p>最重要的阶段，poll主要包含两个功能：</p><ol><li><p>计算阻塞和轮询的IO时间</p></li><li><p>执行poll 队列里的events</p></li></ol><p>当eventloop进入<code>poll</code>阶段，并没有timers的时候</p><ul><li><code>poll</code>不为空，顺序同步执行任务，直到为空或达到处理数量上限</li><li><code>poll</code>为空：如果有setImmediate()，则进入<code>check phase</code>，反之就在<code>poll</code>等客人</li></ul><p>一但<code>poll</code>为空，eventlopp将会检查计时器是否有快到的，如果有需要执行的，eventloop将要进入<code>timers</code>阶段来顺序执行timer callback</p><h2 id="check"><a href="#check" class="headerlink" title="check"></a>check</h2><p>这个phase可以在<code>poll</code>执行完成时开始执行setImmediate()回调。他其实是特殊的定时器队列，<strong>使用libuv API在poll完成的阶段执行</strong>（这也是他存在的原因）。</p><h2 id="close-callbacks"><a href="#close-callbacks" class="headerlink" title="close callbacks"></a>close callbacks</h2><p>socket.desroy()等执行关闭event时候会进入该phase，否则会被process.nextTick()触发</p><h1 id="setImmedate-vs-setTimeout"><a href="#setImmedate-vs-setTimeout" class="headerlink" title="setImmedate() vs setTimeout()"></a>setImmedate() vs setTimeout()</h1><p>相似却又不同</p><ul><li>setImmediate()是poll执行完成后执行的script</li><li>setTimeout()是定时执行的</li></ul><p>执行哪个收到上下文的约束，如果两个都被主模块调用，那么进程性能将会收到约束（影响其他app运行）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">without IO</span><br><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">  console.log(&apos;timeout&apos;);</span><br><span class="line">&#125;, 0);</span><br><span class="line"></span><br><span class="line">setImmediate(() =&gt; &#123;</span><br><span class="line">  console.log(&apos;immediate&apos;);</span><br><span class="line">&#125;);</span><br><span class="line">//</span><br><span class="line">$ node timeout_vs_immediate.js</span><br><span class="line">timeout</span><br><span class="line">immediate</span><br><span class="line"></span><br><span class="line">$ node timeout_vs_immediate.js</span><br><span class="line">immediate</span><br><span class="line">timeout</span><br><span class="line"></span><br><span class="line">with IO</span><br><span class="line">// timeout_vs_immediate.js</span><br><span class="line">const fs = require(&apos;fs&apos;);</span><br><span class="line"></span><br><span class="line">fs.readFile(__filename, () =&gt; &#123;</span><br><span class="line">  setTimeout(() =&gt; &#123;</span><br><span class="line">    console.log(&apos;timeout&apos;);</span><br><span class="line">  &#125;, 0);</span><br><span class="line">  setImmediate(() =&gt; &#123;</span><br><span class="line">    console.log(&apos;immediate&apos;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">//</span><br><span class="line">immediate</span><br><span class="line">timeout</span><br></pre></td></tr></table></figure><p>setImmediate()好处在于，如果有IO时会比setTimeout先执行</p><h2 id="process-nextTick"><a href="#process-nextTick" class="headerlink" title="process.nextTick()"></a>process.nextTick()</h2><p>它是个异步API，并没有出现在六个phase中，他并不属于eventloop的一部分，当操作完成后处理nextTickQueue而不管eventloop执行到哪个阶段，这个异步API依赖于C/C++处理 JavaScript</p><p>他的callbakcs会立即执行，<strong>直到执行完</strong>，eventloop才会正常工作（如果nextTick递归调用则会死循环）</p><p>为什么会出现这种设计？</p><p>出于所有<strong>接口都应该异步</strong>的设计思路</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function apiCall(arg, callback) &#123;</span><br><span class="line">  if (typeof arg !== &apos;string&apos;)</span><br><span class="line">    return process.nextTick(callback,</span><br><span class="line">                            new TypeError(&apos;argument should be string&apos;));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码段会校验参数，如果不正确，它将会把错误传递给回调。该API最近更新，允许传任何参给process.nextTick(),所以你不需要嵌套。仅在剩余代码执行之后我们会把错误反馈给用户，通过nextTick，我们保证<code>apiCal()</code>始终在用户胜于代码之后及eventloop继续之前，执行。为了达到这个目标，JS栈内存允许展开并且立即执行提供的callback，似的nextTick递归不会有报错。</p><h3 id="process-nextTick-vs-setImmediate"><a href="#process-nextTick-vs-setImmediate" class="headerlink" title="process.nextTick() vs setImmediate()"></a>process.nextTick() vs setImmediate()</h3><ul><li>process.nextTick()立刻执行</li><li>setImmediate()下次tick执行</li></ul><p>为什么需要process.nextTick()</p><ul><li>允许用户处理errors，清理不需要的资源，事件循环前 尝试重新连接</li><li>有时有必要在eventloop继续之前，在call stack unwound之后，让callback执行</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const server = net.createServer();</span><br><span class="line">server.on(&apos;connection&apos;, (conn) =&gt; &#123; &#125;);</span><br><span class="line"></span><br><span class="line">server.listen(8080);</span><br><span class="line">server.on(&apos;listening&apos;, () =&gt; &#123; &#125;);</span><br></pre></td></tr></table></figure><p>listen()的callback调用的是setImmiate()，除非传递Hostname，否则立即绑定端口。为了保证eventloop继续，他必须进入<code>poll</code> phase，这意味着，存在可能已经收到了连接，从而允许在侦听事件之前触发连接事件</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;What&quot;&gt;&lt;a href=&quot;#What&quot; class=&quot;headerlink&quot; title=&quot;What&quot;&gt;&lt;/a&gt;What&lt;/h1&gt;&lt;p&gt;eventloop使得单线程机制的node实现非阻塞I/O的机制，将任务通过libuv分发给线程池后，交由系统内核完成（多线
      
    
    </summary>
    
      <category term="Node" scheme="http://zehai.info/categories/Node/"/>
    
    
      <category term="整理" scheme="http://zehai.info/tags/%E6%95%B4%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>LeetCodeWeek2</title>
    <link href="http://zehai.info/2020/04/08/2020-04-08-LeetCodeWeek2/"/>
    <id>http://zehai.info/2020/04/08/2020-04-08-LeetCodeWeek2/</id>
    <published>2020-04-08T08:44:26.000Z</published>
    <updated>2020-04-19T05:24:08.067Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Prolem876-Submission-Detail"><a href="#Prolem876-Submission-Detail" class="headerlink" title="Prolem876-Submission Detail"></a>Prolem876-Submission Detail</h1><p>Given a non-empty, singly linked list with head node <code>head</code>, return a middle node of linked list.</p><p>If there are two middle nodes, return the second middle node.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,2,3,4,5]</span><br><span class="line">Output: Node 3 from this list (Serialization: [3,4,5])</span><br><span class="line">The returned node has value 3.  (The judge&apos;s serialization of this node is [3,4,5]).</span><br><span class="line">Note that we returned a ListNode object ans, such that:</span><br><span class="line">ans.val = 3, ans.next.val = 4, ans.next.next.val = 5, and ans.next.next.next = NULL.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,2,3,4,5,6]</span><br><span class="line">Output: Node 4 from this list (Serialization: [4,5,6])</span><br><span class="line">Since the list has two middle nodes with values 3 and 4, we return the second one.</span><br></pre></td></tr></table></figure><p><strong>Note:</strong></p><ul><li>The number of nodes in the given list will be between <code>1</code> and <code>100</code>.</li></ul><h2 id="key"><a href="#key" class="headerlink" title="key"></a>key</h2><p>题目输出单向链表的中间元素，有这么几个思路</p><ul><li>O(N)–&gt;遍历放数组，1/2输出<code>return A[t / 2]</code></li><li>O(N)–&gt;根据中间特点，mid前进一格，end前进两格</li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>第一次提交:0ms</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">middleNode</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        ListNode mid = head;</span><br><span class="line">        ListNode end = head;</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(end.next!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            mid = head.next;</span><br><span class="line">            ListNode tmp = mid;</span><br><span class="line">            i++;</span><br><span class="line">            <span class="keyword">int</span> j=i;</span><br><span class="line">            <span class="keyword">while</span>(j&gt;<span class="number">0</span>)&#123;<span class="comment">//搞复杂了</span></span><br><span class="line">                <span class="keyword">if</span>(tmp.next==<span class="keyword">null</span>)<span class="keyword">return</span> mid;</span><br><span class="line">                end = tmp.next;</span><br><span class="line">                tmp=tmp.next;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            head=head.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mid;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二次参考其他代码-提交：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public ListNode middleNode(ListNode head) &#123;</span><br><span class="line">        ListNode mid = head, end = head;</span><br><span class="line">        while (mid != null &amp;&amp; end.next != null) &#123;</span><br><span class="line">            mid = mid.next;</span><br><span class="line">            end = end.next.next;</span><br><span class="line">        &#125;</span><br><span class="line">        return mid;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Prolem876-Submission-Detail&quot;&gt;&lt;a href=&quot;#Prolem876-Submission-Detail&quot; class=&quot;headerlink&quot; title=&quot;Prolem876-Submission Detail&quot;&gt;&lt;/a&gt;Prole
      
    
    </summary>
    
      <category term="LeetCode" scheme="http://zehai.info/categories/LeetCode/"/>
    
    
      <category term="Easy" scheme="http://zehai.info/tags/Easy/"/>
    
  </entry>
  
  <entry>
    <title>LeetCodeWeek1</title>
    <link href="http://zehai.info/2020/04/05/2020-04-05-LeetCodeWeek1/"/>
    <id>http://zehai.info/2020/04/05/2020-04-05-LeetCodeWeek1/</id>
    <published>2020-04-05T14:32:05.000Z</published>
    <updated>2020-04-08T08:45:04.259Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Problem-Single-Number"><a href="#Problem-Single-Number" class="headerlink" title="Problem  Single Number"></a>Problem  Single Number</h1><p>好久没有刷题了，刚好遇到LeetCode，30天计划，打算强迫自己完成</p><p>Given a <strong>non-empty</strong> array of integers, every element appears <em>twice</em> except for one. Find that single one.</p><p><strong>Note:</strong></p><p>Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [2,2,1]</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [4,1,2,1,2]</span><br><span class="line">Output: 4</span><br></pre></td></tr></table></figure><h1 id="Key"><a href="#Key" class="headerlink" title="Key"></a>Key</h1><p>思路</p><ul><li>第一个思路O(n^2)去做类似于冒泡遍历的办法</li><li>借助Array.sort()可以迅速排序，然后O(n)的办法遍历得到结果</li><li>（以上是自己的思路，以下为LeetCode代码思考）</li><li><a href="## 异或">通过异或操作迅速比较</a></li><li>通过 Arrays.stream(nums).reduce(0, (x, y) -&gt; x ^ y)来更快迭代每个元素</li></ul><h2 id="Array-steam"><a href="#Array-steam" class="headerlink" title="Array.steam()"></a>Array.steam()</h2><p>以下参考<a href="https://blog.csdn.net/a13662080711/article/details/84928181" target="_blank" rel="noopener">CSDN</a></p><p>Stream 不是集合元素，它不是数据结构并不保存数据，它是有关算法和计算的，它更像一个高级版本的 Iterator。原始版本的 Iterator，用户只能显式地一个一个遍历元素并对其执行某些操作；高级版本的 Stream，用户只要给出需要对其包含的元素执行什么操作，比如 “过滤掉长度大于 10 的字符串”、“获取每个字符串的首字母”等，Stream 会隐式地在内部进行遍历，做出相应的数据转换。</p><p>Stream 就如同一个迭代器（Iterator），单向，不可往复，数据只能遍历一次，遍历过一次后即用尽了，就好比流水从面前流过，一去不复返。</p><p>而和迭代器又不同的是，Stream 可以并行化操作，迭代器只能命令式地、串行化操作。顾名思义，当使用串行方式去遍历时，每个 item 读完后再读下一个 item。而使用并行去遍历时，数据会被分成多个段，其中每一个都在不同的线程中处理，然后将结果一起输出。Stream 的并行操作依赖于 Java7 中引入的 Fork/Join 框架（JSR166y）来拆分任务和加速处理过程</p><p>简单说，对 Stream 的使用就是实现一个 filter-map-reduce 过程，产生一个最终结果，或者导致一个副作用（side effect）。</p><p>（以下为个人理解）</p><p>相对于Java中的Stream流，Java中也有，比如Array.reduce(),Array.foreach()等，通过回调函数的方式进行，</p><h2 id="异或"><a href="#异或" class="headerlink" title="异或"></a>异或</h2><p>|=：两个二进制对应位都为0时，结果等于0，否则结果等于1；</p><p>&amp;=：两个二进制的对应位都为1时，结果为1，否则结果等于0；</p><p>^=：两个二进制的对应位相同，结果为0，否则结果为1。</p><p>对于这道题来说，[2,2,1]</p><p>第零次遍历：init res=0,题目要求找出出现一次的数，所以这个数肯定存在</p><p>第一次遍历：res=2</p><p>第二次遍历：res=0，因为res^=2（即res=res^2）</p><p>第三次遍历：res=1结束遍历</p><p><strong>综上：常用^= 以及&gt;&gt;位运算符，C级别的性能</strong></p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><ul><li>对于异或方法（0ms）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> n : nums) &#123;</span><br><span class="line">            result ^= n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自己的方法就不贴了。。==感觉好蠢==写了半天。</p><h1 id="Problem-Move-Zeroes"><a href="#Problem-Move-Zeroes" class="headerlink" title="Problem  Move Zeroes"></a>Problem  Move Zeroes</h1><p>Given an array <code>nums</code>, write a function to move all <code>0</code>‘s to the end of it while maintaining the relative order of the non-zero elements.</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [0,1,0,3,12]</span><br><span class="line">Output: [1,3,12,0,0]</span><br></pre></td></tr></table></figure><p><strong>Note</strong>:</p><ol><li>You must do this <strong>in-place</strong> without making a copy of the array.</li><li>Minimize the total number of operations.</li></ol><h1 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h1><p>第一版：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">moveZeroes</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;nums.length-<span class="number">1</span>;j++)&#123;</span><br><span class="line">                    nums[j]=nums[j+<span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                nums[nums.length-<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原本根据题目的意思，想法就是找到一个0，整体往前移动一位，一把梭，但写完发现，<strong>本身没有必要整体前移</strong>，因为我的判断是num[i]是不是为0，所以只需要将0的个数记录下来，非0的元素前移，最后补0就可以了</p><p>第二版</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public void moveZeroes(int[] nums) &#123;</span><br><span class="line">         if (nums == null || nums.length == 0) return;        </span><br><span class="line"> </span><br><span class="line">        int insertPos = 0;</span><br><span class="line">        for (int num: nums) &#123;</span><br><span class="line">            if (num != 0) nums[insertPos++] = num;</span><br><span class="line">        &#125;        </span><br><span class="line"></span><br><span class="line">        while (insertPos &lt; nums.length) &#123;</span><br><span class="line">            nums[insertPos++] = 0;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Problem-Best-Time-to-Buy-and-Sell-Stock-II"><a href="#Problem-Best-Time-to-Buy-and-Sell-Stock-II" class="headerlink" title="Problem Best Time to Buy and Sell Stock II"></a>Problem Best Time to Buy and Sell Stock II</h1><p>Say you have an array for which the ith element is the price of a given stock on day i.</p><p>Design an algorithm to find the maximum profit. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times).</p><p>Note: You may not engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again).</p><p>Example 1:</p><p>Input: [7,1,5,3,6,4]<br>Output: 7<br>Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.<br>             Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.<br>Example 2:</p><p>Input: [1,2,3,4,5]<br>Output: 4<br>Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.<br>             Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are<br>             engaging multiple transactions at the same time. You must sell before buying again.<br>Example 3:</p><p>Input: [7,6,4,3,1]<br>Output: 0<br>Explanation: In this case, no transaction is done, i.e. max profit = 0.</p><h1 id="key"><a href="#key" class="headerlink" title="key"></a>key</h1><p>题目获取最大利润，本以为是通过动态规划DP来做，但是仔细一想，差值就能解决问题<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int maxProfit(int[] prices) &#123;</span><br><span class="line">        int res = 0;</span><br><span class="line">        for (int i = 0; i &lt; prices.length - 1; ++i) &#123;</span><br><span class="line">            if (prices[i] &lt; prices[i + 1]) &#123;</span><br><span class="line">                res += prices[i + 1] - prices[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="Problem-happy-Number"><a href="#Problem-happy-Number" class="headerlink" title="Problem happy Number"></a>Problem happy Number</h1><p>Write an algorithm to determine if a number is “happy”.</p><p>A happy number is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy numbers.</p><p><strong>Example:</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Input: 19</span><br><span class="line">Output: true</span><br><span class="line">Explanation: </span><br><span class="line">12 + 92 = 82</span><br><span class="line">82 + 22 = 68</span><br><span class="line">62 + 82 = 100</span><br><span class="line">12 + 02 + 02 = 1</span><br></pre></td></tr></table></figure><h1 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h1><p>第一版</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public boolean isHappy(int n) &#123;</span><br><span class="line">         int sum =0;</span><br><span class="line">        while (sum != 1) &#123;</span><br><span class="line">            if(sum!=0)&#123;</span><br><span class="line">                n=sum;sum=0;</span><br><span class="line">            &#125;</span><br><span class="line">            while (n &gt; 0) &#123;</span><br><span class="line">                int t = n % 10;</span><br><span class="line">                sum += t * t;</span><br><span class="line">                n /= 10;</span><br><span class="line">            &#125;</span><br><span class="line">            if(sum==0)return false;</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实写完这个框架我就想起来了，可能在计算上存在死循环，就比如</p><p><img src="../img/aHR0cHM6Ly9waWMubGVldGNvZGUtY24uY29tL0ZpZ3VyZXMvMjAyL2ltYWdlMi5wbmc.jfif" alt="在这里插入图片描述"></p><p>如果这样的题目就进入了死循环，所以干脆直接通过hashset的方式进行过滤</p><p>添加了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(set.contains(sum))&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    set.add(sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整体代码如下：</p><p>Runtime: 5 ms, faster than 9.41% of Java online submissions for Happy Number.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isHappy</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    Set&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    <span class="keyword">int</span> sum =<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (sum != <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(sum!=<span class="number">0</span>)&#123;</span><br><span class="line">            n=sum;sum=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> t = n % <span class="number">10</span>;</span><br><span class="line">            sum += t * t;</span><br><span class="line">            n /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(sum==<span class="number">0</span>)<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(set.contains(sum))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            set.add(sum);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Problem-Single-Number&quot;&gt;&lt;a href=&quot;#Problem-Single-Number&quot; class=&quot;headerlink&quot; title=&quot;Problem  Single Number&quot;&gt;&lt;/a&gt;Problem  Single Number
      
    
    </summary>
    
      <category term="LeetCode" scheme="http://zehai.info/categories/LeetCode/"/>
    
    
      <category term="Easy" scheme="http://zehai.info/tags/Easy/"/>
    
  </entry>
  
  <entry>
    <title>UniqueBinarySearchTrees</title>
    <link href="http://zehai.info/2020/03/22/2020-03-22-UniqueBinarySearchTrees/"/>
    <id>http://zehai.info/2020/03/22/2020-03-22-UniqueBinarySearchTrees/</id>
    <published>2020-03-22T04:37:47.000Z</published>
    <updated>2020-03-22T06:48:23.290Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Problem-96"><a href="#Problem-96" class="headerlink" title="Problem 96"></a>Problem 96</h1><p>Given <em>n</em>, how many structurally unique <strong>BST’s</strong> (binary search trees) that store values 1 … <em>n</em>?</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Input: 3</span><br><span class="line">Output: 5</span><br><span class="line">Explanation:</span><br><span class="line">Given n = 3, there are a total of 5 unique BST&apos;s:</span><br><span class="line"></span><br><span class="line">   1         3     3      2      1</span><br><span class="line">    \       /     /      / \      \</span><br><span class="line">     3     2     1      1   3      2</span><br><span class="line">    /     /       \                 \</span><br><span class="line">   2     1         2                 3</span><br></pre></td></tr></table></figure><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>题目其实相对比较简单，给出1~n，给出能够成的BST的数目，题目一开始的想法是用1~n去生成BST，看一下有多少种情况，然后做了很多无用功=.=</p><p>越写越不对劲后来查了一下，这道题是有数学规律的</p><p>BST有几个特点</p><ul><li>中序遍历依次增（大于等于）</li><li>左右自述也是BST（recursion）</li></ul><p>所以在i作为根节点时，左子树i-1个节点，右子树n-i个节点</p><p>数学的思想在于<strong>唯一二叉树的个数为左子树结点的个数乘以右子树的个数。而根节点可以从1到n 中选择</strong>，所以有</p><blockquote><p>for(int i=1;i&lt;=n;++i)<br>           sum+=numTrees(i-1)*numTrees(n-i);</p></blockquote><p>再加上边际控制n&lt;=1–&gt;sum=1</p><p>就有了解题的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numTrees</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n&lt;=<span class="number">1</span>)    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">            sum+=numTrees(i-<span class="number">1</span>)*numTrees(n-i);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sum;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Solution-95-Unique-Binary-Search-Trees-II"><a href="#Solution-95-Unique-Binary-Search-Trees-II" class="headerlink" title="Solution 95 Unique Binary Search Trees II"></a>Solution 95 Unique Binary Search Trees II</h2><p>万幸，自己折腾的生成BST的代码没白写</p><p>Given an integer <em>n</em>, generate all structurally unique <strong>BST’s</strong> (binary search trees) that store values 1 … <em>n</em>.</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Input: 3</span><br><span class="line">Output:</span><br><span class="line">[</span><br><span class="line">  [1,null,3,2],</span><br><span class="line">  [3,2,null,1],</span><br><span class="line">  [3,1,null,null,2],</span><br><span class="line">  [2,1,3],</span><br><span class="line">  [1,null,2,null,3]</span><br><span class="line">]</span><br><span class="line">Explanation:</span><br><span class="line">The above output corresponds to the 5 unique BST&apos;s shown below:</span><br><span class="line"></span><br><span class="line">   1         3     3      2      1</span><br><span class="line">    \       /     /      / \      \</span><br><span class="line">     3     2     1      1   3      2</span><br><span class="line">    /     /       \                 \</span><br><span class="line">   2     1         2                 3</span><br></pre></td></tr></table></figure><p>看题目是前序遍历,我们从上向下查找，外面一层大循环遍历根节点</p><blockquote><p>for(int i=start ;i&lt;=end;i++){}</p></blockquote><p>确定了i节点后可以通过递归写出根节点i的情况下的左右子树</p><blockquote><p> List<treenode> leftChild = recursion(start, i - 1);</treenode></p><p>List<treenode> rightChild = recursion(i + 1, end);</treenode></p></blockquote><p>然后遍历左右子树的每个元素，两层for循环嵌套</p><blockquote><p>  for(TreeNode left : leftChild) {<br>                for(TreeNode right : rightChild) {<br>                    TreeNode root = new TreeNode(i);<br>                    root.left = left;<br>                    root.right = right;<br>                    res.add(root);<br>                }<br>            }</p></blockquote><p>得到最后的res进行返回，以及处理一下start&gt;end的边际条件就完成了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;TreeNode&gt; <span class="title">generateTrees</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">if</span>(n &lt; <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;TreeNode&gt;();</span><br><span class="line">        <span class="keyword">return</span> recursion(<span class="number">1</span>, n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;TreeNode&gt; <span class="title">recursion</span><span class="params">(<span class="keyword">int</span> start,<span class="keyword">int</span> end)</span></span>&#123;</span><br><span class="line">        List&lt;TreeNode&gt; res = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        <span class="keyword">if</span>(start &gt; end) &#123;</span><br><span class="line">            res.add(<span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = start;i&lt;=end;i++)&#123;</span><br><span class="line">            List&lt;TreeNode&gt; leftChild = recursion(start, i - <span class="number">1</span>);</span><br><span class="line">            List&lt;TreeNode&gt; rightChild = recursion(i + <span class="number">1</span>, end);</span><br><span class="line">            <span class="keyword">for</span>(TreeNode left : leftChild) &#123;</span><br><span class="line">                <span class="keyword">for</span>(TreeNode right : rightChild) &#123;</span><br><span class="line">                    TreeNode root = <span class="keyword">new</span> TreeNode(i);</span><br><span class="line">                    root.left = left;</span><br><span class="line">                    root.right = right;</span><br><span class="line">                    res.add(root);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>问题当时卡在   </p><p>List<treenode> leftChild = recursion(start, i - 1);<br>List<treenode> rightChild = recursion(i + 1, end);</treenode></treenode></p><p>当然采用recursion虽然简洁易懂，但两条题目的复杂度都相对较高，是递归的压栈造成的，很多可能相同点的地方可能计算了两遍，导致了两道题目都是打败了5%的solution，当然我们可以通过dp(来自LeetCode)的方式来进行完成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;TreeNode&gt; <span class="title">generateTrees</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;TreeNode&gt;[][] dp = <span class="keyword">new</span> ArrayList[n][n];</span><br><span class="line">        <span class="keyword">return</span> helper(<span class="number">1</span>, n, dp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;TreeNode&gt; <span class="title">helper</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end, List&lt;TreeNode&gt;[][] dp)</span></span>&#123;</span><br><span class="line">        List&lt;TreeNode&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(start &gt; end)&#123;</span><br><span class="line">            res.add(<span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(dp[start - <span class="number">1</span>][end - <span class="number">1</span>] != <span class="keyword">null</span> &amp;&amp; !dp[start - <span class="number">1</span>][end - <span class="number">1</span>].isEmpty())&#123;</span><br><span class="line">            <span class="keyword">return</span> dp[start - <span class="number">1</span>][end - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = start ; i &lt;= end ; i++) &#123;</span><br><span class="line">            List&lt;TreeNode&gt; left = helper(start, i - <span class="number">1</span>, dp);</span><br><span class="line">            List&lt;TreeNode&gt; right = helper(i + <span class="number">1</span>, end, dp);</span><br><span class="line">            <span class="keyword">for</span>(TreeNode a : left)&#123;</span><br><span class="line">                <span class="keyword">for</span>(TreeNode b : right)&#123;</span><br><span class="line">                    TreeNode node = <span class="keyword">new</span> TreeNode(i);</span><br><span class="line">                    node.left = a;</span><br><span class="line">                    node.right = b;</span><br><span class="line">                    res.add(node);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[start - <span class="number">1</span>][end - <span class="number">1</span>] = res;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Problem-96&quot;&gt;&lt;a href=&quot;#Problem-96&quot; class=&quot;headerlink&quot; title=&quot;Problem 96&quot;&gt;&lt;/a&gt;Problem 96&lt;/h1&gt;&lt;p&gt;Given &lt;em&gt;n&lt;/em&gt;, how many structurall
      
    
    </summary>
    
      <category term="LeetCode" scheme="http://zehai.info/categories/LeetCode/"/>
    
    
      <category term="Medium" scheme="http://zehai.info/tags/Medium/"/>
    
  </entry>
  
  <entry>
    <title>QUIC</title>
    <link href="http://zehai.info/2020/03/16/2020-03-16-QUIC/"/>
    <id>http://zehai.info/2020/03/16/2020-03-16-QUIC/</id>
    <published>2020-03-16T10:24:42.000Z</published>
    <updated>2020-03-17T03:01:57.486Z</updated>
    
    <content type="html"><![CDATA[<h1 id="What"><a href="#What" class="headerlink" title="What"></a>What</h1><p><strong>快速UDP网络连接（Quick UDP Internet Connections，QUIC）</strong></p><p>是一种实验性的传输层网络传输协议，由Google开发，在2013年实现。QUIC使用UDP协议，它在两个端点间创建连线，且支持多路复用连线。在设计之初，QUIC希望能够提供等同于SSL/TLS层级的网络安全保护，减少数据传输及创建连线时的延迟时间，双向控制带宽，以避免网络拥塞。Google希望使用这个协议来取代TCP协议，使网页传输速度加快。2018年10月，IETF的HTTP及QUIC工作小组正式将基于QUIC协议的HTTP（HTTP over QUIC）重命名为HTTP/3以为确立下一代规范做准备。</p><h1 id="Feature"><a href="#Feature" class="headerlink" title="Feature"></a>Feature</h1><p>compared with HTTP2+TCP+TLS</p><ul><li>无TCP握手及TLS握手–&gt;快</li><li>改进的拥塞控制</li><li>避免队头阻塞的多路复用</li><li>前向冗余纠错</li></ul><h1 id="Reason"><a href="#Reason" class="headerlink" title="Reason"></a>Reason</h1><ul><li>中间设备僵化（防火墙，NAT等硬件设备固话443，80端口，NAT擦写地址，抛弃不认识的选项字段等旧规则）</li><li>依赖操作系统实现导致的协议僵化（依赖底层TCP很难快迭代）</li><li>建立连接的握手延迟大（HTTPS/2 use TSL 使得TCP，TLS握手时间较长）</li><li>队头阻塞（序号顺序接受，前面丢了后面接受直接丢弃）</li></ul><h1 id="Why"><a href="#Why" class="headerlink" title="Why"></a>Why</h1><h2 id="RTT"><a href="#RTT" class="headerlink" title="RTT"></a>RTT</h2><p>0RTT (0次Round-Trip Time,0次往返)建连可以说是 QUIC 相比 HTTP2 最大的性能优势。那什么是 0RTT 建连呢？这里面有两层含义。</p><ol><li>传输层 0RTT 就能建立连接。</li><li>加密层 0RTT 就能建立加密连接。</li></ol><p><img src="../img/v2-b4b3eb89464b192eed0304e5647a2d26_r.jpg" alt="preview"></p><blockquote><p>一个完整的 TLS 握手需要两次：</p><ol><li>Client 发送 ClientHello；Server 回复 ServerHello</li><li>Client 回复最终确定的 Key，Finished；Server 回复 Finished</li><li>握手完毕，Client 发送加密后的 HTTP 请求；Server 回复加密后的 HTTP 响应</li></ol><p>TLS Session Resumption</p><ol><li>Client 发送 ClientHello（包含 Session ID）；Server 回复 ServerHello 和 Finished</li><li>握手完毕，Client 发送加密后的 HTTP 请求；Server 回复加密后的 HTTP 响应</li></ol><p>TLS 0RTT</p><p>0 RTT 是 TLSv1.3 的可选功能。客户端和服务器第一次建立会话时，会生成一个 PSK（pre-shared key）。服务器会用 ticket key 去加密 PSK，作为 Session Ticket 返回。 客户端再次和服务器建立会话时，会先用 PSK 去加密 HTTP 请求，然后把加密后的内容发给服务器。服务器解密 PSK，然后再用 PSK 去解密 HTTP 请求，并加密 HTTP 响应。</p><p> HTTPS 握手已经跟 HTTP 请求合并到一起</p><p>​    1.Client 发送 ClientHello（包含 PSK）和加密后的 HTTP 请求；Server 回复 ServerHello 和 Finished 和加密后的 HTTP 响应。</p></blockquote><h2 id="congestion-control"><a href="#congestion-control" class="headerlink" title="congestion control"></a>congestion control</h2><p>TCP采用了</p><ul><li>慢启动</li><li>拥塞避免</li><li>快重传</li><li>快恢复</li></ul><p>QUCI默认支持Cubic，另外支持CubicBytes,Reno,RenoBytes,BBR,PCC</p><h2 id="Pluggable"><a href="#Pluggable" class="headerlink" title="Pluggable"></a>Pluggable</h2><p>可插拔，即灵活生效不需要重启或改变底层</p><ul><li>应用层实现不同的拥塞控制算法，不需要底层支持</li><li>单个应用程序的不同连接支持不同的拥塞控制，如BBR，Cubic</li><li>应用程序无需变动直接变更拥塞控制，reload生效</li></ul><p>STGW在配置层面进行了优化，针对不同业务，不同网络芝士，不同RTT，使用不同拥塞控制</p><h2 id="单递增的Packet-Number"><a href="#单递增的Packet-Number" class="headerlink" title="单递增的Packet Number"></a>单递增的Packet Number</h2><p>为了保障TCP的可靠性，使用Seq（sequenceNumber 序号）和ack来确认,N丢失，重传N（问题：N如果重传两次，收到一个ACK，不知道是哪个的ACK）</p><p>QUIC使用PacketNumber代替seq，并且packetnumber严格递增，也就是说就算 Packet N 丢失了，重传的 Packet N 的 Packet Number 已经不是 N，而是一个比 N 大的值,另外支持Stream offset更好支持多个packet传输</p><h2 id="不允许Reneging"><a href="#不允许Reneging" class="headerlink" title="不允许Reneging"></a>不允许Reneging</h2><p>reneging：TCP通信时，如果发送序列中间某个数据包丢失，TCP会通过重传最后确认的包开始的后续包，这样原先已经正确传输的包也可能重复发送，急剧降低了TCP性能。</p><p>为改善这种情况，发展出SACK(Selective Acknowledgment, 选择性确认)技术，使TCP只重新发送丢失的包，不用发送后续所有的包，而且提供相应机制使接收方能告诉发送方哪些数据丢失，哪些数据重发了，哪些数据已经提前收到等</p><p>QUIC禁止reneging</p><h2 id="更多的ack块"><a href="#更多的ack块" class="headerlink" title="更多的ack块"></a>更多的ack块</h2><p>TCP 的 Sack 选项能够告诉发送方已经接收到的连续 Segment 的范围，方便发送方进行选择性重传。</p><p>由于 TCP 头部最大只有 60 个字节，标准头部占用了 20 字节，所以 Tcp Option 最大长度只有 40 字节，再加上 Tcp Timestamp option 占用了 10 个字节 [25]，所以留给 Sack 选项的只有 30 个字节。</p><p>每一个 Sack Block 的长度是 8 个，加上 Sack Option 头部 2 个字节，也就意味着 Tcp Sack Option 最大只能提供 3 个 Block。</p><p>但是 Quic Ack Frame 可以同时提供 256 个 Ack Block，在丢包率比较高的网络下，更多的 Sack Block 可以提升网络的恢复速度，减少重传量。</p><h2 id="ack-delay时间"><a href="#ack-delay时间" class="headerlink" title="ack delay时间"></a>ack delay时间</h2><p>收到客户端请求到响应的过程时间成为ack delay,QUIC的RTT需要减掉ack delay（计算我是没看懂。。。）</p><h2 id="基于stream和connection级别的流量控制"><a href="#基于stream和connection级别的流量控制" class="headerlink" title="基于stream和connection级别的流量控制"></a>基于stream和connection级别的流量控制</h2><p>作用：</p><ul><li>stream可以认为是一条HTTP请求</li><li>Connection可以类比一条TCP连接，在connection上存在多条stream</li></ul><p>tcp承载多个http请求</p><ol><li>window_update告诉对方自己接受的字节数</li><li>blockFrame告诉对方由于流量控制被阻塞，无法发送数据</li><li>stream可用窗口=最大窗口数-收到的最大偏移数</li><li>connection可用窗口=$\sum$streams可用窗口</li></ol><h2 id="没有队头阻塞的多路复用"><a href="#没有队头阻塞的多路复用" class="headerlink" title="没有队头阻塞的多路复用"></a>没有队头阻塞的多路复用</h2><p>QUIC 的多路复用和 HTTP2 类似。在一条 QUIC 连接上可以并发发送多个 HTTP 请求 (stream)。但是 QUIC 的多路复用相比 HTTP2 有一个很大的优势。</p><p>QUIC 一个连接上的多个 stream 之间没有依赖。这样假如 stream2 丢了一个 udp packet，也只会影响 stream2 的处理。不会影响 stream2 之前及之后的 stream 的处理。</p><p>这也就在很大程度上缓解甚至消除了队头阻塞的影响。</p><p>HTTP2 在一个 TCP 连接上同时发送 4 个 Stream。其中 Stream1 已经正确到达，并被应用层读取。但是 Stream2 的第三个 tcp segment 丢失了，TCP 为了保证数据的可靠性，需要发送端重传第 3 个 segment 才能通知应用层读取接下去的数据，虽然这个时候 Stream3 和 Stream4 的全部数据已经到达了接收端，但都被阻塞住了。</p><p>不仅如此，由于 HTTP2 强制使用 TLS，还存在一个 TLS 协议层面的队头阻塞 </p><p>Record 是 TLS 协议处理的最小单位，最大不能超过 16K，一些服务器比如 Nginx 默认的大小就是 16K。由于一个 record 必须经过数据一致性校验才能进行加解密，所以一个 16K 的 record，就算丢了一个字节，也会导致已经接收到的 15.99K 数据无法处理，因为它不完整。</p><p>那 QUIC 多路复用为什么能避免上述问题呢？</p><ol><li>QUIC 最基本的传输单元是 Packet，不会超过 MTU 的大小，整个加密和认证过程都是基于 Packet 的，不会跨越多个 Packet。这样就能避免 TLS 协议存在的队头阻塞。</li><li>Stream 之间相互独立，比如 Stream2 丢了一个 Pakcet，不会影响 Stream3 和 Stream4。不存在 TCP 队头阻塞。</li></ol><p>当然，并不是所有的 QUIC 数据都不会受到队头阻塞的影响，比如 QUIC 当前也是使用 Hpack 压缩算法 [10]，由于算法的限制，丢失一个头部数据时，可能遇到队头阻塞。</p><p>总体来说，QUIC 在传输大量数据时，比如视频，受到队头阻塞的影响很小。</p><h2 id="加密认证的报文"><a href="#加密认证的报文" class="headerlink" title="加密认证的报文"></a>加密认证的报文</h2><p>TCP 协议头部没有经过任何加密和认证，所以在传输过程中很容易被中间网络设备篡改，注入和窃听。比如修改序列号、滑动窗口。这些行为有可能是出于性能优化，也有可能是主动攻击。</p><p>但是 QUIC 的 packet 可以说是武装到了牙齿。除了个别报文比如 PUBLIC_RESET 和 CHLO，所有报文头部都是经过认证的，报文 Body 都是经过加密的。</p><p>这样只要对 QUIC 报文任何修改，接收端都能够及时发现，有效地降低了安全风险。</p><h2 id="连接迁移"><a href="#连接迁移" class="headerlink" title="连接迁移"></a>连接迁移</h2><p>一条 TCP 连接 [17] 是由四元组标识的（源 IP，源端口，目的 IP，目的端口）,当其中任何一个元素发生变化时，这条连接依然维持着，能够保持业务逻辑不中断</p><p>比如大家使用手机在 WIFI 和 4G 移动网络切换时，客户端的 IP 肯定会发生变化，需要重新建立和服务端的 TCP 连接。</p><p>又比如大家使用公共 NAT 出口时，有些连接竞争时需要重新绑定端口，导致客户端的端口发生变化，同样需要重新建立 TCP 连接。</p><p>针对 TCP 的连接变化，MPTCP[5] 其实已经有了解决方案，但是由于 MPTCP 需要操作系统及网络协议栈支持，部署阻力非常大，目前并不适用。</p><p>所以从 TCP 连接的角度来讲，这个问题是无解的。</p><p>那 QUIC 是如何做到连接迁移呢？很简单，任何一条 QUIC 连接不再以 IP 及端口四元组标识，而是以一个<code>64 位的随机数</code>作为 ID 来标识，这样就算 IP 或者端口发生变化时，只要 ID 不变，这条连接依然维持着，上层业务逻辑感知不到变化，不会中断，也就不需要重连。</p><p>由于这个 ID 是客户端随机产生的，并且长度有 64 位，所以冲突概率非常低。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>此外，QUIC 还能实现前向冗余纠错，在重要的包比如握手消息发生丢失时，能够根据冗余信息还原出握手消息。</p><p>QUIC 还能实现证书压缩，减少证书传输量，针对包头进行验证等。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;What&quot;&gt;&lt;a href=&quot;#What&quot; class=&quot;headerlink&quot; title=&quot;What&quot;&gt;&lt;/a&gt;What&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;快速UDP网络连接（Quick UDP Internet Connections，QUIC）&lt;/strong
      
    
    </summary>
    
      <category term="Introduction" scheme="http://zehai.info/categories/Introduction/"/>
    
    
      <category term="QUIC" scheme="http://zehai.info/tags/QUIC/"/>
    
  </entry>
  
  <entry>
    <title>Traversal</title>
    <link href="http://zehai.info/2020/03/15/2020-03-15-BinaryTreeLevelOrderTraversal/"/>
    <id>http://zehai.info/2020/03/15/2020-03-15-BinaryTreeLevelOrderTraversal/</id>
    <published>2020-03-15T09:23:39.000Z</published>
    <updated>2020-03-16T08:06:33.202Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Problem-102-107"><a href="#Problem-102-107" class="headerlink" title="Problem 102 107"></a>Problem 102 107</h1><p>Given a binary tree, return the <em>level order</em> traversal of its nodes’ values. (ie, from left to right, level by level).</p><p>For example:<br>Given binary tree <code>[3,9,20,null,null,15,7]</code>,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  3</span><br><span class="line"> / \</span><br><span class="line">9  20</span><br><span class="line">  /  \</span><br><span class="line"> 15   7</span><br></pre></td></tr></table></figure><p>return its level order traversal as:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  [3],</span><br><span class="line">  [9,20],</span><br><span class="line">  [15,7]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>key：</p><ul><li>层序遍历</li><li>递归</li></ul><p>在Java中可以先定义一个List保存结果,List里面再嵌入ArrayList来记录每一层的数据</p><blockquote><p>List&lt;List<integer>&gt; res = new ArrayList&lt;&gt;();</integer></p><p>res.add(new ArrayList&lt;&gt;());</p></blockquote><p>将递归中的root节点追加进入res.get(level)的数组中</p><blockquote><p>  res.get(level).add(root.val);</p></blockquote><p>通过递归完成算法</p><blockquote><p>travelsal(root.left,level+1);<br>travelsal(root.right,level+1);</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; levelOrder(TreeNode root) &#123;</span><br><span class="line">        travelsal(root, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span>  res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">travelsal</span><span class="params">(TreeNode root,<span class="keyword">int</span> level)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(level==res.size())&#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">        &#125;</span><br><span class="line">        res.get(level).add(root.val);</span><br><span class="line">        travelsal(root.left,level+<span class="number">1</span>);</span><br><span class="line">        travelsal(root.right,level+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>接下来是107，是102的变种，改成了叶节点开始遍历</p><p>difficulty：Easy</p><p>Given a binary tree, return the <em>bottom-up level order</em> traversal of its nodes’ values. (ie, from left to right, level by level from leaf to root).</p><p>For example:<br>Given binary tree <code>[3,9,20,null,null,15,7]</code>,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  3</span><br><span class="line"> / \</span><br><span class="line">9  20</span><br><span class="line">  /  \</span><br><span class="line"> 15   7</span><br></pre></td></tr></table></figure><p>return its bottom-up level order traversal as:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  [15,7],</span><br><span class="line">  [9,20],</span><br><span class="line">  [3]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h1 id="key"><a href="#key" class="headerlink" title="key"></a>key</h1><p>题目本身没有设置太多的难度，我们只需要将<strong>level</strong>实现数组的内层数组的倒序就可以了</p><blockquote><p> res.get(level).add(root.val);<br> change this code to<br> res.get(res.size()-i-1).add(root.val);</p></blockquote><p>原本判断新增数组的语句变成在第0个位置新增一个数组</p><blockquote><p>if(i &gt;= res.size()){<br>    res.add(0,new ArrayList<integer>());<br>}</integer></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Problem-102-107&quot;&gt;&lt;a href=&quot;#Problem-102-107&quot; class=&quot;headerlink&quot; title=&quot;Problem 102 107&quot;&gt;&lt;/a&gt;Problem 102 107&lt;/h1&gt;&lt;p&gt;Given a binary tre
      
    
    </summary>
    
      <category term="LeetCode" scheme="http://zehai.info/categories/LeetCode/"/>
    
    
      <category term="Medium" scheme="http://zehai.info/tags/Medium/"/>
    
  </entry>
  
  <entry>
    <title>Egg插件到底封装了啥</title>
    <link href="http://zehai.info/2020/03/13/2020-03-13-Egg%E6%8F%92%E4%BB%B6%E5%88%B0%E5%BA%95%E5%B0%81%E8%A3%85%E4%BA%86%E5%95%A5/"/>
    <id>http://zehai.info/2020/03/13/2020-03-13-Egg插件到底封装了啥/</id>
    <published>2020-03-13T05:23:12.000Z</published>
    <updated>2020-03-15T09:24:40.197Z</updated>
    
    <content type="html"><![CDATA[<p>迫于比较好奇，下载了egg-redis，看看他如何将node直接可以引用的包，封装成为egg的插件<br><img src="../img/1584077589714.png" alt="1584077589714"></p><p>核心代码通过</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;迫于比较好奇，下载了egg-redis，看看他如何将node直接可以引用的包，封装成为egg的插件&lt;br&gt;&lt;img src=&quot;../img/1584077589714.png&quot; alt=&quot;1584077589714&quot;&gt;&lt;/p&gt;
&lt;p&gt;核心代码通过&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://zehai.info/2020/03/11/2020-03-11-MaximumDepthOfBinaryTree/"/>
    <id>http://zehai.info/2020/03/11/2020-03-11-MaximumDepthOfBinaryTree/</id>
    <published>2020-03-11T09:47:55.000Z</published>
    <updated>2020-04-11T02:31:54.741Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Prolem-104"><a href="#Prolem-104" class="headerlink" title="Prolem 104"></a>Prolem 104</h1><p>Given a binary tree, find its maximum depth.</p><p>The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.</p><p><strong>Note:</strong> A leaf is a node with no children.</p><p><strong>Example:</strong></p><p>Given binary tree <code>[3,9,20,null,null,15,7]</code>,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  3</span><br><span class="line"> / \</span><br><span class="line">9  20</span><br><span class="line">  /  \</span><br><span class="line"> 15   7</span><br></pre></td></tr></table></figure><p>return its depth = 3.</p><h2 id="key"><a href="#key" class="headerlink" title="key"></a>key</h2><p>判断树的深浅，采用</p><blockquote><p>int left = max(root.left);<br><strong>int</strong> right = max(root.right);<br><strong>return</strong> Math.max(left,right) + 1; </p></blockquote><blockquote><p>//或者简写</p><p>return Math.max(max(root.left) + 1, max(root.right) + 1);</p></blockquote><p>进行递归</p><blockquote><p>Runtime: 0 ms, faster than 100.00% of Java online submissions for Maximum Depth of Binary Tree.</p><p>Memory Usage: 39.2 MB, less than 94.62% of Java online submissions for Maximum Depth of Binary Tree.</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> max(root);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">max</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Math.max(max(root.left) + <span class="number">1</span>, max(root.right) + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Prolem-104&quot;&gt;&lt;a href=&quot;#Prolem-104&quot; class=&quot;headerlink&quot; title=&quot;Prolem 104&quot;&gt;&lt;/a&gt;Prolem 104&lt;/h1&gt;&lt;p&gt;Given a binary tree, find its maximum 
      
    
    </summary>
    
      <category term="LeetCode" scheme="http://zehai.info/categories/LeetCode/"/>
    
    
      <category term="Easy" scheme="http://zehai.info/tags/Easy/"/>
    
  </entry>
  
  <entry>
    <title>SymmetricTree</title>
    <link href="http://zehai.info/2020/03/10/2020-03-10-SymmetricTree/"/>
    <id>http://zehai.info/2020/03/10/2020-03-10-SymmetricTree/</id>
    <published>2020-03-10T10:33:33.000Z</published>
    <updated>2020-03-11T09:49:19.334Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Problem101"><a href="#Problem101" class="headerlink" title="Problem101"></a>Problem101</h1><p>Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).</p><p>For example, this binary tree <code>[1,2,2,3,4,4,3]</code> is symmetric:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    1</span><br><span class="line">   / \</span><br><span class="line">  2   2</span><br><span class="line"> / \ / \</span><br><span class="line">3  4 4  3</span><br></pre></td></tr></table></figure><p>But the following <code>[1,2,2,null,3,null,3]</code> is not:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  1</span><br><span class="line"> / \</span><br><span class="line">2   2</span><br><span class="line"> \   \</span><br><span class="line"> 3    3</span><br></pre></td></tr></table></figure><p><strong>Note:</strong><br>Bonus points if you could solve it both recursively and iteratively.</p><h2 id="key"><a href="#key" class="headerlink" title="key"></a>key</h2><p>一道验证树是否是对称的问题，主要采取递归的方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Definition for a binary tree node.</span><br><span class="line"> * public class TreeNode &#123;</span><br><span class="line"> *     int val;</span><br><span class="line"> *     TreeNode left;</span><br><span class="line"> *     TreeNode right;</span><br><span class="line"> *     TreeNode(int x) &#123; val = x; &#125;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span><br><span class="line">class Solution &#123;</span><br><span class="line">    public boolean isSymmetric(TreeNode root) &#123;</span><br><span class="line">        return isMirror(root,root);</span><br><span class="line">    &#125;</span><br><span class="line">    public boolean isMirror(TreeNode root,TreeNode self)&#123;</span><br><span class="line">        if(root==null &amp;&amp; self==null)return true;</span><br><span class="line">        if(root==null ||self==null) return false;</span><br><span class="line">        return root.val==self.val &amp;&amp; isMirror(root.left,self.right)&amp;&amp;isMirror(root.right,self.left);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Problem101&quot;&gt;&lt;a href=&quot;#Problem101&quot; class=&quot;headerlink&quot; title=&quot;Problem101&quot;&gt;&lt;/a&gt;Problem101&lt;/h1&gt;&lt;p&gt;Given a binary tree, check whether it 
      
    
    </summary>
    
      <category term="LeetCode" scheme="http://zehai.info/categories/LeetCode/"/>
    
    
      <category term="Easy" scheme="http://zehai.info/tags/Easy/"/>
    
  </entry>
  
  <entry>
    <title>AMDvsCMD</title>
    <link href="http://zehai.info/2020/03/09/2020-03-09-AMDvsCMD/"/>
    <id>http://zehai.info/2020/03/09/2020-03-09-AMDvsCMD/</id>
    <published>2020-03-09T02:46:11.000Z</published>
    <updated>2020-03-11T09:49:26.024Z</updated>
    
    <content type="html"><![CDATA[<p>AMD:Asynchronous Module Definition (RequireJS)</p><p>CMD:<a href="https://github.com/cmdjs/specification/blob/master/draft/module.md" target="_blank" rel="noopener">Common Module Definition</a>（SeaJS）</p><table><thead><tr><th></th><th>AMD</th><th>CMD</th></tr></thead><tbody><tr><td>1.</td><td>提前执行</td><td>延迟执行（类似饿汉模式）</td></tr><tr><td>2.</td><td>依赖前置</td><td>依赖就近</td></tr><tr><td>3.</td><td>浏览器（加载缓慢，异步load更好）</td><td>服务器端</td></tr><tr><td>4.</td><td>异步模块定义</td><td>通用模块定义</td></tr></tbody></table><h1 id="AMD"><a href="#AMD" class="headerlink" title="AMD"></a>AMD</h1><p>待补充，import-export</p><h1 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h1><h2 id="define-Function"><a href="#define-Function" class="headerlink" title="define Function"></a>define Function</h2><p>一个文件就是一个模块，在我们的代码外层，会套上一层CMD规范,这也就是为什么我们可以<strong>直接引用require,export,module的原因</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">define(function(require, exports, module) &#123;</span><br><span class="line">  // code</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>单个参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">define(factory)</span><br><span class="line">param--&gt;factory:funtion|Object|String</span><br><span class="line">define(&#123; &quot;foo&quot;: &quot;bar&quot; &#125;);</span><br><span class="line">define(&apos;I am a template. My name is &#123;&#123;name&#125;&#125;.&apos;);</span><br></pre></td></tr></table></figure><p>多个参数define <code>define(id?, deps?, factory)</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">define(&apos;hello&apos;, [&apos;jquery&apos;], function(require, exports, module) &#123;</span><br><span class="line">  // code</span><br><span class="line">&#125;);</span><br><span class="line">id：String模块标识</span><br><span class="line">deps：Array模块依赖</span><br></pre></td></tr></table></figure><p>define.cmd Object</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if (typeof define === &quot;function&quot; &amp;&amp; define.cmd) &#123;</span><br><span class="line">  // 有 Sea.js 等 CMD 模块加载器存在</span><br><span class="line">&#125;</span><br><span class="line">//用来判断当前页面是否有CMD模块加载器</span><br></pre></td></tr></table></figure><h2 id="require-Function"><a href="#require-Function" class="headerlink" title="require Function"></a>require Function</h2><p>同步加载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">define(function(require, exports) &#123;</span><br><span class="line"></span><br><span class="line">  // 获取模块 a 的接口</span><br><span class="line">  var a = require(&apos;./a&apos;);</span><br><span class="line"></span><br><span class="line">  // 调用模块 a 的方法</span><br><span class="line">  a.doSomething();</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="require-async-Function"><a href="#require-async-Function" class="headerlink" title="require.async Function"></a>require.async Function</h2><p>异步加载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">define(function(require, exports, module) &#123;</span><br><span class="line"></span><br><span class="line">  // 异步加载一个模块，在加载完成时，执行回调</span><br><span class="line">  require.async(&apos;./b&apos;, function(b) &#123;</span><br><span class="line">    b.doSomething();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  // 异步加载多个模块，在加载完成时，执行回调</span><br><span class="line">  require.async([&apos;./c&apos;, &apos;./d&apos;], function(c, d) &#123;</span><br><span class="line">    c.doSomething();</span><br><span class="line">    d.doSomething();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="require-resolve"><a href="#require-resolve" class="headerlink" title="require.resolve"></a>require.resolve</h2><p>返回解析后的绝对路径</p><h2 id="exprots"><a href="#exprots" class="headerlink" title="exprots"></a>exprots</h2><p>return Object，对外提供接口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">define(function(require, exports) &#123;</span><br><span class="line"></span><br><span class="line">  // 对外提供 foo 属性</span><br><span class="line">  exports.foo = &apos;bar&apos;;</span><br><span class="line"></span><br><span class="line">  // 对外提供 doSomething 方法</span><br><span class="line">  exports.doSomething = function() &#123;&#125;;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">retrun可以实现同等效果</span><br><span class="line">define(function(require) &#123;</span><br><span class="line"></span><br><span class="line">  // 通过 return 直接提供接口</span><br><span class="line">  return &#123;</span><br><span class="line">    foo: &apos;bar&apos;,</span><br><span class="line">    doSomething: function() &#123;&#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line">以及个人不太喜欢的缩略写法</span><br><span class="line">define(&#123;</span><br><span class="line">  foo: &apos;bar&apos;,</span><br><span class="line">  doSomething: function() &#123;&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>但以下写法是错误的</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">define(function(require, exports) &#123;</span><br><span class="line"></span><br><span class="line">  // 错误用法！！!</span><br><span class="line">  exports = &#123;</span><br><span class="line">    foo: &apos;bar&apos;,</span><br><span class="line">    doSomething: function() &#123;&#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>exports</code> 仅仅是 <code>module.exports</code> 的一个引用。在 <code>factory</code> 内部给 <code>exports</code> 重新赋值时，并不会改变 <code>module.exports</code> 的值。因此给 <code>exports</code> 赋值是无效的，不能用来更改模块接口。</p><p>我说句简单的话：exports和module.exports，都是地址，指向同一个内容，如果你给exports赋值了一个新对象，他指向的内容就完全变了，和module.exprots就指向不是同一个地方了</p><h2 id="module"><a href="#module" class="headerlink" title="module"></a>module</h2><p>modeule是一个对象，存储与当前模块相关联的一些属性和方法，默认为{}</p><p>module:function</p><p>module.id:String模块标识</p><p>module.url：String返回绝对路径（默认id=url，除非手写id）</p><p>module.dependencies:Array模块依赖</p><p>module.export:Object 大部分情况下和exports通用，但如果模块是一个类，就应该直接赋值给module.exports，这样调用就是一个类的构造器，可以直接new实例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">module.exports=new Person();</span><br><span class="line">const p = require(./xxx.js);</span><br><span class="line">p.say();</span><br><span class="line">//or</span><br><span class="line">exports.p = new Person();</span><br><span class="line">const &#123;p&#125; = require(./xxxjs);</span><br><span class="line">p.say();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;AMD:Asynchronous Module Definition (RequireJS)&lt;/p&gt;
&lt;p&gt;CMD:&lt;a href=&quot;https://github.com/cmdjs/specification/blob/master/draft/module.md&quot; ta
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://zehai.info/categories/JavaScript/"/>
    
    
      <category term="other" scheme="http://zehai.info/tags/other/"/>
    
  </entry>
  
  <entry>
    <title>Construct Binary Tree from Preorder and Inorder Traversal</title>
    <link href="http://zehai.info/2020/03/08/2020-03-08-Construct%20Binary%20Tree%20from%20Preorder%20and%20Inorder%20Traversal/"/>
    <id>http://zehai.info/2020/03/08/2020-03-08-Construct Binary Tree from Preorder and Inorder Traversal/</id>
    <published>2020-03-08T03:31:16.000Z</published>
    <updated>2020-03-11T09:49:30.164Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Problem105"><a href="#Problem105" class="headerlink" title="Problem105"></a>Problem105</h1><p>Given preorder and inorder traversal of a tree, construct the binary tree.</p><p><strong>Note:</strong><br>You may assume that duplicates do not exist in the tree.</p><p>For example, given</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">preorder = [3,9,20,15,7]</span><br><span class="line">inorder = [9,3,15,20,7]</span><br></pre></td></tr></table></figure><p>Return the following binary tree:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  3</span><br><span class="line"> / \</span><br><span class="line">9  20</span><br><span class="line">  /  \</span><br><span class="line"> 15   7</span><br></pre></td></tr></table></figure><h2 id="key"><a href="#key" class="headerlink" title="key"></a>key</h2><p> 题目是一个根据前序中序，生成二叉树的题目</p><p>前序遍历有个特点：根节点在前面，root -left-right</p><p>则遍历到3作为root，根据中序可以知道左子树是9，右子树是15 20 7</p><p>然后遍历9作为root，根据中序得到没有左子树，没有右子树</p><p>然后遍历20作为root，依次类推可以得到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">TreeNode root = new TreeNode(rootVal);</span><br><span class="line">root.left = buildTree(pre, preStart+1, preStart+len, in, inStart, rootIndex-1);</span><br><span class="line">root.right = buildTree(pre, preStart+len+1, preEnd, in, rootIndex+1, inEnd);</span><br></pre></td></tr></table></figure><p>其中insort比较好理解，确定root后</p><p>左子树在inStart, rootIndex-1之间</p><p>右子树在rootIndex+1, inEnd之间</p><p>对于presort</p><p>int len = rootIndex - inStart;获得root的左子树长度（根据中序获取rootIndex）</p><p>左子树在preStart+1, preStart+len之间</p><p>右子树在preStart+len+1, preEnd之间</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">buildTree</span><span class="params">(<span class="keyword">int</span>[] preorder, <span class="keyword">int</span>[] inorder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> buildTree(preorder, <span class="number">0</span>, preorder.length-<span class="number">1</span>, inorder, <span class="number">0</span>, inorder.length-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">buildTree</span><span class="params">(<span class="keyword">int</span>[] pre, <span class="keyword">int</span> preStart, <span class="keyword">int</span> preEnd, <span class="keyword">int</span>[] in, <span class="keyword">int</span> inStart, <span class="keyword">int</span> inEnd)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(inStart &gt; inEnd || preStart &gt; preEnd)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> rootVal = pre[preStart];</span><br><span class="line">        <span class="keyword">int</span> rootIndex = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = inStart; i &lt;= inEnd; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(in[i] == rootVal)&#123;</span><br><span class="line">                rootIndex = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> len = rootIndex - inStart;</span><br><span class="line">        TreeNode root = <span class="keyword">new</span> TreeNode(rootVal);</span><br><span class="line">        root.left = buildTree(pre, preStart+<span class="number">1</span>, preStart+len, in, inStart, rootIndex-<span class="number">1</span>);</span><br><span class="line">        root.right = buildTree(pre, preStart+len+<span class="number">1</span>, preEnd, in, rootIndex+<span class="number">1</span>, inEnd);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="tip"><a href="#tip" class="headerlink" title="tip"></a>tip</h2><p>参考于百度，在递归条件乱了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Problem105&quot;&gt;&lt;a href=&quot;#Problem105&quot; class=&quot;headerlink&quot; title=&quot;Problem105&quot;&gt;&lt;/a&gt;Problem105&lt;/h1&gt;&lt;p&gt;Given preorder and inorder traversal o
      
    
    </summary>
    
      <category term="LeetCode" scheme="http://zehai.info/categories/LeetCode/"/>
    
    
      <category term="Medium" scheme="http://zehai.info/tags/Medium/"/>
    
  </entry>
  
  <entry>
    <title>BinaryTreeInorderTraversal</title>
    <link href="http://zehai.info/2020/03/06/2020-03-06-BinaryTreeInorderTraversal/"/>
    <id>http://zehai.info/2020/03/06/2020-03-06-BinaryTreeInorderTraversal/</id>
    <published>2020-03-06T03:55:16.000Z</published>
    <updated>2020-03-11T09:49:34.218Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Problem94"><a href="#Problem94" class="headerlink" title="Problem94"></a>Problem94</h1><p>Given a binary tree, return the <em>inorder</em> traversal of its nodes’ values.</p><blockquote><p>给定一二叉树，中序遍历输出</p><p>ps:preorder,inorder,postorder，前中后</p></blockquote><h1 id="Key"><a href="#Key" class="headerlink" title="Key"></a>Key</h1><h2 id="recursive-approach"><a href="#recursive-approach" class="headerlink" title="recursive approach"></a>recursive approach</h2><p>利用递归解决B树的遍历问题，这种问题的代码其实大同小异，前中后的遍历输出，只需要调整递归部分即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//preorder</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preorder</span><span class="params">(node t)</span></span></span><br><span class="line"><span class="function"><span class="title">if</span> <span class="params">(t != <span class="keyword">null</span>)</span> </span>&#123;</span><br><span class="line">System.out.print(t.value + <span class="string">" "</span>);</span><br><span class="line">preorder(t.left);</span><br><span class="line">preorder(t.right);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//inorder</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inorder</span><span class="params">(node t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (t != <span class="keyword">null</span>) &#123;</span><br><span class="line">inorder(t.left);</span><br><span class="line">System.out.print(t.value + <span class="string">" "</span>);</span><br><span class="line">inorder(t.right);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//postorder</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postorder</span><span class="params">(node t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (t != <span class="keyword">null</span>) &#123;</span><br><span class="line">        postorder(t.left);</span><br><span class="line">        postorder(t.right);</span><br><span class="line">        System.out.print(t.value + <span class="string">" "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//leverorder</span></span><br></pre></td></tr></table></figure><p>Solution</p><blockquote><p>Runtime: 0 ms, faster than 100.00% of Java online submissions for Binary Tree Inorder Traversal.</p><p>Memory Usage: 37.9 MB, less than 5.11% of Java online submissions for Binary Tree Inorder Traversal.</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        List &lt; Integer &gt; res = <span class="keyword">new</span> ArrayList &lt; &gt; ();</span><br><span class="line">        inorder(root, res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inorder</span><span class="params">(TreeNode root, List &lt; Integer &gt; res)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root != <span class="keyword">null</span>) &#123;</span><br><span class="line">            inorder(root.left, res);</span><br><span class="line">            res.add(root.val);</span><br><span class="line">            inorder(root.right, res);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Complexity Analysis</p><ul><li>Time complexity : O(n)<em>O</em>(<em>n</em>). The time complexity is O(n)<em>O</em>(<em>n</em>) because the recursive function is T(n) = 2 \cdot T(n/2)+1<em>T</em>(<em>n</em>)=2⋅<em>T</em>(<em>n</em>/2)+1.</li><li>Space complexity : The worst case space required is O(n)<em>O</em>(<em>n</em>), and in the average case it’s O(\log n)<em>O</em>(log<em>n</em>) where n<em>n</em> is number of nodes.</li></ul><h2 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h2><p>solution还提供了另外一种方法通过stack pop的方式来完成：</p><p><a href="https://leetcode.com/problems/binary-tree-inorder-traversal/solution/" target="_blank" rel="noopener"><a href="https://leetcode.com/problems/binary-tree-inorder-traversal/solution/" target="_blank" rel="noopener">https://leetcode.com/problems/binary-tree-inorder-traversal/solution/</a></a></p><h2 id="Morris"><a href="#Morris" class="headerlink" title="Morris"></a>Morris</h2><p>同上</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Problem94&quot;&gt;&lt;a href=&quot;#Problem94&quot; class=&quot;headerlink&quot; title=&quot;Problem94&quot;&gt;&lt;/a&gt;Problem94&lt;/h1&gt;&lt;p&gt;Given a binary tree, return the &lt;em&gt;inorde
      
    
    </summary>
    
      <category term="LeetCode" scheme="http://zehai.info/categories/LeetCode/"/>
    
    
      <category term="Medium" scheme="http://zehai.info/tags/Medium/"/>
    
  </entry>
  
  <entry>
    <title>2020-03-05-hexoNexTv7.7.2</title>
    <link href="http://zehai.info/2020/03/05/2020-03-05-hexoNexTv7-7-2/"/>
    <id>http://zehai.info/2020/03/05/2020-03-05-hexoNexTv7-7-2/</id>
    <published>2020-03-05T06:42:08.000Z</published>
    <updated>2020-03-06T10:24:52.371Z</updated>
    
    <content type="html"><![CDATA[<p>I find hexo’s theme:nexT v7.7.2 has some new features</p><h2 id="native-dark-mode"><a href="#native-dark-mode" class="headerlink" title="native dark mode"></a>native dark mode</h2><p>we can set </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">darkmode:true</span><br></pre></td></tr></table></figure><p>to open native dark mode</p><p>and there are other features like </p><ul><li><a href="https://docs.mathjax.org/en/latest/upgrading/whats-new-3.0.html" target="_blank" rel="noopener">support MathJax v3.0</a>,we use $$</li><li>add next_config helper</li></ul><h1 id="how-to-update-newest-version"><a href="#how-to-update-newest-version" class="headerlink" title="how to update newest version"></a>how to update newest version</h1><p>1.git clone <a href="https://github.com/theme-next/hexo-theme-next" target="_blank" rel="noopener">https://github.com/theme-next/hexo-theme-next</a> themes/next</p><p>or in releases to download newest source code</p><p>2.copy file to hexo/theme/ such as :</p><p>/themes/hexo-theme-next-7.7.2/</p><p>3.open hexo’s _config.yml,and change theme’s value to hexo-theme-next-7.7.2 and u change your them successfully</p><p>4.update /themes/hexo-theme-next-7.7.2/_config.yml</p><p>Last , u can create new post to log your daily life</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn upgrade caniuse-lite browserslist</span><br></pre></td></tr></table></figure><p>and these days ,zehai.info ,may Expired ,sad </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I find hexo’s theme:nexT v7.7.2 has some new features&lt;/p&gt;
&lt;h2 id=&quot;native-dark-mode&quot;&gt;&lt;a href=&quot;#native-dark-mode&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
      <category term="others" scheme="http://zehai.info/categories/others/"/>
    
    
      <category term="NexT" scheme="http://zehai.info/tags/NexT/"/>
    
  </entry>
  
  <entry>
    <title>2020-02-28-JS相关技术名词</title>
    <link href="http://zehai.info/2020/02/28/2020-02-28-JS%E7%9B%B8%E5%85%B3%E6%8A%80%E6%9C%AF%E5%90%8D%E8%AF%8D/"/>
    <id>http://zehai.info/2020/02/28/2020-02-28-JS相关技术名词/</id>
    <published>2020-02-28T12:07:43.000Z</published>
    <updated>2020-03-10T10:20:25.183Z</updated>
    
    <content type="html"><![CDATA[<p>今天中午有收到Egg团队公开的文件调查，提及了很多技术名词，虽然不一定用到，但我也觉得列举出来会方便大家了解和比较，后续可能更新我用过的部分</p><h1 id="代码检查工具"><a href="#代码检查工具" class="headerlink" title="代码检查工具"></a>代码检查工具</h1><ul><li style="list-style: none"><input type="checkbox" checked> ESLint</li><li style="list-style: none"><input type="checkbox"> JSCS</li><li style="list-style: none"><input type="checkbox"> JSHint</li><li style="list-style: none"><input type="checkbox"> JSDoc</li><li style="list-style: none"><input type="checkbox"> Standard</li><li style="list-style: none"><input type="checkbox"> TSLint</li><li style="list-style: none"><input type="checkbox"> Flow</li></ul><table><thead><tr><th style="text-align:left"></th><th>引入目的：规范代码</th></tr></thead><tbody><tr><td style="text-align:left">ESLint</td><td>通过extend继承某一个大类，然后配置rules来进行代码规范</td></tr><tr><td style="text-align:left">JSCS</td><td></td></tr><tr><td style="text-align:left">JSHint</td><td></td></tr><tr><td style="text-align:left">JSDoc</td><td></td></tr><tr><td style="text-align:left">Standard</td><td></td></tr><tr><td style="text-align:left">TSLint</td><td></td></tr><tr><td style="text-align:left">Flow</td></tr></tbody></table><h2 id="使用感受"><a href="#使用感受" class="headerlink" title="使用感受"></a>使用感受</h2><p>解决了以下问题</p><ul><li>node是一门弱语言，进行校验（非变量类型校验，仅校验变量是否声明，是否可改等）</li><li>node在use strict模式下，eslint可以校验</li><li>团队合作，防止队友挖坑</li></ul><p>其实ESLint只是一种语法校验，更多的还有流程上的规范，就像网传阿里的开发规范一样，就好比node中你可以用类的语法糖，也可以用原型，当一件事情有多种实现方式时，需要规范来选择一个普遍公用的，易维护，易扩展的方案</p><p>除去语法校验，还有TS的类型校验，比如GIT的分支规范，如master,staging,backup,develop,other branch</p><h1 id="转义语言"><a href="#转义语言" class="headerlink" title="转义语言"></a>转义语言</h1><ul><li style="list-style: none"><input type="checkbox" checked> TS</li><li style="list-style: none"><input type="checkbox"> ClojureScript</li><li style="list-style: none"><input type="checkbox"> CoffeeScript</li><li style="list-style: none"><input type="checkbox"> Dart</li><li style="list-style: none"><input type="checkbox"> Elm</li><li style="list-style: none"><input type="checkbox"> Scala.js</li><li style="list-style: none"><input type="checkbox"> Haxe</li><li style="list-style: none"><input type="checkbox"> Nim</li><li style="list-style: none"><input type="checkbox"> PureScript</li><li style="list-style: none"><input type="checkbox"> Reason</li></ul><p>转移语言是2019年聊的比较多的，解决问题：</p><ul><li>类型校验，能够很好解决JS开发中，你不知道这个object里面有什么key，或者某个对象里面有什么方法（egg.js实际开发过程中，ctx.service.v1.handlexxx()就ctrl跳转不了，也不会有提示）</li></ul><h1 id="WEB框架"><a href="#WEB框架" class="headerlink" title="WEB框架"></a>WEB框架</h1><ul><li style="list-style: none"><input type="checkbox" checked> Express</li><li style="list-style: none"><input type="checkbox" checked> Koa</li><li style="list-style: none"><input type="checkbox" checked> Egg</li><li style="list-style: none"><input type="checkbox"> Nest.js</li><li style="list-style: none"><input type="checkbox"> Next.js</li><li style="list-style: none"><input type="checkbox"> Fastify.js</li><li style="list-style: none"><input type="checkbox"> Hapi.js</li><li style="list-style: none"><input type="checkbox"> Restify.js</li><li style="list-style: none"><input type="checkbox"> Loopback.io</li><li style="list-style: none"><input type="checkbox"> Sails.js</li><li style="list-style: none"><input type="checkbox"> Midway.js</li></ul><p>面试常被问到框架的问题，因为很多公司不会将项目搭建在原生的node服务上</p><ul><li>缺少约束，合作模式下，个人有个人的风格</li><li>项目配置繁琐，很多东西配置零散堆放</li><li>重复造轮子，框架提供较好的轮子</li><li>安全事宜，框架处理</li><li>etc</li></ul><p>一个好的框架事半功倍，<br><a href="https://expressjs.com/" target="_blank" rel="noopener">express</a>是一个非常轻量的框架</p><ul><li>fast</li><li>unopinionated(干净的)</li><li>minimalist</li></ul><p><a href="https://eggjs.org/" target="_blank" rel="noopener">Egg</a>是一个企业级框架，约定大于配置</p><ul><li>Provide capability to <a href="https://eggjs.org/en/advanced/framework.html" target="_blank" rel="noopener">customizd framework</a> base on Egg（可扩展）</li><li>Highly extensible <a href="https://eggjs.org/en/basics/plugin.html" target="_blank" rel="noopener">plugin mechanism</a>（插件牛逼）</li><li>Built-in <a href="https://eggjs.org/en/advanced/cluster-client.html" target="_blank" rel="noopener">cluster</a>（多进程牛逼）</li><li>Based on <a href="http://koajs.com/" target="_blank" rel="noopener">Koa</a> with high performance（企业级别性能优异）</li><li>Stable core framework with high test coverage（稳定）</li><li><a href="https://eggjs.org/en/tutorials/progressive.html" target="_blank" rel="noopener">Progressive development</a>（业务迭代，代码可以渐进继承）</li></ul><h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><ul><li style="list-style: none"><input type="checkbox" checked> MySQL</li><li style="list-style: none"><input type="checkbox" checked> PostgreSql</li><li style="list-style: none"><input type="checkbox" checked> Redis</li><li style="list-style: none"><input type="checkbox" checked> MongoDB</li><li style="list-style: none"><input type="checkbox"> SQL Server</li><li style="list-style: none"><input type="checkbox"> SQLLite</li><li style="list-style: none"><input type="checkbox"> influxdb</li><li style="list-style: none"><input type="checkbox"> HBASE</li><li style="list-style: none"><input type="checkbox"> TiDB</li><li style="list-style: none"><input type="checkbox"> Oracle</li><li style="list-style: none"><input type="checkbox"> DB2</li></ul><p>数据库是仅此于语言本身，另外的考点了，因为没有一个服务不涉猎存储，而数据库作为系统的数据基础，不仅重要也成为了面试的重点</p><ul><li>mysql等关系型数据库，范式，事务，innodb，读写分离，分表</li><li>Mongo,Redis等非关系型数据基础类型，聚合等</li></ul><h1 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h1><ul><li style="list-style: none"><input type="checkbox" checked> Nginx</li><li style="list-style: none"><input type="checkbox" checked> Tomcat</li><li><p>[ ] Apache</p></li><li><p>解决负载均衡</p></li><li>预处理一些请求，如过滤重复请求</li></ul><h1 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h1><ul><li style="list-style: none"><input type="checkbox" checked> Docker</li><li style="list-style: none"><input type="checkbox" checked> PM2</li><li style="list-style: none"><input type="checkbox" checked> forever</li><li style="list-style: none"><input type="checkbox"> naught</li><li style="list-style: none"><input type="checkbox"> node-supervisor</li><li style="list-style: none"><input type="checkbox"> Supervisord(Unix)</li></ul><p>docker集大成者，在微服务等场景应用较多</p><h1 id="RPC方式"><a href="#RPC方式" class="headerlink" title="RPC方式"></a>RPC方式</h1><ul><li style="list-style: none"><input type="checkbox" checked> HTTP</li><li style="list-style: none"><input type="checkbox"> Thrift</li><li style="list-style: none"><input type="checkbox" checked> gRPC</li><li style="list-style: none"><input type="checkbox"> dubbo</li><li style="list-style: none"><input type="checkbox" checked> MQ</li></ul><h1 id="开发场景"><a href="#开发场景" class="headerlink" title="开发场景"></a>开发场景</h1><ul><li style="list-style: none"><input type="checkbox"> 服务端API</li><li style="list-style: none"><input type="checkbox"> SSR应用</li><li style="list-style: none"><input type="checkbox"> Proxy层</li><li style="list-style: none"><input type="checkbox"> BFF层</li><li style="list-style: none"><input type="checkbox"> 代码片段，如Spark代码片段</li><li style="list-style: none"><input type="checkbox"> CLI &amp; 工具</li></ul><h4 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h4><ul><li style="list-style: none"><input type="checkbox"> </li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天中午有收到Egg团队公开的文件调查，提及了很多技术名词，虽然不一定用到，但我也觉得列举出来会方便大家了解和比较，后续可能更新我用过的部分&lt;/p&gt;
&lt;h1 id=&quot;代码检查工具&quot;&gt;&lt;a href=&quot;#代码检查工具&quot; class=&quot;headerlink&quot; title=&quot;代码
      
    
    </summary>
    
    
      <category term="List" scheme="http://zehai.info/tags/List/"/>
    
  </entry>
  
  <entry>
    <title>2020-01-31-JS设计模式</title>
    <link href="http://zehai.info/2020/01/31/2020-01-31-JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://zehai.info/2020/01/31/2020-01-31-JS设计模式/</id>
    <published>2020-01-31T08:39:11.000Z</published>
    <updated>2020-01-31T08:50:38.390Z</updated>
    
    <content type="html"><![CDATA[<p>模式共计八种：</p><ul><li>单例模式</li><li>构造器模式</li><li>建造者模式</li><li>代理模式</li><li>外观模式</li><li>观察者模式</li><li>策略模式</li><li>迭代器模式</li></ul><p>设计模式的提出，为了更好的解耦，可拓展，服务可靠，不限定某种语言的实现</p><h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>一个类只有一个实例，如果存在就不实例化，如果不存在则new，以保证<strong>一个类只有一个实例</strong></p><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><ul><li>模块间通信</li><li>保证某个类的对象的唯一性</li><li>防止变量污染</li></ul><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul><li>this的使用</li><li>闭包容易stack over flow需要及时清理</li><li>创建新对象成本较高</li></ul><h2 id="实际案例"><a href="#实际案例" class="headerlink" title="实际案例"></a>实际案例</h2><p>如网站的计数器，多线程的线程池</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 养鱼游戏</span></span><br><span class="line">  <span class="keyword">let</span> fish = <span class="literal">null</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">catchFish</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 如果鱼存在,则直接返回</span></span><br><span class="line">    <span class="keyword">if</span>(fish) &#123;</span><br><span class="line">      <span class="keyword">return</span> fish</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 如果鱼不存在,则获取鱼再返回</span></span><br><span class="line">      fish = <span class="built_in">document</span>.querySelector(<span class="string">'#cat'</span>)</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        fish,</span><br><span class="line">        water: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">let</span> water = <span class="keyword">this</span>.fish.getAttribute(<span class="string">'weight'</span>)</span><br><span class="line">          <span class="keyword">this</span>.fish.setAttribute(<span class="string">'weight'</span>, ++water)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 每隔3小时喂一次水</span></span><br><span class="line">  setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    catchFish().water()</span><br><span class="line">  &#125;, <span class="number">3</span>*<span class="number">60</span>*<span class="number">60</span>*<span class="number">1000</span>)</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><h1 id="构造器模式"><a href="#构造器模式" class="headerlink" title="构造器模式"></a>构造器模式</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;模式共计八种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单例模式&lt;/li&gt;
&lt;li&gt;构造器模式&lt;/li&gt;
&lt;li&gt;建造者模式&lt;/li&gt;
&lt;li&gt;代理模式&lt;/li&gt;
&lt;li&gt;外观模式&lt;/li&gt;
&lt;li&gt;观察者模式&lt;/li&gt;
&lt;li&gt;策略模式&lt;/li&gt;
&lt;li&gt;迭代器模式&lt;/li&gt;
&lt;/ul
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>2020-01-31-RomanToInteger</title>
    <link href="http://zehai.info/2020/01/31/2020-01-31-RomanToInteger/"/>
    <id>http://zehai.info/2020/01/31/2020-01-31-RomanToInteger/</id>
    <published>2020-01-31T03:17:45.000Z</published>
    <updated>2020-01-31T04:29:47.236Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Leetcode13"><a href="#Leetcode13" class="headerlink" title="Leetcode13"></a>Leetcode13</h1><p>Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.</p><p>Symbol Value<br>I 1<br>V 5<br>X 10<br>L 50<br>C 100<br>D 500<br>M 1000<br>For example, two is written as II in Roman numeral, just two one’s added together. Twelve is written as, XII, which is simply X + II. The number twenty seven is written as XXVII, which is XX + V + II.</p><p>Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:</p><p>I can be placed before V (5) and X (10) to make 4 and 9.<br>X can be placed before L (50) and C (100) to make 40 and 90.<br>C can be placed before D (500) and M (1000) to make 400 and 900.<br>Given a roman numeral, convert it to an integer. Input is guaranteed to be within the range from 1 to 3999.</p><p>Example 1:</p><p>Input: “III”<br>Output: 3<br>Example 2:</p><p>Input: “IV”<br>Output: 4<br>Example 3:</p><p>Input: “IX”<br>Output: 9<br>Example 4:</p><p>Input: “LVIII”<br>Output: 58<br>Explanation: L = 50, V= 5, III = 3.<br>Example 5:</p><p>Input: “MCMXCIV”<br>Output: 1994<br>Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>题目意思其实很简单，掌握了计算方法其实很简单</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">romanToInt</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> nums[]=<span class="keyword">new</span> <span class="keyword">int</span>[s.length()];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)&#123;</span><br><span class="line">        <span class="keyword">switch</span> (s.charAt(i))&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'M'</span>:</span><br><span class="line">                nums[i]=<span class="number">1000</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'D'</span>:</span><br><span class="line">                nums[i]=<span class="number">500</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'C'</span>:</span><br><span class="line">                nums[i]=<span class="number">100</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'L'</span>:</span><br><span class="line">                nums[i]=<span class="number">50</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'X'</span> :</span><br><span class="line">                nums[i]=<span class="number">10</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'V'</span>:</span><br><span class="line">                nums[i]=<span class="number">5</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'I'</span>:</span><br><span class="line">                nums[i]=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[i]&lt;nums[i+<span class="number">1</span>])</span><br><span class="line">            sum-=nums[i];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            sum+=nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum+nums[nums.length-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Leetcode13&quot;&gt;&lt;a href=&quot;#Leetcode13&quot; class=&quot;headerlink&quot; title=&quot;Leetcode13&quot;&gt;&lt;/a&gt;Leetcode13&lt;/h1&gt;&lt;p&gt;Roman numerals are represented by seve
      
    
    </summary>
    
      <category term="LeetCode" scheme="http://zehai.info/categories/LeetCode/"/>
    
    
      <category term="Easy" scheme="http://zehai.info/tags/Easy/"/>
    
  </entry>
  
</feed>
