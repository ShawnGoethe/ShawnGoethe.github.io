<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zehai&#39;blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zehai.info/"/>
  <updated>2020-05-30T01:40:04.967Z</updated>
  <id>http://zehai.info/</id>
  
  <author>
    <name>Zhang Zehai</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>deno</title>
    <link href="http://zehai.info/2020/05/29/2020-05-29-deno/"/>
    <id>http://zehai.info/2020/05/29/2020-05-29-deno/</id>
    <published>2020-05-29T08:18:55.000Z</published>
    <updated>2020-05-30T01:40:04.967Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0-Attention"><a href="#0-Attention" class="headerlink" title="0. Attention"></a>0. Attention</h1><p>本文为个人翻译，学习输出，仅供参考，欢迎指出理解不足之处</p><h1 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1. Introduction"></a>1. Introduction</h1><h1 id="2-Getting-Started"><a href="#2-Getting-Started" class="headerlink" title="2.Getting Started"></a>2.Getting Started</h1><h2 id="2-1-Installation"><a href="#2-1-Installation" class="headerlink" title="2.1 Installation"></a>2.1 Installation</h2><h2 id="2-2-Setup-your-environment"><a href="#2-2-Setup-your-environment" class="headerlink" title="2.2 Setup your environment"></a>2.2 Setup your environment</h2><h2 id="2-3-First-steps"><a href="#2-3-First-steps" class="headerlink" title="2.3 First steps"></a>2.3 First steps</h2><h3 id="2-3-1-helloworld"><a href="#2-3-1-helloworld" class="headerlink" title="2.3.1 helloworld"></a>2.3.1 helloworld</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"Welcome to Deno 🦕"</span>);</span><br><span class="line">deno run https:<span class="comment">//deno.land/std/examples/welcome.ts</span></span><br></pre></td></tr></table></figure><h3 id="2-3-2-Make-http-request"><a href="#2-3-2-Make-http-request" class="headerlink" title="2.3.2 Make http request"></a>2.3.2 Make http request</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> url = Deno.args[<span class="number">0</span>];<span class="comment">//get url</span></span><br><span class="line"><span class="keyword">const</span> res = <span class="keyword">await</span> fetch(url);<span class="comment">//await response --&gt;res</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> body = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(<span class="keyword">await</span> res.arrayBuffer());<span class="comment">//parse body as ArrayBuffer and convert into Uint8Array</span></span><br><span class="line"><span class="keyword">await</span> Deno.stdout.write(body);<span class="comment">//write body --&gt; stdout</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//run</span></span><br><span class="line"><span class="comment">//wrong cause no permision</span></span><br><span class="line">deno run https:<span class="comment">//deno.land/std/examples/curl.ts https://example.com</span></span><br><span class="line"><span class="comment">//right</span></span><br><span class="line">deno run --allow-net=example.com https:<span class="comment">//deno.land/std/examples/curl.ts https://example.com</span></span><br></pre></td></tr></table></figure><h3 id="2-3-3-reading-a-file"><a href="#2-3-3-reading-a-file" class="headerlink" title="2.3.3 reading a file"></a>2.3.3 reading a file</h3><p>deno提供非源自网络的api，这些可以在deno全局调用，由于目前没有web标准，所以deno就自己做了一套标准，以下示例filename–&gt;open–&gt;print</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> filenames = Deno.args;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> filename <span class="keyword">of</span> filenames) &#123;</span><br><span class="line">  <span class="keyword">const</span> file = <span class="keyword">await</span> Deno.open(filename);</span><br><span class="line">  <span class="keyword">await</span> Deno.copy(file, Deno.stdout);</span><br><span class="line">  file.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用了<strong>kernel-&gt;user-&gt;kernel</strong>的方式copy，保证数据<strong>一致性</strong></p><p>避免了常见的4次拷贝</p><ol><li>磁盘—–DMA—-&gt;页缓存（kernel）</li><li>页缓存(kernel)–&gt;用户缓存（user）</li><li>用户缓存（user）–&gt;socket缓冲区（kernel）</li><li>Socket(kernel)—DMA copy—&gt;network</li></ol><p>经过多次拷贝，缓存数据可能被修改，<strong>导致和原文件数据不一致</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deno run --allow-read https://deno.land/std/examples/cat.ts /etc/passwd</span><br></pre></td></tr></table></figure><h3 id="2-3-4-tcp-server"><a href="#2-3-4-tcp-server" class="headerlink" title="2.3.4 tcp server"></a>2.3.4 tcp server</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> hostname = <span class="string">"0.0.0.0"</span>;</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">8080</span>;</span><br><span class="line"><span class="keyword">const</span> listener = Deno.listen(&#123; hostname, port &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`Listening on <span class="subst">$&#123;hostname&#125;</span>:<span class="subst">$&#123;port&#125;</span>`</span>);</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">await</span> (<span class="keyword">const</span> conn <span class="keyword">of</span> listener) &#123;</span><br><span class="line">  Deno.copy(conn, conn);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>未经允许不可访问网络，如果需要，则添加–allow-net</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deno run --allow-net https://deno.land/std/examples/echo_server.ts</span><br><span class="line">//shell netcat(nc)</span><br><span class="line">nc localhost 8080</span><br><span class="line">hello world//input</span><br></pre></td></tr></table></figure><h2 id="2-4-Permissions"><a href="#2-4-Permissions" class="headerlink" title="2.4 Permissions"></a>2.4 Permissions</h2><p>deno拥有严格的权限管理，除非你声明，否则deno不会有file network enviroment权限，赋予只读权限就不会有读写权限</p><h3 id="2-4-1-Permissions-list"><a href="#2-4-1-Permissions-list" class="headerlink" title="2.4.1 Permissions list"></a>2.4.1 Permissions list</h3><ul><li><strong>-A, –allow-all</strong> Allow all permissions. This disables all security.</li><li><strong>–allow-env</strong> Allow environment access for things like getting and setting of environment variables.</li><li><strong>–allow-hrtime</strong> Allow high resolution time measurement. High resolution time can be used in timing attacks and fingerprinting.</li><li><strong>–allow-net=\<allow-net></allow-net></strong> Allow network access. You can specify an optional, comma separated list of domains to provide a whitelist of allowed domains.</li><li><strong>–allow-plugin</strong> Allow loading plugins. Please note that –allow-plugin is an unstable feature.</li><li><strong>–allow-read=\<allow-read></allow-read></strong> Allow file system read access. You can specify an optional, comma separated list of directories or files to provide a whitelist of allowed file system access.</li><li><strong>–allow-run</strong> Allow running subprocesses. Be aware that subprocesses are not run in a sandbox and therefore do not have the same security restrictions as the deno process. Therefore, use with caution.</li><li><strong>–allow-write=\<allow-write></allow-write></strong> Allow file system write access. You can specify an optional, comma separated list of directories or files to provide a whitelist of allowed file system access.</li></ul><h3 id="2-4-2-Permission-whitelist"><a href="#2-4-2-Permission-whitelist" class="headerlink" title="2.4.2 Permission whitelist"></a>2.4.2 Permission whitelist</h3><p>通过白名单，实现更高粒度的权限控制</p><p>示例给予/usr权限，但访问/etc</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> deno run --allow-read=/usr https://deno.land/std/examples/cat.ts /etc/passwd</span><br><span class="line">error: Uncaught PermissionDenied: read access to "/etc/passwd", run again with the --allow-read flag</span><br><span class="line">► $deno$/dispatch_json.ts:40:11</span><br><span class="line">    at DenoError ($deno$/errors.ts:20:5)</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">//yes    </span><br><span class="line"><span class="meta">$</span> deno run --allow-read=/etc https://deno.land/std/examples/cat.ts /etc/passwd</span><br></pre></td></tr></table></figure><h3 id="2-4-3-Network-access"><a href="#2-4-3-Network-access" class="headerlink" title="2.4.3 Network access"></a>2.4.3 Network access</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> result = <span class="keyword">await</span> fetch(<span class="string">"https://deno.land/"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//run</span></span><br><span class="line">$ deno run --allow-net=github.com,deno.land fetch.ts<span class="comment">//failed</span></span><br><span class="line">$</span><br></pre></td></tr></table></figure><p>如果fetch.ts尝试与别的domain建立连接，process将会失败，使用<code>deno run --allow-net fetch.ts</code>则可以</p><h2 id="2-5-Using-TS"><a href="#2-5-Using-TS" class="headerlink" title="2.5 Using TS"></a>2.5 Using TS</h2><p>天生支持JS,TS，需要引入模块拓展，使用文件，或者url进行导入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Response &#125; <span class="keyword">from</span> <span class="string">"https://deno.land/std@0.53.0/http/server.ts"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; queue &#125; <span class="keyword">from</span> <span class="string">"./collections.ts"</span>;</span><br></pre></td></tr></table></figure><h3 id="2-5-1-Using-external-type-definitions"><a href="#2-5-1-Using-external-type-definitions" class="headerlink" title="2.5.1 Using external type definitions"></a>2.5.1 Using external type definitions</h3><p>开箱即用的TS编译器，也依靠无扩展模块(extension-less modules)，node模块解析逻辑(module resolution logic)来实现将类型（tpyes）应用于JS模块，为了给TS与JS建立桥梁，支持三种引用类型定义文件的方式</p><ul><li><p>compiler hint</p></li><li><p>Triple-slash reference directive</p></li><li><h4 id="X-TypeScript-Types-custom-header"><a href="#X-TypeScript-Types-custom-header" class="headerlink" title="X-TypeScript-Types custom header"></a>X-TypeScript-Types custom header</h4></li></ul><p>Compiler hint ：当你知道文件位置时候引用,deno编译器会夹在foo.d.ts而不是foo.js</p><p>当运行时，Deno会一直加载foo.js</p><p><a href="https://deno.land/manual/getting_started/typescript#compiler-hint" target="_blank" rel="noopener">不全待补充</a></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @deno-types="./foo.d.ts"</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> foo <span class="keyword">from</span> <span class="string">"./foo.js"</span>;</span><br></pre></td></tr></table></figure><p>不是所有定义都支持：deno会加载*.d.ts文件，但不是所有文件都支持，如访问:<code>./node_modules/@types/node/index.d.ts</code></p><p>为什么TS文件中不使用triple-slash type reference</p><p>如果使用，干扰TS编译器的行为，Deno尽在JS和JSX文件中查找指令</p><h3 id="2-5-2-Custom-TypeScript-Compiler-Options"><a href="#2-5-2-Custom-TypeScript-Compiler-Options" class="headerlink" title="2.5.2 Custom TypeScript Compiler Options"></a>2.5.2 Custom TypeScript Compiler Options</h3><p>Deno 默认开始严格模式，使用<code>tsconfig.ts</code>来配置，需要通过-c来告诉deno配置文件<code>deno run -c tsconfig.json mod.ts</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">//default optins</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"compilerOptions"</span>: &#123;</span><br><span class="line">    <span class="attr">"allowJs"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"allowUmdGlobalAccess"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"allowUnreachableCode"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"allowUnusedLabels"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"alwaysStrict"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"assumeChangesOnlyAffectDirectDependencies"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"checkJs"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"disableSizeLimit"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"generateCpuProfile"</span>: <span class="string">"profile.cpuprofile"</span>,</span><br><span class="line">    <span class="attr">"jsx"</span>: <span class="string">"react"</span>,</span><br><span class="line">    <span class="attr">"jsxFactory"</span>: <span class="string">"React.createElement"</span>,</span><br><span class="line">    <span class="attr">"lib"</span>: [],</span><br><span class="line">    <span class="attr">"noFallthroughCasesInSwitch"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"noImplicitAny"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"noImplicitReturns"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"noImplicitThis"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"noImplicitUseStrict"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"noStrictGenericChecks"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"noUnusedLocals"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"noUnusedParameters"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"preserveConstEnums"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"removeComments"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"resolveJsonModule"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"strict"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"strictBindCallApply"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"strictFunctionTypes"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"strictNullChecks"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"strictPropertyInitialization"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"suppressExcessPropertyErrors"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"suppressImplicitAnyIndexErrors"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"useDefineForClassFields"</span>: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-6-Using-WebAssembly"><a href="#2-6-Using-WebAssembly" class="headerlink" title="2.6 Using WebAssembly"></a>2.6 Using WebAssembly</h2><p>deno可以执行<code>wasm</code>二进制文件</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> wasmCode = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>([</span><br><span class="line">  <span class="number">0</span>, <span class="number">97</span>, <span class="number">115</span>, <span class="number">109</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">133</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">96</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">127</span>,</span><br><span class="line">  <span class="number">3</span>, <span class="number">130</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">132</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">112</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">  <span class="number">5</span>, <span class="number">131</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">129</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">145</span>,</span><br><span class="line">  <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">109</span>, <span class="number">101</span>, <span class="number">109</span>, <span class="number">111</span>, <span class="number">114</span>, <span class="number">121</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">109</span>, <span class="number">97</span>,</span><br><span class="line">  <span class="number">105</span>, <span class="number">110</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">138</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">132</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">  <span class="number">65</span>, <span class="number">42</span>, <span class="number">11</span></span><br><span class="line">]);</span><br><span class="line"><span class="keyword">const</span> wasmModule = <span class="keyword">new</span> WebAssembly.Module(wasmCode);</span><br><span class="line"><span class="keyword">const</span> wasmInstance = <span class="keyword">new</span> WebAssembly.Instance(wasmModule);</span><br><span class="line"><span class="built_in">console</span>.log(wasmInstance.exports.main().toString());</span><br></pre></td></tr></table></figure><h1 id="3-The-Runtime"><a href="#3-The-Runtime" class="headerlink" title="3. The Runtime"></a>3. The Runtime</h1><p>Runtime functions(web Apis + deco global)</p><h2 id="3-1-Stability"><a href="#3-1-Stability" class="headerlink" title="3.1 Stability"></a>3.1 Stability</h2><p>自1.0.0版本后，各API趋于稳定，但并非所有的API都可以投入prod使用，使用–unstable解除锁定</p><h2 id="3-2-Program-lifecycle"><a href="#3-2-Program-lifecycle" class="headerlink" title="3.2 Program lifecycle"></a>3.2 Program lifecycle</h2><p>deno支持与浏览器兼容的生命周期events，<code>load</code> and <code>unload</code></p><p>你可以使用这些events，在你的程序中提供 setup/cleanup code</p><p>load 是异步的，等待的，<strong>不可取消的</strong></p><p>unload是同步的，<strong>不可取消的</strong></p><p><strong>main.ts</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"./imported.ts"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> handler = (e: Event): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`got <span class="subst">$&#123;e.type&#125;</span> event in event handler (main)`</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">"load"</span>, handler);</span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">"unload"</span>, handler);</span><br><span class="line"><span class="built_in">window</span>.onload = (e: Event): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`got <span class="subst">$&#123;e.type&#125;</span> event in onload function (main)`</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">window</span>.onunload = (e: Event): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`got <span class="subst">$&#123;e.type&#125;</span> event in onunload function (main)`</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"log from main script"</span>);</span><br></pre></td></tr></table></figure><p><strong>imported.ts</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> handler = (e: Event): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`got <span class="subst">$&#123;e.type&#125;</span> event in event handler (imported)`</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">"load"</span>, handler);</span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">"unload"</span>, handler);</span><br><span class="line"><span class="built_in">window</span>.onload = (e: Event): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`got <span class="subst">$&#123;e.type&#125;</span> event in onload function (imported)`</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">window</span>.onunload = (e: Event): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`got <span class="subst">$&#123;e.type&#125;</span> event in onunload function (imported)`</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"log from imported script"</span>);</span><br></pre></td></tr></table></figure><p>run</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> deno run main.ts</span><br><span class="line">log from imported script</span><br><span class="line">log from main script</span><br><span class="line">got load event in onload function (main)</span><br><span class="line">got load event in event handler (imported)</span><br><span class="line">got load event in event handler (main)</span><br><span class="line">got unload event in onunload function (main)</span><br><span class="line">got unload event in event handler (imported)</span><br><span class="line">got unload event in event handler (main)</span><br></pre></td></tr></table></figure><p>Importes.ts的方法被main覆盖</p><h2 id="3-3-Compiler-APIs"><a href="#3-3-Compiler-APIs" class="headerlink" title="3.3 Compiler APIs"></a>3.3 Compiler APIs</h2><p>目前编译器的apis是unstable的，deno支持对内置ts编译器runtime的访问，有三种方法访问</p><ul><li>Deno.complie()</li><li>Deno.bundle()</li><li>Deno.transpileOnly()</li></ul><h3 id="3-3-1-Referencing-TypeScipt-library-files"><a href="#3-3-1-Referencing-TypeScipt-library-files" class="headerlink" title="3.3.1 Referencing TypeScipt library files"></a>3.3.1 Referencing TypeScipt library files</h3><h2 id="3-4-Workers"><a href="#3-4-Workers" class="headerlink" title="3.4 Workers"></a>3.4 Workers</h2><p>deno支持web worker api</p><p>worker可以在多线程上运行代码，每个worker实例在单独专用的线程上运行，目前仅支持<code>module</code>类型的worker</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Good</span></span><br><span class="line"><span class="keyword">new</span> Worker(<span class="string">"./worker.js"</span>, &#123; <span class="keyword">type</span>: <span class="string">"module"</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Bad</span></span><br><span class="line"><span class="keyword">new</span> Worker(<span class="string">"./worker.js"</span>);</span><br><span class="line"><span class="keyword">new</span> Worker(<span class="string">"./worker.js"</span>, &#123; <span class="keyword">type</span>: <span class="string">"classic"</span> &#125;);</span><br></pre></td></tr></table></figure><h3 id="3-4-1-Permissions"><a href="#3-4-1-Permissions" class="headerlink" title="3.4.1 Permissions"></a>3.4.1 Permissions</h3><p>创建新的worker是动态导入，需要赋予权限</p><p><strong>main.ts</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Worker(<span class="string">"./worker.ts"</span>, &#123; <span class="keyword">type</span>: <span class="string">"module"</span> &#125;);</span><br></pre></td></tr></table></figure><p><strong>worker.ts</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"hello world"</span>);</span><br><span class="line">self.close();</span><br><span class="line">---</span><br><span class="line">$ deno run main.ts</span><br><span class="line">error: Uncaught PermissionDenied: read access to <span class="string">"./worker.ts"</span>, run again <span class="keyword">with</span> the --allow-read flag</span><br><span class="line">$ deno run --allow-read main.ts</span><br><span class="line">hello world</span><br></pre></td></tr></table></figure><p>For workers using remote modules; <code>--allow-net</code> permission is required:</p><h3 id="3-4-2-Using-Deno-in-worker"><a href="#3-4-2-Using-Deno-in-worker" class="headerlink" title="3.4.2 Using Deno in worker"></a>3.4.2 Using Deno in worker</h3><p><strong>main.js</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> worker = <span class="keyword">new</span> Worker(<span class="string">"./worker.js"</span>, &#123; <span class="keyword">type</span>: <span class="string">"module"</span>, deno: <span class="literal">true</span> &#125;);</span><br><span class="line">worker.postMessage(&#123; filename: <span class="string">"./log.txt"</span> &#125;);</span><br></pre></td></tr></table></figure><p><strong>worker.js</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">self.onmessage = <span class="keyword">async</span> (e) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; filename &#125; = e.data;</span><br><span class="line">  <span class="keyword">const</span> text = <span class="keyword">await</span> Deno.readTextFile(filename);</span><br><span class="line">  <span class="built_in">console</span>.log(text);</span><br><span class="line">  self.close();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>log.txt</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hello world</span><br><span class="line">$ deno run --allow-read --unstable main.js</span><br><span class="line">hello world</span><br></pre></td></tr></table></figure><h1 id="4-Linking-to-external-code"><a href="#4-Linking-to-external-code" class="headerlink" title="4. Linking to external code"></a>4. Linking to external code</h1><h1 id="5-Standard-library"><a href="#5-Standard-library" class="headerlink" title="5. Standard library"></a>5. Standard library</h1><h1 id="6-Testing"><a href="#6-Testing" class="headerlink" title="6. Testing"></a>6. Testing</h1><h1 id="7-Tools"><a href="#7-Tools" class="headerlink" title="7. Tools"></a>7. Tools</h1><h1 id="8-Embedding-Deno"><a href="#8-Embedding-Deno" class="headerlink" title="8. Embedding Deno"></a>8. Embedding Deno</h1><h1 id="9-Contributing"><a href="#9-Contributing" class="headerlink" title="9. Contributing"></a>9. Contributing</h1><h1 id="10-Examples"><a href="#10-Examples" class="headerlink" title="10. Examples"></a>10. Examples</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;0-Attention&quot;&gt;&lt;a href=&quot;#0-Attention&quot; class=&quot;headerlink&quot; title=&quot;0. Attention&quot;&gt;&lt;/a&gt;0. Attention&lt;/h1&gt;&lt;p&gt;本文为个人翻译，学习输出，仅供参考，欢迎指出理解不足之处&lt;/p&gt;
      
    
    </summary>
    
      <category term="nodejs" scheme="http://zehai.info/categories/nodejs/"/>
    
    
      <category term="deno" scheme="http://zehai.info/tags/deno/"/>
    
  </entry>
  
  <entry>
    <title>monit</title>
    <link href="http://zehai.info/2020/05/13/2020-05-13-%E7%9B%91%E6%8E%A7%E8%BD%AF%E4%BB%B6/"/>
    <id>http://zehai.info/2020/05/13/2020-05-13-监控软件/</id>
    <published>2020-05-13T08:18:55.000Z</published>
    <updated>2020-05-30T01:39:47.826Z</updated>
    
    <content type="html"><![CDATA[<p>监控</p><h1 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h1><p>prometheus vs zabbix</p><p>先对两者的各自特点进行一下对比：</p><table><thead><tr><th>Zabbix</th><th>Prometheus</th></tr></thead><tbody><tr><td>后端用 C 开发，界面用 PHP 开发，定制化难度很高。</td><td>后端用 golang 开发，前端是 Grafana，JSON 编辑即可解决。定制化难度较低。</td></tr><tr><td>集群规模上限为 10000 个节点。</td><td>支持更大的集群规模，速度也更快。</td></tr><tr><td>更适合监控物理机环境。</td><td>更适合云环境的监控，对 OpenStack，<strong>Kubernetes</strong> 有更好的集成。</td></tr><tr><td>监控数据存储在关系型数据库内，如 MySQL，很难从现有数据中扩展维度。</td><td>监控数据存储在基于<strong>时间序列(TSDB)</strong>的数据库内，便于对已有数据进行新的聚合。</td></tr><tr><td>安装简单，zabbix-server 一个软件包中包括了所有的服务端功能。</td><td>安装相对复杂，<strong>监控、告警和界面</strong>都分属于不同的组件。</td></tr><tr><td><strong>图形化界面</strong>比较成熟，界面上基本上能完成全部的配置操作。</td><td>界面相对较弱，很多配置需要修改配置文件。</td></tr><tr><td>发展时间更长，对于很多监控场景，都有现成的解决方案。</td><td>2015 年后开始快速发展，但发展时间较短，成熟度不及 Zabbix。</td></tr></tbody></table><p>由于最后敲定了Prometheus方案，对于zabbix就云评测了，欢迎指正</p><ul><li>虽然图形化界面弱化，很多配置走yml文件，但图形化界面真的没有必要</li><li>时序数据库，高并发下好于mysql（不然干嘛开发tsdb应对监控场景）</li><li>prom支持pull和push模型，可以支持k8s，swarm等服务发现</li></ul><h1 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h1><p>Performance？webVitals？以后用到再补充</p><p>主要关注性能，pv，redirect，err等问题</p><h1 id="页面是否可用"><a href="#页面是否可用" class="headerlink" title="页面是否可用"></a>页面是否可用</h1><p>阿里云-云监控控制台</p><p>可提供网址监控，包括cookie, headers 等自定义的简单配置，进行电话，邮件，短信，旺旺等报警</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;监控&lt;/p&gt;
&lt;h1 id=&quot;后端&quot;&gt;&lt;a href=&quot;#后端&quot; class=&quot;headerlink&quot; title=&quot;后端&quot;&gt;&lt;/a&gt;后端&lt;/h1&gt;&lt;p&gt;prometheus vs zabbix&lt;/p&gt;
&lt;p&gt;先对两者的各自特点进行一下对比：&lt;/p&gt;
&lt;table&gt;
&lt;th
      
    
    </summary>
    
      <category term="monit" scheme="http://zehai.info/categories/monit/"/>
    
    
      <category term="intro" scheme="http://zehai.info/tags/intro/"/>
    
  </entry>
  
  <entry>
    <title>pandle</title>
    <link href="http://zehai.info/2020/05/12/2020-05-12-paddle/"/>
    <id>http://zehai.info/2020/05/12/2020-05-12-paddle/</id>
    <published>2020-05-12T08:18:55.000Z</published>
    <updated>2020-05-30T01:40:04.969Z</updated>
    
    <content type="html"><![CDATA[<h1 id="start"><a href="#start" class="headerlink" title="start"></a>start</h1><p>use docker</p><h1 id="platform"><a href="#platform" class="headerlink" title="platform"></a>platform</h1><ul><li><strong>AI Studio</strong>：<a href="https://aistudio.baidu.com/" target="_blank" rel="noopener">https://aistudio.baidu.com/</a></li><li><strong>飞桨官网</strong>：<a href="https://www.paddlepaddle.org.cn/" target="_blank" rel="noopener">https://www.paddlepaddle.org.cn/</a></li><li><strong>百度技术学院</strong>：<a href="http://bit.baidu.com/index" target="_blank" rel="noopener">http://bit.baidu.com/index</a></li></ul><h1 id="about"><a href="#about" class="headerlink" title="about"></a>about</h1><p>人工智能&gt;机器学习&gt;深度学习</p><ul><li><p>人工智能是研发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。由于这个定义只阐述了目标，而没有限定方法，因此实现人工智能存在的诸多方法和分支，导致其变成一个“大杂烩”式的学科。</p></li><li><p>机器学习、尤其是监督学习则有更加明确的指代。机器学习是专门研究计算机怎样模拟或实现人类的学习行为，以获取新的知识或技能，重新组织已有的知识结构，使之不断改善自身的性能</p></li><li><p>多数机器学习任务都可以使用深度学习模型解决，尤其在在语音、计算机视觉和自然语言处理等领域，深度学习模型的效果比传统机器学习算法有显著提升。</p><p>那么相比传统的机器学习算法，深度学习做出了改进，<strong>两者在理论结构上是一致的，即：模型假设、评价函数和优化算法，其根本差别在于假设的复杂度</strong></p></li></ul><p>人工神经网络包括多个神经网络层，如卷积层、全连接层、LSTM等，每一层又包括很多神经元，超过三层的非线性神经网络都可以被称为深度神经网络。通俗的讲，深度学习的模型可以视为是输入到输出的映射函数，如图像到高级语义（美女）的映射，足够深的神经网络理论上可以拟合任何复杂的函数。因此神经网络非常适合学习样本数据的内在规律和表示层次，对文字、图像和语音任务有很好的适用性。因为这几个领域的任务是人工智能的基础模块，所以深度学习被称为实现人工智能的基础也就不足为奇了。</p><ul><li>神经元：神经网络中每个节点称为神经元，由两部分组成：<ul><li>加权和：将所有输入加权求和。</li><li>非线性变换（激活函数）：加权和的结果经过一个非线性函数变换，让神经元计算具备非线性的能力。</li></ul></li><li><strong>多层连接：</strong> 大量这样的节点按照不同的层次排布，形成多层的结构连接起来，即称为神经网络。</li><li><strong>前向计算：</strong> 从输入计算输出的过程，顺序从网络前至后。</li><li><strong>计算图：</strong> 以图形化的方式展现神经网络的计算逻辑又成为计算图。我们也可以将神经网络的计算图以公式的方式表达如下：</li></ul><p>由此可见，神经网络并没有那么神秘，它的本质是一个含有很多参数的“大公式”。</p><p>深度学习框架标准化，自动化，模块化</p><p>数据处理-&gt;模型设计-&gt;训练配置-&gt;训练过程-&gt;模型保存</p><ul><li>数据处理：数据导入–&gt;数据形状变换–&gt;数据集划分–&gt;数据归一化处理–&gt;封装load data数据–&gt;数据预处理–&gt;模型调用</li></ul><h1 id="构建神经网络模型"><a href="#构建神经网络模型" class="headerlink" title="构建神经网络模型"></a>构建神经网络模型</h1><p>神经网络的基本概念（如神经元、多层连接、前向计算、计算图）和模型结构三要素（模型假设、评价函数和优化算法）</p><p>连续–&gt;回归任务</p><p>离散–&gt;分类任务</p><p>数据处理（数据导入、数据形状变换、数据集划分、数据归一化处理，封装load data函数）-&gt;模型设计-&gt;训练配置-&gt;训练过程-&gt;模型保存</p><h2 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h2><p>1.数据导入</p><p>2.数据形状变换（1维数据改成可用形式）</p><p>3.数据集划分，划分训练集，测试集</p><p>4.数据归一化（特征值0～1）</p><p>5.封装load data函数</p><h2 id="模型设计"><a href="#模型设计" class="headerlink" title="模型设计"></a>模型设计</h2><p>模型设计是深度学习模型关键要素之一，也称为网络结构设计，相当于模型的假设空间，即实现模型“前向计算”（从输入到输出）的过程。</p><h2 id="提督下降算法"><a href="#提督下降算法" class="headerlink" title="提督下降算法"></a>提督下降算法</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;start&quot;&gt;&lt;a href=&quot;#start&quot; class=&quot;headerlink&quot; title=&quot;start&quot;&gt;&lt;/a&gt;start&lt;/h1&gt;&lt;p&gt;use docker&lt;/p&gt;
&lt;h1 id=&quot;platform&quot;&gt;&lt;a href=&quot;#platform&quot; class
      
    
    </summary>
    
      <category term="pandle" scheme="http://zehai.info/categories/pandle/"/>
    
    
      <category term="intro" scheme="http://zehai.info/tags/intro/"/>
    
  </entry>
  
  <entry>
    <title>prom-client</title>
    <link href="http://zehai.info/2020/04/30/2020-04-30-prom-client/"/>
    <id>http://zehai.info/2020/04/30/2020-04-30-prom-client/</id>
    <published>2020-04-30T08:18:55.000Z</published>
    <updated>2020-05-30T01:40:04.969Z</updated>
    
    <content type="html"><![CDATA[<p>prom-clinet</p><p>prometheus的client，支持histogram summaries gauges counters</p><h1 id="usage"><a href="#usage" class="headerlink" title="usage"></a>usage</h1><ul><li>cluster模式,避免各个worker都有一个metric</li><li>非cluster模式，全局挂载</li></ul><h1 id="api"><a href="#api" class="headerlink" title="api"></a>api</h1><h2 id="Config"><a href="#Config" class="headerlink" title="Config"></a>Config</h2><p>所有metric都有两个强制属性</p><ul><li>name</li><li>help（描述）</li></ul><h2 id="DefaultMetrics"><a href="#DefaultMetrics" class="headerlink" title="DefaultMetrics"></a>DefaultMetrics</h2><p>collectDefaultMetrics({options})</p><p>Options （Object）具备以下四个参数</p><ul><li>prefix：metric添加前缀 ，默认没有前缀（job instance后更加细分）</li><li>registry:指向哪个register，默认全局</li><li>gcDurationBuckets 自定义buckets的gc持续时间直方图，默认[0.001, 0.01, 0.1, 1, 2, 5]` (in seconds).</li><li>eventLoopMonitoringPrecision 采样率以毫秒为单位（&gt;0），默认10</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> client = <span class="built_in">require</span>(<span class="string">'prom-client'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> collectDefaultMetrics = client.collectDefaultMetrics;</span><br><span class="line"><span class="keyword">const</span> Registry = client.Registry;</span><br><span class="line"><span class="keyword">const</span> register = <span class="keyword">new</span> Registry();</span><br><span class="line"><span class="keyword">const</span> prefix = <span class="string">'my_application_'</span>;</span><br><span class="line"></span><br><span class="line">collectDefaultMetrics(&#123; register,prefix,<span class="attr">gcDurationBuckets</span>: [<span class="number">0.1</span>, <span class="number">0.2</span>, <span class="number">0.3</span>] &#125;);</span><br></pre></td></tr></table></figure><h2 id="counter"><a href="#counter" class="headerlink" title="counter"></a>counter</h2><p>当进程重启时，counter会清空，使用函数解决</p><p>作者注：</p><ul><li>可以监控按钮点击次数，请求次数来监控业务数据</li><li>同时也<strong>支持labelNames</strong>，参考Histogram</li><li>从0开始增，<strong>不可减</strong>，（减-&gt;gauge）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> client = <span class="built_in">require</span>(<span class="string">'prom-client'</span>);</span><br><span class="line"><span class="keyword">const</span> counter = <span class="keyword">new</span> client.Counter(&#123;</span><br><span class="line">  name: <span class="string">'metric_name'</span>,</span><br><span class="line">  help: <span class="string">'metric_help'</span>,</span><br><span class="line">&#125;);</span><br><span class="line">counter.inc(); <span class="comment">// Inc with 1</span></span><br><span class="line">counter.inc(<span class="number">10</span>); <span class="comment">// Inc with 10</span></span><br></pre></td></tr></table></figure><h2 id="gauge"><a href="#gauge" class="headerlink" title="gauge"></a>gauge</h2><p>counter功能基础上支持减法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//base</span></span><br><span class="line"><span class="keyword">const</span> client = <span class="built_in">require</span>(<span class="string">'prom-client'</span>);</span><br><span class="line"><span class="keyword">const</span> gauge = <span class="keyword">new</span> client.Gauge(&#123; <span class="attr">name</span>: <span class="string">'metric_name'</span>, <span class="attr">help</span>: <span class="string">'metric_help'</span> &#125;);</span><br><span class="line">gauge.set(<span class="number">10</span>); <span class="comment">// Set to 10</span></span><br><span class="line">gauge.inc(); <span class="comment">// Inc with 1</span></span><br><span class="line">gauge.inc(<span class="number">10</span>); <span class="comment">// Inc with 10</span></span><br><span class="line">gauge.dec(); <span class="comment">// Dec with 1</span></span><br><span class="line">gauge.dec(<span class="number">10</span>); <span class="comment">// Dec with 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//others</span></span><br><span class="line">gauge.setToCurrentTime(); <span class="comment">// Sets value to current time</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> end = gauge.startTimer();</span><br><span class="line">xhrRequest(<span class="function"><span class="keyword">function</span> (<span class="params">err, res</span>) </span>&#123;</span><br><span class="line">  end(); <span class="comment">// Sets value to xhrRequests duration in seconds</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="histogram"><a href="#histogram" class="headerlink" title="histogram"></a>histogram</h2><p>追踪事件的大小和频率</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>默认的buckets旨在覆盖常规的web/rpc请求，也可以被override</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> client = <span class="built_in">require</span>(<span class="string">'prom-client'</span>);</span><br><span class="line"><span class="keyword">new</span> client.Histogram(&#123;</span><br><span class="line">  name: <span class="string">'metric_name'</span>,</span><br><span class="line">  help: <span class="string">'metric_help'</span>,</span><br><span class="line">  labelNames: [<span class="string">'status_code'</span>],<span class="comment">//**Array**</span></span><br><span class="line">  buckets: [<span class="number">0.1</span>, <span class="number">5</span>, <span class="number">15</span>, <span class="number">50</span>, <span class="number">100</span>, <span class="number">500</span>],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> client = <span class="built_in">require</span>(<span class="string">'prom-client'</span>);</span><br><span class="line"><span class="keyword">const</span> histogram = <span class="keyword">new</span> client.Histogram(&#123;</span><br><span class="line">  name: <span class="string">'metric_name'</span>,</span><br><span class="line">  help: <span class="string">'metric_help'</span>,</span><br><span class="line">&#125;);</span><br><span class="line">histogram.observe(<span class="number">10</span>); <span class="comment">// Observe value in histogram</span></span><br></pre></td></tr></table></figure><h3 id="Utility-to-observe-request-durations"><a href="#Utility-to-observe-request-durations" class="headerlink" title="Utility to observe request durations"></a>Utility to observe request durations</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> end = histogram.startTimer();</span><br><span class="line">xhrRequest(<span class="function"><span class="keyword">function</span> (<span class="params">err, res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> seconds = end(); <span class="comment">// Observes and returns the value to xhrRequests duration in seconds</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="summary"><a href="#summary" class="headerlink" title="summary"></a>summary</h2><p>计算观察值的百分比数据</p><h3 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h3><p>默认百分比[0.01, 0.05, 0.5, 0.9, 0.95, 0.99, 0.999]，但可以被覆盖</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> client = <span class="built_in">require</span>(<span class="string">'prom-client'</span>);</span><br><span class="line"><span class="keyword">new</span> client.Summary(&#123;</span><br><span class="line">  name: <span class="string">'metric_name'</span>,</span><br><span class="line">  help: <span class="string">'metric_help'</span>,</span><br><span class="line">  percentiles: [<span class="number">0.01</span>, <span class="number">0.1</span>, <span class="number">0.9</span>, <span class="number">0.99</span>],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>如果启用滑动窗口功能，需要新增<code>maxAgeSeconds</code> and <code>ageBuckets</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> client = <span class="built_in">require</span>(<span class="string">'prom-client'</span>);</span><br><span class="line"><span class="keyword">new</span> client.Summary(&#123;</span><br><span class="line">  name: <span class="string">'metric_name'</span>,</span><br><span class="line">  help: <span class="string">'metric_help'</span>,</span><br><span class="line">  maxAgeSeconds: <span class="number">600</span>,</span><br><span class="line">  ageBuckets: <span class="number">5</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>maxAgeSeconds 可以知道bucket重制前的使用时常</p><p>ageBuckets 滑动窗口中最多的buckets数目</p><h3 id="Usage-example"><a href="#Usage-example" class="headerlink" title="Usage example"></a>Usage example</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> client = <span class="built_in">require</span>(<span class="string">'prom-client'</span>);</span><br><span class="line"><span class="keyword">const</span> summary = <span class="keyword">new</span> client.Summary(&#123;</span><br><span class="line">  name: <span class="string">'metric_name'</span>,</span><br><span class="line">  help: <span class="string">'metric_help'</span>,</span><br><span class="line">&#125;);</span><br><span class="line">summary.observe(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><h3 id="Utility-to-observe-request-durations-1"><a href="#Utility-to-observe-request-durations-1" class="headerlink" title="Utility to observe request durations"></a>Utility to observe request durations</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> end = summary.startTimer();</span><br><span class="line">xhrRequest(<span class="function"><span class="keyword">function</span> (<span class="params">err, res</span>) </span>&#123;</span><br><span class="line">  end(); <span class="comment">// Observes the value to xhrRequests duration in seconds</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="labels"><a href="#labels" class="headerlink" title="labels"></a>labels</h2><p>所有metrics可以设置labelNames属性，两种赋值方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> client = <span class="built_in">require</span>(<span class="string">'prom-client'</span>);</span><br><span class="line"><span class="keyword">const</span> gauge = <span class="keyword">new</span> client.Gauge(&#123;</span><br><span class="line">  name: <span class="string">'metric_name'</span>,</span><br><span class="line">  help: <span class="string">'metric_help'</span>,</span><br><span class="line">  labelNames: [<span class="string">'method'</span>, <span class="string">'statusCode'</span>],</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gauge.set(&#123; <span class="attr">method</span>: <span class="string">'GET'</span>, <span class="attr">statusCode</span>: <span class="string">'200'</span> &#125;, <span class="number">100</span>); <span class="comment">// 1st version, Set value 100 with method set to GET and statusCode to 200</span></span><br><span class="line">gauge.labels(<span class="string">'GET'</span>, <span class="string">'200'</span>).set(<span class="number">100</span>); <span class="comment">// 2nd version, Same as above</span></span><br></pre></td></tr></table></figure><p>用来记录请求结果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> end = startTimer(&#123; <span class="attr">method</span>: <span class="string">'GET'</span> &#125;); <span class="comment">// Set method to GET, we don't know statusCode yet</span></span><br><span class="line">xhrRequest(<span class="function"><span class="keyword">function</span> (<span class="params">err, res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    end(&#123; <span class="attr">statusCode</span>: <span class="string">'500'</span> &#125;); <span class="comment">// Sets value to xhrRequest duration in seconds with statusCode 500</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    end(&#123; <span class="attr">statusCode</span>: <span class="string">'200'</span> &#125;); <span class="comment">// Sets value to xhrRequest duration in seconds with statusCode 200</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="default-labels"><a href="#default-labels" class="headerlink" title="default labels"></a>default labels</h3><h1 id="gc"><a href="#gc" class="headerlink" title="gc"></a>gc</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;prom-clinet&lt;/p&gt;
&lt;p&gt;prometheus的client，支持histogram summaries gauges counters&lt;/p&gt;
&lt;h1 id=&quot;usage&quot;&gt;&lt;a href=&quot;#usage&quot; class=&quot;headerlink&quot; title=&quot;
      
    
    </summary>
    
      <category term="prometheus" scheme="http://zehai.info/categories/prometheus/"/>
    
    
      <category term="client" scheme="http://zehai.info/tags/client/"/>
    
  </entry>
  
  <entry>
    <title>prometheus</title>
    <link href="http://zehai.info/2020/04/30/2020-04-30-prometheus/"/>
    <id>http://zehai.info/2020/04/30/2020-04-30-prometheus/</id>
    <published>2020-04-30T08:18:55.000Z</published>
    <updated>2020-05-30T01:40:04.969Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1. Introduction"></a>1. Introduction</h1><h1 id="2-Concepts"><a href="#2-Concepts" class="headerlink" title="2.Concepts"></a>2.Concepts</h1><h1 id="3-Prometheus"><a href="#3-Prometheus" class="headerlink" title="3. Prometheus"></a>3. Prometheus</h1><h1 id="4-Visualization"><a href="#4-Visualization" class="headerlink" title="4.Visualization"></a>4.Visualization</h1><h1 id="5-Operating"><a href="#5-Operating" class="headerlink" title="5.Operating"></a>5.Operating</h1><h2 id="5-1security"><a href="#5-1security" class="headerlink" title="5.1security"></a>5.1security</h2><p>promethues具备很多组件，以及与其他系统集成，本身<strong>可以</strong>部署在受信任和不受信任的环境</p><h3 id="5-1-1-Promethues"><a href="#5-1-1-Promethues" class="headerlink" title="5.1.1 Promethues"></a>5.1.1 Promethues</h3><h3 id="5-1-2-AlertManager"><a href="#5-1-2-AlertManager" class="headerlink" title="5.1.2 AlertManager"></a>5.1.2 AlertManager</h3><h3 id="5-1-3-Pushgateway"><a href="#5-1-3-Pushgateway" class="headerlink" title="5.1.3 Pushgateway"></a>5.1.3 Pushgateway</h3><h3 id="5-1-4-Exporters"><a href="#5-1-4-Exporters" class="headerlink" title="5.1.4 Exporters"></a>5.1.4 Exporters</h3><h3 id="5-1-5-Client-Libraries"><a href="#5-1-5-Client-Libraries" class="headerlink" title="5.1.5 Client Libraries"></a>5.1.5 Client Libraries</h3><h3 id="5-1-6-Auth-and-encrytion"><a href="#5-1-6-Auth-and-encrytion" class="headerlink" title="5.1.6 Auth and encrytion"></a>5.1.6 Auth and encrytion</h3><p>prometheus 及其组建不提供任何身份验证（server-side authentication）,授权（authorization） ,加密（encryption）</p><p>如果需要，建议采用<code>反向代理</code></p><ul><li><p>在管理或者mutating endpoints 使用简单的访问工具（如cURL）访问，由于prom没有内置的csrf保护模块，所以会破坏类用例（break such use cases）,因此使用反向代理，可以避免csrf攻击</p></li><li><p>对于非mutating endpoints ，你可以使用cors headers （如<code>Access-Control-Allow-Origin</code>）来避免xss攻击</p></li><li><p>对于非信任用户，使用转译</p></li><li>对于grafana，做好权限监控，不要限制使用代理方式运行查询语句的权限</li></ul><h3 id="5-1-7-Secrets"><a href="#5-1-7-Secrets" class="headerlink" title="5.1.7 Secrets"></a>5.1.7 Secrets</h3><h3 id="5-1-8-Denial-of-Service"><a href="#5-1-8-Denial-of-Service" class="headerlink" title="5.1.8 Denial of Service"></a>5.1.8 Denial of Service</h3><h3 id="5-1-9-Libraries"><a href="#5-1-9-Libraries" class="headerlink" title="5.1.9 Libraries"></a>5.1.9 Libraries</h3><h3 id="5-1-10-Build-Process"><a href="#5-1-10-Build-Process" class="headerlink" title="5.1.10 Build Process"></a>5.1.10 Build Process</h3><h3 id="5-1-11-External-audits"><a href="#5-1-11-External-audits" class="headerlink" title="5.1.11 External audits"></a>5.1.11 External audits</h3><h2 id="5-2-Integrations"><a href="#5-2-Integrations" class="headerlink" title="5.2 Integrations"></a>5.2 Integrations</h2><h1 id="6-Instrumenting"><a href="#6-Instrumenting" class="headerlink" title="6.Instrumenting"></a>6.Instrumenting</h1><h1 id="7-Alerting"><a href="#7-Alerting" class="headerlink" title="7.Alerting"></a>7.Alerting</h1><h1 id="8-Best-Practices"><a href="#8-Best-Practices" class="headerlink" title="8.Best Practices"></a>8.Best Practices</h1><h2 id="8-4-Histograms-and-summaries"><a href="#8-4-Histograms-and-summaries" class="headerlink" title="8.4 Histograms and summaries"></a>8.4 Histograms and summaries</h2><h3 id="8-4-1-Library-support"><a href="#8-4-1-Library-support" class="headerlink" title="8.4.1 Library support"></a>8.4.1 Library support</h3><p>官方：go java py ruby</p><p>译者注：目前node通过prom-client也可以使用</p><h3 id="8-4-2-Count-and-sum-of-observations"><a href="#8-4-2-Count-and-sum-of-observations" class="headerlink" title="8.4.2 Count and sum of observations"></a>8.4.2 Count and sum of observations</h3><p>两者都是样本观察，请求持续时间或者响应大小，观察value，求和，计算平均值</p><p>可以使用summaries &amp; histogram计算负值（如温度），且无法使用rate</p><p>计算5min中内的请求持续时间，平均值的hisogram or summary</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rate(http_request_duration_seconds_sum[<span class="number">5</span>m])/rate(http_request_duration_seconds_count[<span class="number">5</span>m])</span><br></pre></td></tr></table></figure><h3 id="8-4-3-Apdex-score"><a href="#8-4-3-Apdex-score" class="headerlink" title="8.4.3 Apdex score"></a>8.4.3 Apdex score</h3><p>Apex =Application Performance Index</p><h3 id="8-4-4-Quantiles"><a href="#8-4-4-Quantiles" class="headerlink" title="8.4.4 Quantiles"></a>8.4.4 Quantiles</h3><h3 id="8-4-5-Errors-of-quantile-estimation"><a href="#8-4-5-Errors-of-quantile-estimation" class="headerlink" title="8.4.5 Errors of quantile estimation"></a>8.4.5 Errors of quantile estimation</h3><h3 id="8-4-6-if-no-library-support"><a href="#8-4-6-if-no-library-support" class="headerlink" title="8.4.6 if no library support"></a>8.4.6 if no library support</h3><h1 id="9-Guides"><a href="#9-Guides" class="headerlink" title="9.Guides"></a>9.Guides</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-Introduction&quot;&gt;&lt;a href=&quot;#1-Introduction&quot; class=&quot;headerlink&quot; title=&quot;1. Introduction&quot;&gt;&lt;/a&gt;1. Introduction&lt;/h1&gt;&lt;h1 id=&quot;2-Concepts&quot;&gt;&lt;a 
      
    
    </summary>
    
      <category term="prometheus" scheme="http://zehai.info/categories/prometheus/"/>
    
    
      <category term="intro" scheme="http://zehai.info/tags/intro/"/>
    
  </entry>
  
  <entry>
    <title>prom-client</title>
    <link href="http://zehai.info/2020/04/29/2020-04-29-prom-client/"/>
    <id>http://zehai.info/2020/04/29/2020-04-29-prom-client/</id>
    <published>2020-04-29T08:18:55.000Z</published>
    <updated>2020-05-30T01:33:31.564Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>prom-client 支持nodejs收集metrics，直方图histogram，summaries，gauges，和counters</p><p>prometheus通过pull获取node服务数据</p><h2 id="支持cluster"><a href="#支持cluster" class="headerlink" title="支持cluster"></a>支持cluster</h2><h1 id="API"><a href="#API" class="headerlink" title="API"></a>API</h1><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>所有metric有两个必填参数，name与help</p><h2 id="默认"><a href="#默认" class="headerlink" title="默认"></a>默认</h2><p>1.<code>collectDefaultMetrics</code>为prom推荐metric（部分metric仅在linux生效）</p><p>2.包含node特有的metric，如eventLoop lag，active handles，gc，node version</p><p>3.collectDefaultMetrics可以接受以下参数</p><ul><li>prefix：metric自定义前缀，默认空</li><li>registry ：自定义注册表，默认global</li><li><code>gcDurationBuckets</code></li><li><code>eventLoopMonitoringPrecision</code> </li></ul><h3 id="更换registry"><a href="#更换registry" class="headerlink" title="更换registry"></a>更换registry</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> client = <span class="built_in">require</span>(<span class="string">'prom-client'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> collectDefaultMetrics = client.collectDefaultMetrics;</span><br><span class="line"><span class="keyword">const</span> Registry = client.Registry;</span><br><span class="line"><span class="keyword">const</span> register = <span class="keyword">new</span> Registry();</span><br><span class="line">collectDefaultMetrics(&#123; register &#125;);</span><br></pre></td></tr></table></figure><h3 id="To-use-custom-buckets-for-GC-duration-histogram-pass-it-in-as-gcDurationBuckets"><a href="#To-use-custom-buckets-for-GC-duration-histogram-pass-it-in-as-gcDurationBuckets" class="headerlink" title="To use custom buckets for GC duration histogram, pass it in as gcDurationBuckets:"></a>To use custom buckets for GC duration histogram, pass it in as <code>gcDurationBuckets</code>:</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> client = <span class="built_in">require</span>(<span class="string">'prom-client'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> collectDefaultMetrics = client.collectDefaultMetrics;</span><br><span class="line"></span><br><span class="line">collectDefaultMetrics(&#123; <span class="attr">gcDurationBuckets</span>: [<span class="number">0.1</span>, <span class="number">0.2</span>, <span class="number">0.3</span>] &#125;);</span><br></pre></td></tr></table></figure><h3 id="To-prefix-metric-names-with-your-own-arbitrary-string-pass-in-a-prefix"><a href="#To-prefix-metric-names-with-your-own-arbitrary-string-pass-in-a-prefix" class="headerlink" title="To prefix metric names with your own arbitrary string, pass in a prefix:"></a>To prefix metric names with your own arbitrary string, pass in a <code>prefix</code>:</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> client = <span class="built_in">require</span>(<span class="string">'prom-client'</span>);</span><br><span class="line"><span class="keyword">const</span> collectDefaultMetrics = client.collectDefaultMetrics;</span><br><span class="line"><span class="keyword">const</span> prefix = <span class="string">'my_application_'</span>;</span><br><span class="line">collectDefaultMetrics(&#123; prefix &#125;);</span><br></pre></td></tr></table></figure><h3 id="You-can-get-the-full-list-of-metrics-by-inspecting-client-collectDefaultMetrics-metricsList"><a href="#You-can-get-the-full-list-of-metrics-by-inspecting-client-collectDefaultMetrics-metricsList" class="headerlink" title="You can get the full list of metrics by inspecting client.collectDefaultMetrics.metricsList."></a>You can get the full list of metrics by inspecting <code>client.collectDefaultMetrics.metricsList</code>.</h3><p>Default metrics are collected on scrape of metrics endpoint, not on an interval.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> client = <span class="built_in">require</span>(<span class="string">'prom-client'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> collectDefaultMetrics = client.collectDefaultMetrics;</span><br><span class="line"></span><br><span class="line">collectDefaultMetrics();</span><br></pre></td></tr></table></figure><h1 id="counter"><a href="#counter" class="headerlink" title="counter"></a>counter</h1><h1 id="Gauge"><a href="#Gauge" class="headerlink" title="Gauge"></a>Gauge</h1><h1 id="Histogram"><a href="#Histogram" class="headerlink" title="Histogram"></a>Histogram</h1><h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><h1 id="Labels"><a href="#Labels" class="headerlink" title="Labels"></a>Labels</h1><h1 id="Multiple-registries"><a href="#Multiple-registries" class="headerlink" title="Multiple registries"></a>Multiple registries</h1><h1 id="Register"><a href="#Register" class="headerlink" title="Register"></a>Register</h1><h1 id="Pushgateway"><a href="#Pushgateway" class="headerlink" title="Pushgateway"></a>Pushgateway</h1><h1 id="Utilities"><a href="#Utilities" class="headerlink" title="Utilities"></a>Utilities</h1><h1 id="GC-stats"><a href="#GC-stats" class="headerlink" title="GC stats"></a>GC stats</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;prom-client 支持nodejs收集metrics，直方图histogram，summaries，gauges，和counters&lt;
      
    
    </summary>
    
      <category term="prometheus" scheme="http://zehai.info/categories/prometheus/"/>
    
    
      <category term="client" scheme="http://zehai.info/tags/client/"/>
    
  </entry>
  
  <entry>
    <title>Node.JSv14</title>
    <link href="http://zehai.info/2020/04/22/2020-04-22-Node14/"/>
    <id>http://zehai.info/2020/04/22/2020-04-22-Node14/</id>
    <published>2020-04-22T02:37:29.000Z</published>
    <updated>2020-05-30T01:33:31.563Z</updated>
    
    <content type="html"><![CDATA[<h1 id="new"><a href="#new" class="headerlink" title="new"></a>new</h1><p>今天看到Node Current更新了14的版本，看看都有些什么东西</p><p>前置了解了一下doc中提到的semver，是一个语义化版本semantic versioning，实现版本和版本规范的解析，计算，比较，用以解决在大型项目中对依赖的版本失去控制的问题，Node.js 的包管理工具 npm 也完全基于 Semantic Versioning 来管理依赖的版本。</p><p>参考资料：<a href="https://zhuanlan.zhihu.com/p/20747196" target="_blank" rel="noopener">semver：语义化版本规范在 Node.js 中的实现</a></p><h2 id="deprecations"><a href="#deprecations" class="headerlink" title="deprecations"></a>deprecations</h2><p>sermver弃用一部分功能</p><ul><li><strong>(SEMVER-MAJOR)</strong> <strong>crypto</strong>: move pbkdf2 without digest to EOL (James M Snell) </li><li><strong>(SEMVER-MAJOR)</strong> <strong>fs</strong>: deprecate closing FileHandle on garbage collection (James M Snell)</li><li><strong>(SEMVER-MAJOR)</strong> <strong>http</strong>: move OutboundMessage.prototype.flush to EOL (James M Snell)</li><li><strong>(SEMVER-MAJOR)</strong> <strong>lib</strong>: move GLOBAL and root aliases to EOL (James M Snell)</li><li><strong>(SEMVER-MAJOR)</strong> <strong>os</strong>: move tmpDir() to EOL (James M Snell) </li><li><strong>(SEMVER-MAJOR)</strong> <strong>src</strong>: remove deprecated wasm type check (Clemens Backes) </li><li><strong>(SEMVER-MAJOR)</strong> <strong>stream</strong>: move _writableState.buffer to EOL (James M Snell)</li><li><strong>(SEMVER-MINOR)</strong> <strong>doc</strong>: deprecate process.mainModule (Antoine du HAMEL)</li><li><strong>(SEMVER-MINOR)</strong> <strong>doc</strong>: deprecate process.umask() with no arguments (Colin Ihrig) </li></ul><h2 id="ECMAScript-Modules"><a href="#ECMAScript-Modules" class="headerlink" title="ECMAScript Modules"></a>ECMAScript Modules</h2><p>在 <code>v13</code> 中，需要调用 <code>--experimental-modules</code> 来开启 <code>ESM module</code> 支持， 而且还会有警告，但目前已经移除警告（还是需要手动开启）<br>仍在实验中，但是其已经非常完善，移除警告迈向了stable的重要一步</p><h2 id="New-V8-ArrayBuffer-API"><a href="#New-V8-ArrayBuffer-API" class="headerlink" title="New V8 ArrayBuffer API"></a>New V8 ArrayBuffer API</h2><p>v8不再支持多个ArrayBuffer指向相同的base address</p><h2 id="Toolchain-and-Compiler-Upgrades"><a href="#Toolchain-and-Compiler-Upgrades" class="headerlink" title="Toolchain and Compiler Upgrades"></a>Toolchain and Compiler Upgrades</h2><p>//没看懂</p><ul><li><strong>(SEMVER-MAJOR)</strong> <strong>build</strong>: update macos deployment target to 10.13 for 14.x (AshCripps) <a href="https://github.com/nodejs/node/pull/32454" target="_blank" rel="noopener">#32454</a></li><li><strong>(SEMVER-MAJOR)</strong> <strong>doc</strong>: update cross compiler machine for Linux armv7 (Richard Lau) <a href="https://github.com/nodejs/node/pull/32812" target="_blank" rel="noopener">#32812</a></li><li><strong>(SEMVER-MAJOR)</strong> <strong>doc</strong>: update Centos/RHEL releases use devtoolset-8 (Richard Lau) <a href="https://github.com/nodejs/node/pull/32812" target="_blank" rel="noopener">#32812</a></li><li><strong>(SEMVER-MAJOR)</strong> <strong>doc</strong>: remove SmartOS from official binaries (Richard Lau) <a href="https://github.com/nodejs/node/pull/32812" target="_blank" rel="noopener">#32812</a></li><li><strong>(SEMVER-MAJOR)</strong> <strong>win</strong>: block running on EOL Windows versions (João Reis) <a href="https://github.com/nodejs/node/pull/31954" target="_blank" rel="noopener">#31954</a></li></ul><p>It is expected that there will be an ABI mismatch on ARM between the Node.js binary and native addons. Native addons are only broken if they interact with <code>std::shared_ptr</code>. This is expected to be fixed in a later version of Node.js 14.</p><h2 id="Update-to-V8-8-1"><a href="#Update-to-V8-8-1" class="headerlink" title="Update to V8 8.1"></a>Update to V8 8.1</h2><h2 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h2><ul><li><strong>cli, report</strong>: move –report-on-fatalerror to stable (Colin Ihrig) </li><li><strong>deps</strong>: upgrade to libuv 1.37.0 (Colin Ihrig) </li><li><strong>fs</strong>: add fs/promises alias module </li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;new&quot;&gt;&lt;a href=&quot;#new&quot; class=&quot;headerlink&quot; title=&quot;new&quot;&gt;&lt;/a&gt;new&lt;/h1&gt;&lt;p&gt;今天看到Node Current更新了14的版本，看看都有些什么东西&lt;/p&gt;
&lt;p&gt;前置了解了一下doc中提到的semver，是一个
      
    
    </summary>
    
      <category term="Node" scheme="http://zehai.info/categories/Node/"/>
    
    
      <category term="14" scheme="http://zehai.info/tags/14/"/>
    
  </entry>
  
  <entry>
    <title>kubernetes</title>
    <link href="http://zehai.info/2020/04/21/2020-04-21-kubenates/"/>
    <id>http://zehai.info/2020/04/21/2020-04-21-kubenates/</id>
    <published>2020-04-21T08:18:55.000Z</published>
    <updated>2020-05-30T01:40:04.969Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2-Basic"><a href="#2-Basic" class="headerlink" title="2.Basic"></a>2.Basic</h1><h2 id="2-1-创建集群"><a href="#2-1-创建集群" class="headerlink" title="2.1 创建集群"></a>2.1 创建集群</h2><p>minikube create</p><h2 id="2-2-部署应用"><a href="#2-2-部署应用" class="headerlink" title="2.2 部署应用"></a>2.2 部署应用</h2><p>一旦运行了 Kubernetes 集群，就可以在其上部署容器化应用程序。 为此，您需要创建 Kubernetes <strong>Deployment</strong> 配置。Deployment <strong>指挥 Kubernetes 如何创建和更新应用程序的实例</strong>。创建 Deployment 后，Kubernetes master 将应用程序实例调度到集群中的各个节点上。</p><p>创建应用程序实例后，Kubernetes Deployment 控制器会持续监视这些实例。 如果托管实例的节点关闭或被删除，则 Deployment 控制器会将该实例替换为群集中另一个节点上的实例。 <strong>这提供了一种自我修复机制来解决机器故障维护问题。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create deployment kubernetes-bootcamp --image=gcr.io/google-samples/kubernetes-bootcamp:v1</span><br></pre></td></tr></table></figure><h2 id="2-3-了解应用"><a href="#2-3-了解应用" class="headerlink" title="2.3 了解应用"></a>2.3 了解应用</h2><p>Kubernates pods（工作节点）</p><p>创建 Deployment 时, Kubernetes 添加了一个 <strong>Pod</strong> 来托管你的应用实例。Pod 是 Kubernetes 抽象出来的，表示一组一个或多个应用程序容器（如 Docker 或 rkt ），以及这些容器的一些共享资源。这些资源包括:</p><ul><li>共享存储，当作卷</li><li>网络，作为唯一的集群 IP 地址</li><li>有关每个容器如何运行的信息，例如容器映像版本或要使用的特定端口。</li></ul><p>Pod 为特定于应用程序的“逻辑主机”建模，并且可以包含相对紧耦合的不同应用容器。例如，Pod 可能既包含带有 Node.js 应用的容器，也包含另一个不同的容器，用于提供 Node.js 网络服务器要发布的数据。Pod 中的容器共享 IP 地址和端口，始终位于同一位置并且共同调度，并在同一工作节点上的共享上下文中运行。</p><h2 id="2-4-暴露应用"><a href="#2-4-暴露应用" class="headerlink" title="2.4 暴露应用"></a>2.4 暴露应用</h2><h2 id="2-5-伸缩应用"><a href="#2-5-伸缩应用" class="headerlink" title="2.5 伸缩应用"></a>2.5 伸缩应用</h2><h2 id="2-6-更新应用"><a href="#2-6-更新应用" class="headerlink" title="2.6 更新应用"></a>2.6 更新应用</h2><h1 id="3-在线培训课程"><a href="#3-在线培训课程" class="headerlink" title="3.在线培训课程"></a>3.在线培训课程</h1><h1 id="4-配置"><a href="#4-配置" class="headerlink" title="4. 配置"></a>4. 配置</h1><h1 id="5-无状态应用"><a href="#5-无状态应用" class="headerlink" title="5.无状态应用"></a>5.无状态应用</h1><h1 id="6-有状态应用"><a href="#6-有状态应用" class="headerlink" title="6.有状态应用"></a>6.有状态应用</h1><h1 id="7-集群"><a href="#7-集群" class="headerlink" title="7.集群"></a>7.集群</h1><h1 id="8-Service"><a href="#8-Service" class="headerlink" title="8.Service"></a>8.Service</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;2-Basic&quot;&gt;&lt;a href=&quot;#2-Basic&quot; class=&quot;headerlink&quot; title=&quot;2.Basic&quot;&gt;&lt;/a&gt;2.Basic&lt;/h1&gt;&lt;h2 id=&quot;2-1-创建集群&quot;&gt;&lt;a href=&quot;#2-1-创建集群&quot; class=&quot;headerli
      
    
    </summary>
    
      <category term="kubernetes" scheme="http://zehai.info/categories/kubernetes/"/>
    
    
      <category term="intro" scheme="http://zehai.info/tags/intro/"/>
    
  </entry>
  
  <entry>
    <title>LeetCodeWeek2</title>
    <link href="http://zehai.info/2020/04/19/2020-04-19-LeetCodeWeek1/"/>
    <id>http://zehai.info/2020/04/19/2020-04-19-LeetCodeWeek1/</id>
    <published>2020-04-19T05:23:52.000Z</published>
    <updated>2020-05-30T01:33:31.563Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Problem-Product-of-Array-Except-Self"><a href="#Problem-Product-of-Array-Except-Self" class="headerlink" title="Problem Product of Array Except Self"></a>Problem Product of Array Except Self</h1><p>Given an array <code>nums</code> of <em>n</em> integers where <em>n</em> &gt; 1,  return an array <code>output</code> such that <code>output[i]</code> is equal to the product of all the elements of <code>nums</code> except <code>nums[i]</code>.</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input:  [1,2,3,4]</span><br><span class="line">Output: [24,12,8,6]</span><br></pre></td></tr></table></figure><p><strong>Constraint:</strong> It’s guaranteed that the product of the elements of any prefix or suffix of the array (including the whole array) fits in a 32 bit integer.</p><p><strong>Note:</strong> Please solve it <strong>without division</strong> and in O(<em>n</em>).</p><p><strong>Follow up:</strong><br>Could you solve it with constant space complexity? (The output array <strong>does not</strong> count as extra space for the purpose of space complexity analysis.)</p><h2 id="key"><a href="#key" class="headerlink" title="key"></a>key</h2><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">//3ms</span><br><span class="line">class Solution &#123;</span><br><span class="line">    public int[] productExceptSelf(int[] nums) &#123;</span><br><span class="line">        int sum =1;</span><br><span class="line">        int hasZero =0;</span><br><span class="line">        for(int num :nums)&#123;</span><br><span class="line">            if(num!=0)&#123;</span><br><span class="line">                sum*=num;</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                hasZero++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        for(int i=0;i&lt;nums.length;i++)&#123;</span><br><span class="line">            if(hasZero&gt;=2)&#123;</span><br><span class="line">                nums[i]=0;</span><br><span class="line">            &#125;else if(hasZero==1)&#123;</span><br><span class="line">                if(nums[i]==0)&#123;</span><br><span class="line">                    nums[i]=sum;</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    nums[i]=0;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                nums[i]=sum/nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return nums;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//1ms</span><br><span class="line">class Solution &#123;</span><br><span class="line">    public int[] productExceptSelf(int[] nums) &#123;</span><br><span class="line">        int n = nums.length;</span><br><span class="line">        int[] left = new int[n];</span><br><span class="line">        left[0] = 1;</span><br><span class="line">        for (int i = 1; i &lt; n; i++) &#123;</span><br><span class="line">            left[i] = left[i-1] * nums[i-1];</span><br><span class="line">        &#125;</span><br><span class="line">        int product = 1;</span><br><span class="line">        for (int i = n - 1; i &gt;= 0; i--) &#123;</span><br><span class="line">            left[i] *= product;</span><br><span class="line">            product *= nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        return left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Problem-678Valid-Parenthesis-String"><a href="#Problem-678Valid-Parenthesis-String" class="headerlink" title="Problem-678Valid Parenthesis String"></a>Problem-678Valid Parenthesis String</h1><p><strong>Medium</strong></p><p>Given a string containing only three types of characters: ‘(‘, ‘)’ and ‘*’, write a function to check whether this string is valid. We define the validity of a string by these rules:</p><ol><li>Any left parenthesis <code>&#39;(&#39;</code> must have a corresponding right parenthesis <code>&#39;)&#39;</code>.</li><li>Any right parenthesis <code>&#39;)&#39;</code> must have a corresponding left parenthesis <code>&#39;(&#39;</code>.</li><li>Left parenthesis <code>&#39;(&#39;</code> must go before the corresponding right parenthesis <code>&#39;)&#39;</code>.</li><li><code>&#39;*&#39;</code> could be treated as a single right parenthesis <code>&#39;)&#39;</code> or a single left parenthesis <code>&#39;(&#39;</code> or an empty string.</li><li>An empty string is also valid.</li></ol><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;()&quot;</span><br><span class="line">Output: True</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;(*)&quot;</span><br><span class="line">Output: True</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;(*))&quot;</span><br><span class="line">Output: True</span><br></pre></td></tr></table></figure><p><strong>Note:</strong></p><ol><li>The string size will be in the range [1, 100].</li></ol><h2 id="key-1"><a href="#key-1" class="headerlink" title="key"></a>key</h2><h2 id="solution-1"><a href="#solution-1" class="headerlink" title="solution"></a>solution</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkValidString</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s.length() == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;<span class="keyword">int</span> star=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">char</span>[] c = s.toCharArray();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> i : c) &#123;</span><br><span class="line">            <span class="keyword">switch</span> (i) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'('</span>:</span><br><span class="line">                    left++;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">')'</span>:</span><br><span class="line">                    left--;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'*'</span>:</span><br><span class="line">                    star++;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (left == <span class="number">0</span> || left - star == <span class="number">0</span> || left + star == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Brute-Force"><a href="#Brute-Force" class="headerlink" title="Brute Force"></a>Brute Force</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> ans = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkValidString</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        solve(<span class="keyword">new</span> StringBuilder(s), <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">(StringBuilder sb, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (i == sb.length()) &#123;</span><br><span class="line">            ans |= valid(sb);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sb.charAt(i) == <span class="string">'*'</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">char</span> c: <span class="string">"() "</span>.toCharArray()) &#123;</span><br><span class="line">                sb.setCharAt(i, c);</span><br><span class="line">                solve(sb, i+<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span> (ans) <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            sb.setCharAt(i, <span class="string">'*'</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span></span><br><span class="line">            solve(sb, i + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">valid</span><span class="params">(StringBuilder sb)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> bal = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sb.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> c = sb.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">'('</span>) bal++;</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">')'</span>) bal--;</span><br><span class="line">            <span class="keyword">if</span> (bal &lt; <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bal == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Dynamic-Programming"><a href="#Dynamic-Programming" class="headerlink" title="Dynamic Programming"></a>Dynamic Programming</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkValidString</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = s.length();</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">boolean</span>[][] dp = <span class="keyword">new</span> <span class="keyword">boolean</span>[n][n];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s.charAt(i) == <span class="string">'*'</span>) dp[i][i] = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; n-<span class="number">1</span> &amp;&amp;</span><br><span class="line">                    (s.charAt(i) == <span class="string">'('</span> || s.charAt(i) == <span class="string">'*'</span>) &amp;&amp;</span><br><span class="line">                    (s.charAt(i+<span class="number">1</span>) == <span class="string">')'</span> || s.charAt(i+<span class="number">1</span>) == <span class="string">'*'</span>)) &#123;</span><br><span class="line">                dp[i][i+<span class="number">1</span>] = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> size = <span class="number">2</span>; size &lt; n; size++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i + size &lt; n; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (s.charAt(i) == <span class="string">'*'</span> &amp;&amp; dp[i+<span class="number">1</span>][i+size] == <span class="keyword">true</span>) &#123;</span><br><span class="line">                    dp[i][i+size] = <span class="keyword">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s.charAt(i) == <span class="string">'('</span> || s.charAt(i) == <span class="string">'*'</span>) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> k = i+<span class="number">1</span>; k &lt;= i+size; k++) &#123;</span><br><span class="line">                        <span class="keyword">if</span> ((s.charAt(k) == <span class="string">')'</span> || s.charAt(k) == <span class="string">'*'</span>) &amp;&amp;</span><br><span class="line">                                (k == i+<span class="number">1</span> || dp[i+<span class="number">1</span>][k-<span class="number">1</span>]) &amp;&amp;</span><br><span class="line">                                (k == i+size || dp[k+<span class="number">1</span>][i+size])) &#123;</span><br><span class="line">                            dp[i][i+size] = <span class="keyword">true</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">0</span>][n-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Greedy"><a href="#Greedy" class="headerlink" title="Greedy"></a>Greedy</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkValidString</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> lo = <span class="number">0</span>, hi = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">char</span> c: s.toCharArray()) &#123;</span><br><span class="line">           lo += c == <span class="string">'('</span> ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">           hi += c != <span class="string">')'</span> ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">           <span class="keyword">if</span> (hi &lt; <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">           lo = Math.max(lo, <span class="number">0</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> lo == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Problem-Product-of-Array-Except-Self&quot;&gt;&lt;a href=&quot;#Problem-Product-of-Array-Except-Self&quot; class=&quot;headerlink&quot; title=&quot;Problem Product of A
      
    
    </summary>
    
      <category term="LeetCode" scheme="http://zehai.info/categories/LeetCode/"/>
    
    
      <category term="Easy" scheme="http://zehai.info/tags/Easy/"/>
    
  </entry>
  
  <entry>
    <title>同一宿主机下docker互相访问</title>
    <link href="http://zehai.info/2020/04/16/2020-04-16-%E5%90%8C%E4%B8%80%E5%AE%BF%E4%B8%BB%E6%9C%BA%E4%B8%8Bdocker%E4%BA%92%E7%9B%B8%E8%AE%BF%E9%97%AE/"/>
    <id>http://zehai.info/2020/04/16/2020-04-16-同一宿主机下docker互相访问/</id>
    <published>2020-04-16T10:06:19.000Z</published>
    <updated>2020-05-30T01:33:31.563Z</updated>
    
    <content type="html"><![CDATA[<h1 id="what"><a href="#what" class="headerlink" title="what"></a>what</h1><p>该文档解决：docker下，altermanager收不到prometheus消息</p><p>事因，我在一个宿主机下建立了多个docker容器</p><ul><li>node-exporter</li><li>prometheus</li><li>grafana</li><li>alertmanager</li><li>timonwong/prometheus-webhook-dingtalk</li></ul><p>这些服务之间会有一些互相访问，如prometheus可以发送数据给alertmanager来发送报警信息，alertmanager通过规则处理可以发送邮件，发送钉钉等方式告知用户，问题就出在prometheus的yml配置文档中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">alerting:</span><br><span class="line">  alertmanagers:</span><br><span class="line">    - static_configs:</span><br><span class="line">        - targets: ['localhost:9002']  </span><br><span class="line">        </span><br><span class="line"><span class="meta">#</span>##############</span><br><span class="line">修改后：</span><br><span class="line">alerting:</span><br><span class="line">  alertmanagers:</span><br><span class="line">    - static_configs:</span><br><span class="line">        - targets: ['10.10.10.10:9002']</span><br></pre></td></tr></table></figure><p>问题出在了prometheus的配置中访问了localhost端口，但这个并不是访问宿主机的9002的端口，而是访问的是<code>docker内部的9002</code>端口</p><p>找到问题后，使用了宿主机ip+port的方式进行访问</p><h1 id="how"><a href="#how" class="headerlink" title="how"></a>how</h1><p>查询了资料后，发现解决该问题的方法有：</p><ul><li>宿主ip：port访问</li><li>容器ip访问</li><li>link建立通信网络(单向，不推荐)–link xxx</li><li>user-defined networks（docker dns server/bridge）</li></ul><p>前两种不太推荐，因为如果容器ip更改或者宿主机ip更改就需要更新配置文档，第三种方法不太推荐，run 时候link只是单向的建立连接，第四种<a href="https://docs.docker.com/engine/reference/commandline/network_create/" target="_blank" rel="noopener">docker network create</a>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//创建网络</span><br><span class="line">docker network create -d bridge my-bridge-network</span><br><span class="line">//run时候加入网络</span><br><span class="line">docker run -it --network test-network --network-alias mysql  -e MYSQL_ROOT_PASSWORD=123 mysql:5.7</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;what&quot;&gt;&lt;a href=&quot;#what&quot; class=&quot;headerlink&quot; title=&quot;what&quot;&gt;&lt;/a&gt;what&lt;/h1&gt;&lt;p&gt;该文档解决：docker下，altermanager收不到prometheus消息&lt;/p&gt;
&lt;p&gt;事因，我在一个宿主机下建立
      
    
    </summary>
    
      <category term="Question" scheme="http://zehai.info/categories/Question/"/>
    
    
      <category term="整理" scheme="http://zehai.info/tags/%E6%95%B4%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>node整理</title>
    <link href="http://zehai.info/2020/04/10/2020-04-10-eventloop/"/>
    <id>http://zehai.info/2020/04/10/2020-04-10-eventloop/</id>
    <published>2020-04-10T08:44:26.000Z</published>
    <updated>2020-05-30T01:33:31.563Z</updated>
    
    <content type="html"><![CDATA[<h1 id="What"><a href="#What" class="headerlink" title="What"></a>What</h1><p>eventloop使得单线程机制的node实现非阻塞I/O的机制，将任务通过libuv分发给线程池后，交由系统内核完成（多线程），完成后内核通知nodejs，将回调放入<code>poll</code>队列执行</p><p>启动nodejs时，eventloop初始化，进程会输入很多script，包括：</p><ul><li>async API calls</li><li>定时器</li><li>process.nextTick()</li></ul><p><img src="../img/phaseOfEventloop-1586590365657.png" alt=""></p><p>eventloop有六个队列</p><ul><li>timers</li><li>pending callbacks</li><li>idle,prepare</li><li>poll(connections,data,etc)</li><li>check</li><li>close callbacks</li></ul><p>这些队列被称作phase,每个phase都是一个可以放callback的FIFO队列，当进入一个phase时，队列将执行完phase中的callback或者执行最大数目的callback后将进入另一个phase</p><ul><li>timers：执行定时器，包括setTimeout，setInerval</li><li>pending callbacks 执行延迟到下一个循环的I/O callback</li><li>idle，prepare 处理系统内部</li><li>poll：检查新的I/O事件，执行I/O回调,node会适当的在此阻塞</li><li>check:setImmediate()</li><li>close：关闭回调函数，如：socket.on(‘close’,foo())</li></ul><h1 id="Detail"><a href="#Detail" class="headerlink" title="Detail"></a>Detail</h1><h2 id="Timers"><a href="#Timers" class="headerlink" title="Timers"></a>Timers</h2><p>设定延迟后，timers会在规定的时间执行，但存在情况延迟，如<code>poll</code> phase执行回调，超过了timer设定的时间。因为poll必须完成一个任务后才可以检查最近的定时器，没到时间就执行下一个callback，执行callback期间无法中断</p><blockquote><p>可以得出结论：<code>poll</code>控制着定时器何时执行</p></blockquote><p>另外为了防止poll phase 变成恶汉，libuv 制定了一个依赖于系统的硬性最大值，来停止轮询获取更多事件</p><h2 id="pending-callbacks"><a href="#pending-callbacks" class="headerlink" title="pending callbacks"></a>pending callbacks</h2><p>该队列在系统错误时执行回调（如TCP err），如TCP socket尝试重连收到了<code>ECONNREFUSED</code>，系统需要这些错误报告，那这个错误报告回调就会放在pending callbacks中等待被执行</p><h2 id="poll"><a href="#poll" class="headerlink" title="poll"></a>poll</h2><p>最重要的阶段，poll主要包含两个功能：</p><ol><li><p>计算阻塞和轮询的IO时间</p></li><li><p>执行poll 队列里的events</p></li></ol><p>当eventloop进入<code>poll</code>阶段，并没有timers的时候</p><ul><li><code>poll</code>不为空，顺序同步执行任务，直到为空或达到处理数量上限</li><li><code>poll</code>为空：如果有setImmediate()，则进入<code>check phase</code>，反之就在<code>poll</code>等客人</li></ul><p>一但<code>poll</code>为空，eventlopp将会检查计时器是否有快到的，如果有需要执行的，eventloop将要进入<code>timers</code>阶段来顺序执行timer callback</p><h2 id="check"><a href="#check" class="headerlink" title="check"></a>check</h2><p>这个phase可以在<code>poll</code>执行完成时开始执行setImmediate()回调。他其实是特殊的定时器队列，<strong>使用libuv API在poll完成的阶段执行</strong>（这也是他存在的原因）。</p><h2 id="close-callbacks"><a href="#close-callbacks" class="headerlink" title="close callbacks"></a>close callbacks</h2><p>socket.desroy()等执行关闭event时候会进入该phase，否则会被process.nextTick()触发</p><h1 id="setImmedate-vs-setTimeout"><a href="#setImmedate-vs-setTimeout" class="headerlink" title="setImmedate() vs setTimeout()"></a>setImmedate() vs setTimeout()</h1><p>相似却又不同</p><ul><li>setImmediate()是poll执行完成后执行的script</li><li>setTimeout()是定时执行的</li></ul><p>执行哪个收到上下文的约束，如果两个都被主模块调用，那么进程性能将会收到约束（影响其他app运行）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">without IO</span><br><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">  console.log(&apos;timeout&apos;);</span><br><span class="line">&#125;, 0);</span><br><span class="line"></span><br><span class="line">setImmediate(() =&gt; &#123;</span><br><span class="line">  console.log(&apos;immediate&apos;);</span><br><span class="line">&#125;);</span><br><span class="line">//</span><br><span class="line">$ node timeout_vs_immediate.js</span><br><span class="line">timeout</span><br><span class="line">immediate</span><br><span class="line"></span><br><span class="line">$ node timeout_vs_immediate.js</span><br><span class="line">immediate</span><br><span class="line">timeout</span><br><span class="line"></span><br><span class="line">with IO</span><br><span class="line">// timeout_vs_immediate.js</span><br><span class="line">const fs = require(&apos;fs&apos;);</span><br><span class="line"></span><br><span class="line">fs.readFile(__filename, () =&gt; &#123;</span><br><span class="line">  setTimeout(() =&gt; &#123;</span><br><span class="line">    console.log(&apos;timeout&apos;);</span><br><span class="line">  &#125;, 0);</span><br><span class="line">  setImmediate(() =&gt; &#123;</span><br><span class="line">    console.log(&apos;immediate&apos;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">//</span><br><span class="line">immediate</span><br><span class="line">timeout</span><br></pre></td></tr></table></figure><p>setImmediate()好处在于，如果有IO时会比setTimeout先执行</p><h2 id="process-nextTick"><a href="#process-nextTick" class="headerlink" title="process.nextTick()"></a>process.nextTick()</h2><p>它是个异步API，并没有出现在六个phase中，他并不属于eventloop的一部分，当操作完成后处理nextTickQueue而不管eventloop执行到哪个阶段，这个异步API依赖于C/C++处理 JavaScript</p><p>他的callbakcs会立即执行，<strong>直到执行完</strong>，eventloop才会正常工作（如果nextTick递归调用则会死循环）</p><p>为什么会出现这种设计？</p><p>出于所有<strong>接口都应该异步</strong>的设计思路</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function apiCall(arg, callback) &#123;</span><br><span class="line">  if (typeof arg !== &apos;string&apos;)</span><br><span class="line">    return process.nextTick(callback,</span><br><span class="line">                            new TypeError(&apos;argument should be string&apos;));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码段会校验参数，如果不正确，它将会把错误传递给回调。该API最近更新，允许传任何参给process.nextTick(),所以你不需要嵌套。仅在剩余代码执行之后我们会把错误反馈给用户，通过nextTick，我们保证<code>apiCal()</code>始终在用户胜于代码之后及eventloop继续之前，执行。为了达到这个目标，JS栈内存允许展开并且立即执行提供的callback，似的nextTick递归不会有报错。</p><h3 id="process-nextTick-vs-setImmediate"><a href="#process-nextTick-vs-setImmediate" class="headerlink" title="process.nextTick() vs setImmediate()"></a>process.nextTick() vs setImmediate()</h3><ul><li>process.nextTick()立刻执行</li><li>setImmediate()下次tick执行</li></ul><p>为什么需要process.nextTick()</p><ul><li>允许用户处理errors，清理不需要的资源，事件循环前 尝试重新连接</li><li>有时有必要在eventloop继续之前，在call stack unwound之后，让callback执行</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const server = net.createServer();</span><br><span class="line">server.on(&apos;connection&apos;, (conn) =&gt; &#123; &#125;);</span><br><span class="line"></span><br><span class="line">server.listen(8080);</span><br><span class="line">server.on(&apos;listening&apos;, () =&gt; &#123; &#125;);</span><br></pre></td></tr></table></figure><p>listen()的callback调用的是setImmiate()，除非传递Hostname，否则立即绑定端口。为了保证eventloop继续，他必须进入<code>poll</code> phase，这意味着，存在可能已经收到了连接，从而允许在侦听事件之前触发连接事件</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;What&quot;&gt;&lt;a href=&quot;#What&quot; class=&quot;headerlink&quot; title=&quot;What&quot;&gt;&lt;/a&gt;What&lt;/h1&gt;&lt;p&gt;eventloop使得单线程机制的node实现非阻塞I/O的机制，将任务通过libuv分发给线程池后，交由系统内核完成（多线
      
    
    </summary>
    
      <category term="Node" scheme="http://zehai.info/categories/Node/"/>
    
    
      <category term="整理" scheme="http://zehai.info/tags/%E6%95%B4%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>LeetCodeWeek2</title>
    <link href="http://zehai.info/2020/04/08/2020-04-08-LeetCodeWeek2/"/>
    <id>http://zehai.info/2020/04/08/2020-04-08-LeetCodeWeek2/</id>
    <published>2020-04-08T08:44:26.000Z</published>
    <updated>2020-05-30T01:33:31.563Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Prolem876-Submission-Detail"><a href="#Prolem876-Submission-Detail" class="headerlink" title="Prolem876-Submission Detail"></a>Prolem876-Submission Detail</h1><p>Given a non-empty, singly linked list with head node <code>head</code>, return a middle node of linked list.</p><p>If there are two middle nodes, return the second middle node.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,2,3,4,5]</span><br><span class="line">Output: Node 3 from this list (Serialization: [3,4,5])</span><br><span class="line">The returned node has value 3.  (The judge&apos;s serialization of this node is [3,4,5]).</span><br><span class="line">Note that we returned a ListNode object ans, such that:</span><br><span class="line">ans.val = 3, ans.next.val = 4, ans.next.next.val = 5, and ans.next.next.next = NULL.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,2,3,4,5,6]</span><br><span class="line">Output: Node 4 from this list (Serialization: [4,5,6])</span><br><span class="line">Since the list has two middle nodes with values 3 and 4, we return the second one.</span><br></pre></td></tr></table></figure><p><strong>Note:</strong></p><ul><li>The number of nodes in the given list will be between <code>1</code> and <code>100</code>.</li></ul><h2 id="key"><a href="#key" class="headerlink" title="key"></a>key</h2><p>题目输出单向链表的中间元素，有这么几个思路</p><ul><li>O(N)–&gt;遍历放数组，1/2输出<code>return A[t / 2]</code></li><li>O(N)–&gt;根据中间特点，mid前进一格，end前进两格</li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>第一次提交:0ms</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">middleNode</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        ListNode mid = head;</span><br><span class="line">        ListNode end = head;</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(end.next!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            mid = head.next;</span><br><span class="line">            ListNode tmp = mid;</span><br><span class="line">            i++;</span><br><span class="line">            <span class="keyword">int</span> j=i;</span><br><span class="line">            <span class="keyword">while</span>(j&gt;<span class="number">0</span>)&#123;<span class="comment">//搞复杂了</span></span><br><span class="line">                <span class="keyword">if</span>(tmp.next==<span class="keyword">null</span>)<span class="keyword">return</span> mid;</span><br><span class="line">                end = tmp.next;</span><br><span class="line">                tmp=tmp.next;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            head=head.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mid;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二次参考其他代码-提交：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public ListNode middleNode(ListNode head) &#123;</span><br><span class="line">        ListNode mid = head, end = head;</span><br><span class="line">        while (mid != null &amp;&amp; end.next != null) &#123;</span><br><span class="line">            mid = mid.next;</span><br><span class="line">            end = end.next.next;</span><br><span class="line">        &#125;</span><br><span class="line">        return mid;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Prolem876-Submission-Detail&quot;&gt;&lt;a href=&quot;#Prolem876-Submission-Detail&quot; class=&quot;headerlink&quot; title=&quot;Prolem876-Submission Detail&quot;&gt;&lt;/a&gt;Prole
      
    
    </summary>
    
      <category term="LeetCode" scheme="http://zehai.info/categories/LeetCode/"/>
    
    
      <category term="Easy" scheme="http://zehai.info/tags/Easy/"/>
    
  </entry>
  
  <entry>
    <title>LeetCodeWeek1</title>
    <link href="http://zehai.info/2020/04/05/2020-04-05-LeetCodeWeek1/"/>
    <id>http://zehai.info/2020/04/05/2020-04-05-LeetCodeWeek1/</id>
    <published>2020-04-05T14:32:05.000Z</published>
    <updated>2020-05-30T01:33:31.563Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Problem-Single-Number"><a href="#Problem-Single-Number" class="headerlink" title="Problem  Single Number"></a>Problem  Single Number</h1><p>好久没有刷题了，刚好遇到LeetCode，30天计划，打算强迫自己完成</p><p>Given a <strong>non-empty</strong> array of integers, every element appears <em>twice</em> except for one. Find that single one.</p><p><strong>Note:</strong></p><p>Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [2,2,1]</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [4,1,2,1,2]</span><br><span class="line">Output: 4</span><br></pre></td></tr></table></figure><h1 id="Key"><a href="#Key" class="headerlink" title="Key"></a>Key</h1><p>思路</p><ul><li>第一个思路O(n^2)去做类似于冒泡遍历的办法</li><li>借助Array.sort()可以迅速排序，然后O(n)的办法遍历得到结果</li><li>（以上是自己的思路，以下为LeetCode代码思考）</li><li><a href="## 异或">通过异或操作迅速比较</a></li><li>通过 Arrays.stream(nums).reduce(0, (x, y) -&gt; x ^ y)来更快迭代每个元素</li></ul><h2 id="Array-steam"><a href="#Array-steam" class="headerlink" title="Array.steam()"></a>Array.steam()</h2><p>以下参考<a href="https://blog.csdn.net/a13662080711/article/details/84928181" target="_blank" rel="noopener">CSDN</a></p><p>Stream 不是集合元素，它不是数据结构并不保存数据，它是有关算法和计算的，它更像一个高级版本的 Iterator。原始版本的 Iterator，用户只能显式地一个一个遍历元素并对其执行某些操作；高级版本的 Stream，用户只要给出需要对其包含的元素执行什么操作，比如 “过滤掉长度大于 10 的字符串”、“获取每个字符串的首字母”等，Stream 会隐式地在内部进行遍历，做出相应的数据转换。</p><p>Stream 就如同一个迭代器（Iterator），单向，不可往复，数据只能遍历一次，遍历过一次后即用尽了，就好比流水从面前流过，一去不复返。</p><p>而和迭代器又不同的是，Stream 可以并行化操作，迭代器只能命令式地、串行化操作。顾名思义，当使用串行方式去遍历时，每个 item 读完后再读下一个 item。而使用并行去遍历时，数据会被分成多个段，其中每一个都在不同的线程中处理，然后将结果一起输出。Stream 的并行操作依赖于 Java7 中引入的 Fork/Join 框架（JSR166y）来拆分任务和加速处理过程</p><p>简单说，对 Stream 的使用就是实现一个 filter-map-reduce 过程，产生一个最终结果，或者导致一个副作用（side effect）。</p><p>（以下为个人理解）</p><p>相对于Java中的Stream流，Java中也有，比如Array.reduce(),Array.foreach()等，通过回调函数的方式进行，</p><h2 id="异或"><a href="#异或" class="headerlink" title="异或"></a>异或</h2><p>|=：两个二进制对应位都为0时，结果等于0，否则结果等于1；</p><p>&amp;=：两个二进制的对应位都为1时，结果为1，否则结果等于0；</p><p>^=：两个二进制的对应位相同，结果为0，否则结果为1。</p><p>对于这道题来说，[2,2,1]</p><p>第零次遍历：init res=0,题目要求找出出现一次的数，所以这个数肯定存在</p><p>第一次遍历：res=2</p><p>第二次遍历：res=0，因为res^=2（即res=res^2）</p><p>第三次遍历：res=1结束遍历</p><p><strong>综上：常用^= 以及&gt;&gt;位运算符，C级别的性能</strong></p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><ul><li>对于异或方法（0ms）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> n : nums) &#123;</span><br><span class="line">            result ^= n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自己的方法就不贴了。。==感觉好蠢==写了半天。</p><h1 id="Problem-Move-Zeroes"><a href="#Problem-Move-Zeroes" class="headerlink" title="Problem  Move Zeroes"></a>Problem  Move Zeroes</h1><p>Given an array <code>nums</code>, write a function to move all <code>0</code>‘s to the end of it while maintaining the relative order of the non-zero elements.</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [0,1,0,3,12]</span><br><span class="line">Output: [1,3,12,0,0]</span><br></pre></td></tr></table></figure><p><strong>Note</strong>:</p><ol><li>You must do this <strong>in-place</strong> without making a copy of the array.</li><li>Minimize the total number of operations.</li></ol><h1 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h1><p>第一版：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">moveZeroes</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;nums.length-<span class="number">1</span>;j++)&#123;</span><br><span class="line">                    nums[j]=nums[j+<span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                nums[nums.length-<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原本根据题目的意思，想法就是找到一个0，整体往前移动一位，一把梭，但写完发现，<strong>本身没有必要整体前移</strong>，因为我的判断是num[i]是不是为0，所以只需要将0的个数记录下来，非0的元素前移，最后补0就可以了</p><p>第二版</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public void moveZeroes(int[] nums) &#123;</span><br><span class="line">         if (nums == null || nums.length == 0) return;        </span><br><span class="line"> </span><br><span class="line">        int insertPos = 0;</span><br><span class="line">        for (int num: nums) &#123;</span><br><span class="line">            if (num != 0) nums[insertPos++] = num;</span><br><span class="line">        &#125;        </span><br><span class="line"></span><br><span class="line">        while (insertPos &lt; nums.length) &#123;</span><br><span class="line">            nums[insertPos++] = 0;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Problem-Best-Time-to-Buy-and-Sell-Stock-II"><a href="#Problem-Best-Time-to-Buy-and-Sell-Stock-II" class="headerlink" title="Problem Best Time to Buy and Sell Stock II"></a>Problem Best Time to Buy and Sell Stock II</h1><p>Say you have an array for which the ith element is the price of a given stock on day i.</p><p>Design an algorithm to find the maximum profit. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times).</p><p>Note: You may not engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again).</p><p>Example 1:</p><p>Input: [7,1,5,3,6,4]<br>Output: 7<br>Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.<br>             Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.<br>Example 2:</p><p>Input: [1,2,3,4,5]<br>Output: 4<br>Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.<br>             Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are<br>             engaging multiple transactions at the same time. You must sell before buying again.<br>Example 3:</p><p>Input: [7,6,4,3,1]<br>Output: 0<br>Explanation: In this case, no transaction is done, i.e. max profit = 0.</p><h1 id="key"><a href="#key" class="headerlink" title="key"></a>key</h1><p>题目获取最大利润，本以为是通过动态规划DP来做，但是仔细一想，差值就能解决问题<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int maxProfit(int[] prices) &#123;</span><br><span class="line">        int res = 0;</span><br><span class="line">        for (int i = 0; i &lt; prices.length - 1; ++i) &#123;</span><br><span class="line">            if (prices[i] &lt; prices[i + 1]) &#123;</span><br><span class="line">                res += prices[i + 1] - prices[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="Problem-happy-Number"><a href="#Problem-happy-Number" class="headerlink" title="Problem happy Number"></a>Problem happy Number</h1><p>Write an algorithm to determine if a number is “happy”.</p><p>A happy number is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy numbers.</p><p><strong>Example:</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Input: 19</span><br><span class="line">Output: true</span><br><span class="line">Explanation: </span><br><span class="line">12 + 92 = 82</span><br><span class="line">82 + 22 = 68</span><br><span class="line">62 + 82 = 100</span><br><span class="line">12 + 02 + 02 = 1</span><br></pre></td></tr></table></figure><h1 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h1><p>第一版</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public boolean isHappy(int n) &#123;</span><br><span class="line">         int sum =0;</span><br><span class="line">        while (sum != 1) &#123;</span><br><span class="line">            if(sum!=0)&#123;</span><br><span class="line">                n=sum;sum=0;</span><br><span class="line">            &#125;</span><br><span class="line">            while (n &gt; 0) &#123;</span><br><span class="line">                int t = n % 10;</span><br><span class="line">                sum += t * t;</span><br><span class="line">                n /= 10;</span><br><span class="line">            &#125;</span><br><span class="line">            if(sum==0)return false;</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实写完这个框架我就想起来了，可能在计算上存在死循环，就比如</p><p><img src="../img/aHR0cHM6Ly9waWMubGVldGNvZGUtY24uY29tL0ZpZ3VyZXMvMjAyL2ltYWdlMi5wbmc.jfif" alt="在这里插入图片描述"></p><p>如果这样的题目就进入了死循环，所以干脆直接通过hashset的方式进行过滤</p><p>添加了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(set.contains(sum))&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    set.add(sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整体代码如下：</p><p>Runtime: 5 ms, faster than 9.41% of Java online submissions for Happy Number.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isHappy</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    Set&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    <span class="keyword">int</span> sum =<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (sum != <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(sum!=<span class="number">0</span>)&#123;</span><br><span class="line">            n=sum;sum=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> t = n % <span class="number">10</span>;</span><br><span class="line">            sum += t * t;</span><br><span class="line">            n /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(sum==<span class="number">0</span>)<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(set.contains(sum))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            set.add(sum);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Problem-Single-Number&quot;&gt;&lt;a href=&quot;#Problem-Single-Number&quot; class=&quot;headerlink&quot; title=&quot;Problem  Single Number&quot;&gt;&lt;/a&gt;Problem  Single Number
      
    
    </summary>
    
      <category term="LeetCode" scheme="http://zehai.info/categories/LeetCode/"/>
    
    
      <category term="Easy" scheme="http://zehai.info/tags/Easy/"/>
    
  </entry>
  
  <entry>
    <title>UniqueBinarySearchTrees</title>
    <link href="http://zehai.info/2020/03/22/2020-03-22-UniqueBinarySearchTrees/"/>
    <id>http://zehai.info/2020/03/22/2020-03-22-UniqueBinarySearchTrees/</id>
    <published>2020-03-22T04:37:47.000Z</published>
    <updated>2020-05-30T01:33:31.563Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Problem-96"><a href="#Problem-96" class="headerlink" title="Problem 96"></a>Problem 96</h1><p>Given <em>n</em>, how many structurally unique <strong>BST’s</strong> (binary search trees) that store values 1 … <em>n</em>?</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Input: 3</span><br><span class="line">Output: 5</span><br><span class="line">Explanation:</span><br><span class="line">Given n = 3, there are a total of 5 unique BST&apos;s:</span><br><span class="line"></span><br><span class="line">   1         3     3      2      1</span><br><span class="line">    \       /     /      / \      \</span><br><span class="line">     3     2     1      1   3      2</span><br><span class="line">    /     /       \                 \</span><br><span class="line">   2     1         2                 3</span><br></pre></td></tr></table></figure><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>题目其实相对比较简单，给出1~n，给出能够成的BST的数目，题目一开始的想法是用1~n去生成BST，看一下有多少种情况，然后做了很多无用功=.=</p><p>越写越不对劲后来查了一下，这道题是有数学规律的</p><p>BST有几个特点</p><ul><li>中序遍历依次增（大于等于）</li><li>左右自述也是BST（recursion）</li></ul><p>所以在i作为根节点时，左子树i-1个节点，右子树n-i个节点</p><p>数学的思想在于<strong>唯一二叉树的个数为左子树结点的个数乘以右子树的个数。而根节点可以从1到n 中选择</strong>，所以有</p><blockquote><p>for(int i=1;i&lt;=n;++i)<br>           sum+=numTrees(i-1)*numTrees(n-i);</p></blockquote><p>再加上边际控制n&lt;=1–&gt;sum=1</p><p>就有了解题的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numTrees</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n&lt;=<span class="number">1</span>)    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">            sum+=numTrees(i-<span class="number">1</span>)*numTrees(n-i);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sum;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Solution-95-Unique-Binary-Search-Trees-II"><a href="#Solution-95-Unique-Binary-Search-Trees-II" class="headerlink" title="Solution 95 Unique Binary Search Trees II"></a>Solution 95 Unique Binary Search Trees II</h2><p>万幸，自己折腾的生成BST的代码没白写</p><p>Given an integer <em>n</em>, generate all structurally unique <strong>BST’s</strong> (binary search trees) that store values 1 … <em>n</em>.</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Input: 3</span><br><span class="line">Output:</span><br><span class="line">[</span><br><span class="line">  [1,null,3,2],</span><br><span class="line">  [3,2,null,1],</span><br><span class="line">  [3,1,null,null,2],</span><br><span class="line">  [2,1,3],</span><br><span class="line">  [1,null,2,null,3]</span><br><span class="line">]</span><br><span class="line">Explanation:</span><br><span class="line">The above output corresponds to the 5 unique BST&apos;s shown below:</span><br><span class="line"></span><br><span class="line">   1         3     3      2      1</span><br><span class="line">    \       /     /      / \      \</span><br><span class="line">     3     2     1      1   3      2</span><br><span class="line">    /     /       \                 \</span><br><span class="line">   2     1         2                 3</span><br></pre></td></tr></table></figure><p>看题目是前序遍历,我们从上向下查找，外面一层大循环遍历根节点</p><blockquote><p>for(int i=start ;i&lt;=end;i++){}</p></blockquote><p>确定了i节点后可以通过递归写出根节点i的情况下的左右子树</p><blockquote><p> List<treenode> leftChild = recursion(start, i - 1);</treenode></p><p>List<treenode> rightChild = recursion(i + 1, end);</treenode></p></blockquote><p>然后遍历左右子树的每个元素，两层for循环嵌套</p><blockquote><p>  for(TreeNode left : leftChild) {<br>                for(TreeNode right : rightChild) {<br>                    TreeNode root = new TreeNode(i);<br>                    root.left = left;<br>                    root.right = right;<br>                    res.add(root);<br>                }<br>            }</p></blockquote><p>得到最后的res进行返回，以及处理一下start&gt;end的边际条件就完成了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;TreeNode&gt; <span class="title">generateTrees</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">if</span>(n &lt; <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;TreeNode&gt;();</span><br><span class="line">        <span class="keyword">return</span> recursion(<span class="number">1</span>, n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;TreeNode&gt; <span class="title">recursion</span><span class="params">(<span class="keyword">int</span> start,<span class="keyword">int</span> end)</span></span>&#123;</span><br><span class="line">        List&lt;TreeNode&gt; res = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        <span class="keyword">if</span>(start &gt; end) &#123;</span><br><span class="line">            res.add(<span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = start;i&lt;=end;i++)&#123;</span><br><span class="line">            List&lt;TreeNode&gt; leftChild = recursion(start, i - <span class="number">1</span>);</span><br><span class="line">            List&lt;TreeNode&gt; rightChild = recursion(i + <span class="number">1</span>, end);</span><br><span class="line">            <span class="keyword">for</span>(TreeNode left : leftChild) &#123;</span><br><span class="line">                <span class="keyword">for</span>(TreeNode right : rightChild) &#123;</span><br><span class="line">                    TreeNode root = <span class="keyword">new</span> TreeNode(i);</span><br><span class="line">                    root.left = left;</span><br><span class="line">                    root.right = right;</span><br><span class="line">                    res.add(root);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>问题当时卡在   </p><p>List<treenode> leftChild = recursion(start, i - 1);<br>List<treenode> rightChild = recursion(i + 1, end);</treenode></treenode></p><p>当然采用recursion虽然简洁易懂，但两条题目的复杂度都相对较高，是递归的压栈造成的，很多可能相同点的地方可能计算了两遍，导致了两道题目都是打败了5%的solution，当然我们可以通过dp(来自LeetCode)的方式来进行完成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;TreeNode&gt; <span class="title">generateTrees</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;TreeNode&gt;[][] dp = <span class="keyword">new</span> ArrayList[n][n];</span><br><span class="line">        <span class="keyword">return</span> helper(<span class="number">1</span>, n, dp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;TreeNode&gt; <span class="title">helper</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end, List&lt;TreeNode&gt;[][] dp)</span></span>&#123;</span><br><span class="line">        List&lt;TreeNode&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(start &gt; end)&#123;</span><br><span class="line">            res.add(<span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(dp[start - <span class="number">1</span>][end - <span class="number">1</span>] != <span class="keyword">null</span> &amp;&amp; !dp[start - <span class="number">1</span>][end - <span class="number">1</span>].isEmpty())&#123;</span><br><span class="line">            <span class="keyword">return</span> dp[start - <span class="number">1</span>][end - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = start ; i &lt;= end ; i++) &#123;</span><br><span class="line">            List&lt;TreeNode&gt; left = helper(start, i - <span class="number">1</span>, dp);</span><br><span class="line">            List&lt;TreeNode&gt; right = helper(i + <span class="number">1</span>, end, dp);</span><br><span class="line">            <span class="keyword">for</span>(TreeNode a : left)&#123;</span><br><span class="line">                <span class="keyword">for</span>(TreeNode b : right)&#123;</span><br><span class="line">                    TreeNode node = <span class="keyword">new</span> TreeNode(i);</span><br><span class="line">                    node.left = a;</span><br><span class="line">                    node.right = b;</span><br><span class="line">                    res.add(node);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[start - <span class="number">1</span>][end - <span class="number">1</span>] = res;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Problem-96&quot;&gt;&lt;a href=&quot;#Problem-96&quot; class=&quot;headerlink&quot; title=&quot;Problem 96&quot;&gt;&lt;/a&gt;Problem 96&lt;/h1&gt;&lt;p&gt;Given &lt;em&gt;n&lt;/em&gt;, how many structurall
      
    
    </summary>
    
      <category term="LeetCode" scheme="http://zehai.info/categories/LeetCode/"/>
    
    
      <category term="Medium" scheme="http://zehai.info/tags/Medium/"/>
    
  </entry>
  
  <entry>
    <title>QUIC</title>
    <link href="http://zehai.info/2020/03/16/2020-03-16-QUIC/"/>
    <id>http://zehai.info/2020/03/16/2020-03-16-QUIC/</id>
    <published>2020-03-16T10:24:42.000Z</published>
    <updated>2020-05-30T01:33:31.563Z</updated>
    
    <content type="html"><![CDATA[<h1 id="What"><a href="#What" class="headerlink" title="What"></a>What</h1><p><strong>快速UDP网络连接（Quick UDP Internet Connections，QUIC）</strong></p><p>是一种实验性的传输层网络传输协议，由Google开发，在2013年实现。QUIC使用UDP协议，它在两个端点间创建连线，且支持多路复用连线。在设计之初，QUIC希望能够提供等同于SSL/TLS层级的网络安全保护，减少数据传输及创建连线时的延迟时间，双向控制带宽，以避免网络拥塞。Google希望使用这个协议来取代TCP协议，使网页传输速度加快。2018年10月，IETF的HTTP及QUIC工作小组正式将基于QUIC协议的HTTP（HTTP over QUIC）重命名为HTTP/3以为确立下一代规范做准备。</p><h1 id="Feature"><a href="#Feature" class="headerlink" title="Feature"></a>Feature</h1><p>compared with HTTP2+TCP+TLS</p><ul><li>无TCP握手及TLS握手–&gt;快</li><li>改进的拥塞控制</li><li>避免队头阻塞的多路复用</li><li>前向冗余纠错</li></ul><h1 id="Reason"><a href="#Reason" class="headerlink" title="Reason"></a>Reason</h1><ul><li>中间设备僵化（防火墙，NAT等硬件设备固话443，80端口，NAT擦写地址，抛弃不认识的选项字段等旧规则）</li><li>依赖操作系统实现导致的协议僵化（依赖底层TCP很难快迭代）</li><li>建立连接的握手延迟大（HTTPS/2 use TSL 使得TCP，TLS握手时间较长）</li><li>队头阻塞（序号顺序接受，前面丢了后面接受直接丢弃）</li></ul><h1 id="Why"><a href="#Why" class="headerlink" title="Why"></a>Why</h1><h2 id="RTT"><a href="#RTT" class="headerlink" title="RTT"></a>RTT</h2><p>0RTT (0次Round-Trip Time,0次往返)建连可以说是 QUIC 相比 HTTP2 最大的性能优势。那什么是 0RTT 建连呢？这里面有两层含义。</p><ol><li>传输层 0RTT 就能建立连接。</li><li>加密层 0RTT 就能建立加密连接。</li></ol><p><img src="../img/v2-b4b3eb89464b192eed0304e5647a2d26_r.jpg" alt="preview"></p><blockquote><p>一个完整的 TLS 握手需要两次：</p><ol><li>Client 发送 ClientHello；Server 回复 ServerHello</li><li>Client 回复最终确定的 Key，Finished；Server 回复 Finished</li><li>握手完毕，Client 发送加密后的 HTTP 请求；Server 回复加密后的 HTTP 响应</li></ol><p>TLS Session Resumption</p><ol><li>Client 发送 ClientHello（包含 Session ID）；Server 回复 ServerHello 和 Finished</li><li>握手完毕，Client 发送加密后的 HTTP 请求；Server 回复加密后的 HTTP 响应</li></ol><p>TLS 0RTT</p><p>0 RTT 是 TLSv1.3 的可选功能。客户端和服务器第一次建立会话时，会生成一个 PSK（pre-shared key）。服务器会用 ticket key 去加密 PSK，作为 Session Ticket 返回。 客户端再次和服务器建立会话时，会先用 PSK 去加密 HTTP 请求，然后把加密后的内容发给服务器。服务器解密 PSK，然后再用 PSK 去解密 HTTP 请求，并加密 HTTP 响应。</p><p> HTTPS 握手已经跟 HTTP 请求合并到一起</p><p>​    1.Client 发送 ClientHello（包含 PSK）和加密后的 HTTP 请求；Server 回复 ServerHello 和 Finished 和加密后的 HTTP 响应。</p></blockquote><h2 id="congestion-control"><a href="#congestion-control" class="headerlink" title="congestion control"></a>congestion control</h2><p>TCP采用了</p><ul><li>慢启动</li><li>拥塞避免</li><li>快重传</li><li>快恢复</li></ul><p>QUCI默认支持Cubic，另外支持CubicBytes,Reno,RenoBytes,BBR,PCC</p><h2 id="Pluggable"><a href="#Pluggable" class="headerlink" title="Pluggable"></a>Pluggable</h2><p>可插拔，即灵活生效不需要重启或改变底层</p><ul><li>应用层实现不同的拥塞控制算法，不需要底层支持</li><li>单个应用程序的不同连接支持不同的拥塞控制，如BBR，Cubic</li><li>应用程序无需变动直接变更拥塞控制，reload生效</li></ul><p>STGW在配置层面进行了优化，针对不同业务，不同网络芝士，不同RTT，使用不同拥塞控制</p><h2 id="单递增的Packet-Number"><a href="#单递增的Packet-Number" class="headerlink" title="单递增的Packet Number"></a>单递增的Packet Number</h2><p>为了保障TCP的可靠性，使用Seq（sequenceNumber 序号）和ack来确认,N丢失，重传N（问题：N如果重传两次，收到一个ACK，不知道是哪个的ACK）</p><p>QUIC使用PacketNumber代替seq，并且packetnumber严格递增，也就是说就算 Packet N 丢失了，重传的 Packet N 的 Packet Number 已经不是 N，而是一个比 N 大的值,另外支持Stream offset更好支持多个packet传输</p><h2 id="不允许Reneging"><a href="#不允许Reneging" class="headerlink" title="不允许Reneging"></a>不允许Reneging</h2><p>reneging：TCP通信时，如果发送序列中间某个数据包丢失，TCP会通过重传最后确认的包开始的后续包，这样原先已经正确传输的包也可能重复发送，急剧降低了TCP性能。</p><p>为改善这种情况，发展出SACK(Selective Acknowledgment, 选择性确认)技术，使TCP只重新发送丢失的包，不用发送后续所有的包，而且提供相应机制使接收方能告诉发送方哪些数据丢失，哪些数据重发了，哪些数据已经提前收到等</p><p>QUIC禁止reneging</p><h2 id="更多的ack块"><a href="#更多的ack块" class="headerlink" title="更多的ack块"></a>更多的ack块</h2><p>TCP 的 Sack 选项能够告诉发送方已经接收到的连续 Segment 的范围，方便发送方进行选择性重传。</p><p>由于 TCP 头部最大只有 60 个字节，标准头部占用了 20 字节，所以 Tcp Option 最大长度只有 40 字节，再加上 Tcp Timestamp option 占用了 10 个字节 [25]，所以留给 Sack 选项的只有 30 个字节。</p><p>每一个 Sack Block 的长度是 8 个，加上 Sack Option 头部 2 个字节，也就意味着 Tcp Sack Option 最大只能提供 3 个 Block。</p><p>但是 Quic Ack Frame 可以同时提供 256 个 Ack Block，在丢包率比较高的网络下，更多的 Sack Block 可以提升网络的恢复速度，减少重传量。</p><h2 id="ack-delay时间"><a href="#ack-delay时间" class="headerlink" title="ack delay时间"></a>ack delay时间</h2><p>收到客户端请求到响应的过程时间成为ack delay,QUIC的RTT需要减掉ack delay（计算我是没看懂。。。）</p><h2 id="基于stream和connection级别的流量控制"><a href="#基于stream和connection级别的流量控制" class="headerlink" title="基于stream和connection级别的流量控制"></a>基于stream和connection级别的流量控制</h2><p>作用：</p><ul><li>stream可以认为是一条HTTP请求</li><li>Connection可以类比一条TCP连接，在connection上存在多条stream</li></ul><p>tcp承载多个http请求</p><ol><li>window_update告诉对方自己接受的字节数</li><li>blockFrame告诉对方由于流量控制被阻塞，无法发送数据</li><li>stream可用窗口=最大窗口数-收到的最大偏移数</li><li>connection可用窗口=$\sum$streams可用窗口</li></ol><h2 id="没有队头阻塞的多路复用"><a href="#没有队头阻塞的多路复用" class="headerlink" title="没有队头阻塞的多路复用"></a>没有队头阻塞的多路复用</h2><p>QUIC 的多路复用和 HTTP2 类似。在一条 QUIC 连接上可以并发发送多个 HTTP 请求 (stream)。但是 QUIC 的多路复用相比 HTTP2 有一个很大的优势。</p><p>QUIC 一个连接上的多个 stream 之间没有依赖。这样假如 stream2 丢了一个 udp packet，也只会影响 stream2 的处理。不会影响 stream2 之前及之后的 stream 的处理。</p><p>这也就在很大程度上缓解甚至消除了队头阻塞的影响。</p><p>HTTP2 在一个 TCP 连接上同时发送 4 个 Stream。其中 Stream1 已经正确到达，并被应用层读取。但是 Stream2 的第三个 tcp segment 丢失了，TCP 为了保证数据的可靠性，需要发送端重传第 3 个 segment 才能通知应用层读取接下去的数据，虽然这个时候 Stream3 和 Stream4 的全部数据已经到达了接收端，但都被阻塞住了。</p><p>不仅如此，由于 HTTP2 强制使用 TLS，还存在一个 TLS 协议层面的队头阻塞 </p><p>Record 是 TLS 协议处理的最小单位，最大不能超过 16K，一些服务器比如 Nginx 默认的大小就是 16K。由于一个 record 必须经过数据一致性校验才能进行加解密，所以一个 16K 的 record，就算丢了一个字节，也会导致已经接收到的 15.99K 数据无法处理，因为它不完整。</p><p>那 QUIC 多路复用为什么能避免上述问题呢？</p><ol><li>QUIC 最基本的传输单元是 Packet，不会超过 MTU 的大小，整个加密和认证过程都是基于 Packet 的，不会跨越多个 Packet。这样就能避免 TLS 协议存在的队头阻塞。</li><li>Stream 之间相互独立，比如 Stream2 丢了一个 Pakcet，不会影响 Stream3 和 Stream4。不存在 TCP 队头阻塞。</li></ol><p>当然，并不是所有的 QUIC 数据都不会受到队头阻塞的影响，比如 QUIC 当前也是使用 Hpack 压缩算法 [10]，由于算法的限制，丢失一个头部数据时，可能遇到队头阻塞。</p><p>总体来说，QUIC 在传输大量数据时，比如视频，受到队头阻塞的影响很小。</p><h2 id="加密认证的报文"><a href="#加密认证的报文" class="headerlink" title="加密认证的报文"></a>加密认证的报文</h2><p>TCP 协议头部没有经过任何加密和认证，所以在传输过程中很容易被中间网络设备篡改，注入和窃听。比如修改序列号、滑动窗口。这些行为有可能是出于性能优化，也有可能是主动攻击。</p><p>但是 QUIC 的 packet 可以说是武装到了牙齿。除了个别报文比如 PUBLIC_RESET 和 CHLO，所有报文头部都是经过认证的，报文 Body 都是经过加密的。</p><p>这样只要对 QUIC 报文任何修改，接收端都能够及时发现，有效地降低了安全风险。</p><h2 id="连接迁移"><a href="#连接迁移" class="headerlink" title="连接迁移"></a>连接迁移</h2><p>一条 TCP 连接 [17] 是由四元组标识的（源 IP，源端口，目的 IP，目的端口）,当其中任何一个元素发生变化时，这条连接依然维持着，能够保持业务逻辑不中断</p><p>比如大家使用手机在 WIFI 和 4G 移动网络切换时，客户端的 IP 肯定会发生变化，需要重新建立和服务端的 TCP 连接。</p><p>又比如大家使用公共 NAT 出口时，有些连接竞争时需要重新绑定端口，导致客户端的端口发生变化，同样需要重新建立 TCP 连接。</p><p>针对 TCP 的连接变化，MPTCP[5] 其实已经有了解决方案，但是由于 MPTCP 需要操作系统及网络协议栈支持，部署阻力非常大，目前并不适用。</p><p>所以从 TCP 连接的角度来讲，这个问题是无解的。</p><p>那 QUIC 是如何做到连接迁移呢？很简单，任何一条 QUIC 连接不再以 IP 及端口四元组标识，而是以一个<code>64 位的随机数</code>作为 ID 来标识，这样就算 IP 或者端口发生变化时，只要 ID 不变，这条连接依然维持着，上层业务逻辑感知不到变化，不会中断，也就不需要重连。</p><p>由于这个 ID 是客户端随机产生的，并且长度有 64 位，所以冲突概率非常低。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>此外，QUIC 还能实现前向冗余纠错，在重要的包比如握手消息发生丢失时，能够根据冗余信息还原出握手消息。</p><p>QUIC 还能实现证书压缩，减少证书传输量，针对包头进行验证等。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;What&quot;&gt;&lt;a href=&quot;#What&quot; class=&quot;headerlink&quot; title=&quot;What&quot;&gt;&lt;/a&gt;What&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;快速UDP网络连接（Quick UDP Internet Connections，QUIC）&lt;/strong
      
    
    </summary>
    
      <category term="Introduction" scheme="http://zehai.info/categories/Introduction/"/>
    
    
      <category term="QUIC" scheme="http://zehai.info/tags/QUIC/"/>
    
  </entry>
  
  <entry>
    <title>Traversal</title>
    <link href="http://zehai.info/2020/03/15/2020-03-15-BinaryTreeLevelOrderTraversal/"/>
    <id>http://zehai.info/2020/03/15/2020-03-15-BinaryTreeLevelOrderTraversal/</id>
    <published>2020-03-15T09:23:39.000Z</published>
    <updated>2020-05-30T01:33:31.562Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Problem-102-107"><a href="#Problem-102-107" class="headerlink" title="Problem 102 107"></a>Problem 102 107</h1><p>Given a binary tree, return the <em>level order</em> traversal of its nodes’ values. (ie, from left to right, level by level).</p><p>For example:<br>Given binary tree <code>[3,9,20,null,null,15,7]</code>,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  3</span><br><span class="line"> / \</span><br><span class="line">9  20</span><br><span class="line">  /  \</span><br><span class="line"> 15   7</span><br></pre></td></tr></table></figure><p>return its level order traversal as:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  [3],</span><br><span class="line">  [9,20],</span><br><span class="line">  [15,7]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>key：</p><ul><li>层序遍历</li><li>递归</li></ul><p>在Java中可以先定义一个List保存结果,List里面再嵌入ArrayList来记录每一层的数据</p><blockquote><p>List&lt;List<integer>&gt; res = new ArrayList&lt;&gt;();</integer></p><p>res.add(new ArrayList&lt;&gt;());</p></blockquote><p>将递归中的root节点追加进入res.get(level)的数组中</p><blockquote><p>  res.get(level).add(root.val);</p></blockquote><p>通过递归完成算法</p><blockquote><p>travelsal(root.left,level+1);<br>travelsal(root.right,level+1);</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; levelOrder(TreeNode root) &#123;</span><br><span class="line">        travelsal(root, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span>  res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">travelsal</span><span class="params">(TreeNode root,<span class="keyword">int</span> level)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(level==res.size())&#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">        &#125;</span><br><span class="line">        res.get(level).add(root.val);</span><br><span class="line">        travelsal(root.left,level+<span class="number">1</span>);</span><br><span class="line">        travelsal(root.right,level+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>接下来是107，是102的变种，改成了叶节点开始遍历</p><p>difficulty：Easy</p><p>Given a binary tree, return the <em>bottom-up level order</em> traversal of its nodes’ values. (ie, from left to right, level by level from leaf to root).</p><p>For example:<br>Given binary tree <code>[3,9,20,null,null,15,7]</code>,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  3</span><br><span class="line"> / \</span><br><span class="line">9  20</span><br><span class="line">  /  \</span><br><span class="line"> 15   7</span><br></pre></td></tr></table></figure><p>return its bottom-up level order traversal as:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  [15,7],</span><br><span class="line">  [9,20],</span><br><span class="line">  [3]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h1 id="key"><a href="#key" class="headerlink" title="key"></a>key</h1><p>题目本身没有设置太多的难度，我们只需要将<strong>level</strong>实现数组的内层数组的倒序就可以了</p><blockquote><p> res.get(level).add(root.val);<br> change this code to<br> res.get(res.size()-i-1).add(root.val);</p></blockquote><p>原本判断新增数组的语句变成在第0个位置新增一个数组</p><blockquote><p>if(i &gt;= res.size()){<br>    res.add(0,new ArrayList<integer>());<br>}</integer></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Problem-102-107&quot;&gt;&lt;a href=&quot;#Problem-102-107&quot; class=&quot;headerlink&quot; title=&quot;Problem 102 107&quot;&gt;&lt;/a&gt;Problem 102 107&lt;/h1&gt;&lt;p&gt;Given a binary tre
      
    
    </summary>
    
      <category term="LeetCode" scheme="http://zehai.info/categories/LeetCode/"/>
    
    
      <category term="Medium" scheme="http://zehai.info/tags/Medium/"/>
    
  </entry>
  
  <entry>
    <title>Egg插件到底封装了啥</title>
    <link href="http://zehai.info/2020/03/13/2020-03-13-Egg%E6%8F%92%E4%BB%B6%E5%88%B0%E5%BA%95%E5%B0%81%E8%A3%85%E4%BA%86%E5%95%A5/"/>
    <id>http://zehai.info/2020/03/13/2020-03-13-Egg插件到底封装了啥/</id>
    <published>2020-03-13T05:23:12.000Z</published>
    <updated>2020-05-30T01:33:31.562Z</updated>
    
    <content type="html"><![CDATA[<p>迫于比较好奇，下载了egg-redis，看看他如何将node直接可以引用的包，封装成为egg的插件<br><img src="../img/1584077589714.png" alt="1584077589714"></p><p>核心代码通过</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;迫于比较好奇，下载了egg-redis，看看他如何将node直接可以引用的包，封装成为egg的插件&lt;br&gt;&lt;img src=&quot;../img/1584077589714.png&quot; alt=&quot;1584077589714&quot;&gt;&lt;/p&gt;
&lt;p&gt;核心代码通过&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://zehai.info/2020/03/11/2020-03-11-MaximumDepthOfBinaryTree/"/>
    <id>http://zehai.info/2020/03/11/2020-03-11-MaximumDepthOfBinaryTree/</id>
    <published>2020-03-11T09:47:55.000Z</published>
    <updated>2020-05-30T01:33:31.562Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Prolem-104"><a href="#Prolem-104" class="headerlink" title="Prolem 104"></a>Prolem 104</h1><p>Given a binary tree, find its maximum depth.</p><p>The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.</p><p><strong>Note:</strong> A leaf is a node with no children.</p><p><strong>Example:</strong></p><p>Given binary tree <code>[3,9,20,null,null,15,7]</code>,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  3</span><br><span class="line"> / \</span><br><span class="line">9  20</span><br><span class="line">  /  \</span><br><span class="line"> 15   7</span><br></pre></td></tr></table></figure><p>return its depth = 3.</p><h2 id="key"><a href="#key" class="headerlink" title="key"></a>key</h2><p>判断树的深浅，采用</p><blockquote><p>int left = max(root.left);<br><strong>int</strong> right = max(root.right);<br><strong>return</strong> Math.max(left,right) + 1; </p></blockquote><blockquote><p>//或者简写</p><p>return Math.max(max(root.left) + 1, max(root.right) + 1);</p></blockquote><p>进行递归</p><blockquote><p>Runtime: 0 ms, faster than 100.00% of Java online submissions for Maximum Depth of Binary Tree.</p><p>Memory Usage: 39.2 MB, less than 94.62% of Java online submissions for Maximum Depth of Binary Tree.</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> max(root);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">max</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Math.max(max(root.left) + <span class="number">1</span>, max(root.right) + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Prolem-104&quot;&gt;&lt;a href=&quot;#Prolem-104&quot; class=&quot;headerlink&quot; title=&quot;Prolem 104&quot;&gt;&lt;/a&gt;Prolem 104&lt;/h1&gt;&lt;p&gt;Given a binary tree, find its maximum 
      
    
    </summary>
    
      <category term="LeetCode" scheme="http://zehai.info/categories/LeetCode/"/>
    
    
      <category term="Easy" scheme="http://zehai.info/tags/Easy/"/>
    
  </entry>
  
  <entry>
    <title>SymmetricTree</title>
    <link href="http://zehai.info/2020/03/10/2020-03-10-SymmetricTree/"/>
    <id>http://zehai.info/2020/03/10/2020-03-10-SymmetricTree/</id>
    <published>2020-03-10T10:33:33.000Z</published>
    <updated>2020-05-30T01:33:31.562Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Problem101"><a href="#Problem101" class="headerlink" title="Problem101"></a>Problem101</h1><p>Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).</p><p>For example, this binary tree <code>[1,2,2,3,4,4,3]</code> is symmetric:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    1</span><br><span class="line">   / \</span><br><span class="line">  2   2</span><br><span class="line"> / \ / \</span><br><span class="line">3  4 4  3</span><br></pre></td></tr></table></figure><p>But the following <code>[1,2,2,null,3,null,3]</code> is not:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  1</span><br><span class="line"> / \</span><br><span class="line">2   2</span><br><span class="line"> \   \</span><br><span class="line"> 3    3</span><br></pre></td></tr></table></figure><p><strong>Note:</strong><br>Bonus points if you could solve it both recursively and iteratively.</p><h2 id="key"><a href="#key" class="headerlink" title="key"></a>key</h2><p>一道验证树是否是对称的问题，主要采取递归的方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Definition for a binary tree node.</span><br><span class="line"> * public class TreeNode &#123;</span><br><span class="line"> *     int val;</span><br><span class="line"> *     TreeNode left;</span><br><span class="line"> *     TreeNode right;</span><br><span class="line"> *     TreeNode(int x) &#123; val = x; &#125;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span><br><span class="line">class Solution &#123;</span><br><span class="line">    public boolean isSymmetric(TreeNode root) &#123;</span><br><span class="line">        return isMirror(root,root);</span><br><span class="line">    &#125;</span><br><span class="line">    public boolean isMirror(TreeNode root,TreeNode self)&#123;</span><br><span class="line">        if(root==null &amp;&amp; self==null)return true;</span><br><span class="line">        if(root==null ||self==null) return false;</span><br><span class="line">        return root.val==self.val &amp;&amp; isMirror(root.left,self.right)&amp;&amp;isMirror(root.right,self.left);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Problem101&quot;&gt;&lt;a href=&quot;#Problem101&quot; class=&quot;headerlink&quot; title=&quot;Problem101&quot;&gt;&lt;/a&gt;Problem101&lt;/h1&gt;&lt;p&gt;Given a binary tree, check whether it 
      
    
    </summary>
    
      <category term="LeetCode" scheme="http://zehai.info/categories/LeetCode/"/>
    
    
      <category term="Easy" scheme="http://zehai.info/tags/Easy/"/>
    
  </entry>
  
  <entry>
    <title>AMDvsCMD</title>
    <link href="http://zehai.info/2020/03/09/2020-03-09-AMDvsCMD/"/>
    <id>http://zehai.info/2020/03/09/2020-03-09-AMDvsCMD/</id>
    <published>2020-03-09T02:46:11.000Z</published>
    <updated>2020-05-30T01:33:31.562Z</updated>
    
    <content type="html"><![CDATA[<p>AMD:Asynchronous Module Definition (RequireJS)</p><p>CMD:<a href="https://github.com/cmdjs/specification/blob/master/draft/module.md" target="_blank" rel="noopener">Common Module Definition</a>（SeaJS）</p><table><thead><tr><th></th><th>AMD</th><th>CMD</th></tr></thead><tbody><tr><td>1.</td><td>提前执行</td><td>延迟执行（类似饿汉模式）</td></tr><tr><td>2.</td><td>依赖前置</td><td>依赖就近</td></tr><tr><td>3.</td><td>浏览器（加载缓慢，异步load更好）</td><td>服务器端</td></tr><tr><td>4.</td><td>异步模块定义</td><td>通用模块定义</td></tr></tbody></table><h1 id="AMD"><a href="#AMD" class="headerlink" title="AMD"></a>AMD</h1><p>待补充，import-export</p><h1 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h1><h2 id="define-Function"><a href="#define-Function" class="headerlink" title="define Function"></a>define Function</h2><p>一个文件就是一个模块，在我们的代码外层，会套上一层CMD规范,这也就是为什么我们可以<strong>直接引用require,export,module的原因</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">define(function(require, exports, module) &#123;</span><br><span class="line">  // code</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>单个参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">define(factory)</span><br><span class="line">param--&gt;factory:funtion|Object|String</span><br><span class="line">define(&#123; &quot;foo&quot;: &quot;bar&quot; &#125;);</span><br><span class="line">define(&apos;I am a template. My name is &#123;&#123;name&#125;&#125;.&apos;);</span><br></pre></td></tr></table></figure><p>多个参数define <code>define(id?, deps?, factory)</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">define(&apos;hello&apos;, [&apos;jquery&apos;], function(require, exports, module) &#123;</span><br><span class="line">  // code</span><br><span class="line">&#125;);</span><br><span class="line">id：String模块标识</span><br><span class="line">deps：Array模块依赖</span><br></pre></td></tr></table></figure><p>define.cmd Object</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if (typeof define === &quot;function&quot; &amp;&amp; define.cmd) &#123;</span><br><span class="line">  // 有 Sea.js 等 CMD 模块加载器存在</span><br><span class="line">&#125;</span><br><span class="line">//用来判断当前页面是否有CMD模块加载器</span><br></pre></td></tr></table></figure><h2 id="require-Function"><a href="#require-Function" class="headerlink" title="require Function"></a>require Function</h2><p>同步加载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">define(function(require, exports) &#123;</span><br><span class="line"></span><br><span class="line">  // 获取模块 a 的接口</span><br><span class="line">  var a = require(&apos;./a&apos;);</span><br><span class="line"></span><br><span class="line">  // 调用模块 a 的方法</span><br><span class="line">  a.doSomething();</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="require-async-Function"><a href="#require-async-Function" class="headerlink" title="require.async Function"></a>require.async Function</h2><p>异步加载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">define(function(require, exports, module) &#123;</span><br><span class="line"></span><br><span class="line">  // 异步加载一个模块，在加载完成时，执行回调</span><br><span class="line">  require.async(&apos;./b&apos;, function(b) &#123;</span><br><span class="line">    b.doSomething();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  // 异步加载多个模块，在加载完成时，执行回调</span><br><span class="line">  require.async([&apos;./c&apos;, &apos;./d&apos;], function(c, d) &#123;</span><br><span class="line">    c.doSomething();</span><br><span class="line">    d.doSomething();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="require-resolve"><a href="#require-resolve" class="headerlink" title="require.resolve"></a>require.resolve</h2><p>返回解析后的绝对路径</p><h2 id="exprots"><a href="#exprots" class="headerlink" title="exprots"></a>exprots</h2><p>return Object，对外提供接口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">define(function(require, exports) &#123;</span><br><span class="line"></span><br><span class="line">  // 对外提供 foo 属性</span><br><span class="line">  exports.foo = &apos;bar&apos;;</span><br><span class="line"></span><br><span class="line">  // 对外提供 doSomething 方法</span><br><span class="line">  exports.doSomething = function() &#123;&#125;;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">retrun可以实现同等效果</span><br><span class="line">define(function(require) &#123;</span><br><span class="line"></span><br><span class="line">  // 通过 return 直接提供接口</span><br><span class="line">  return &#123;</span><br><span class="line">    foo: &apos;bar&apos;,</span><br><span class="line">    doSomething: function() &#123;&#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line">以及个人不太喜欢的缩略写法</span><br><span class="line">define(&#123;</span><br><span class="line">  foo: &apos;bar&apos;,</span><br><span class="line">  doSomething: function() &#123;&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>但以下写法是错误的</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">define(function(require, exports) &#123;</span><br><span class="line"></span><br><span class="line">  // 错误用法！！!</span><br><span class="line">  exports = &#123;</span><br><span class="line">    foo: &apos;bar&apos;,</span><br><span class="line">    doSomething: function() &#123;&#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>exports</code> 仅仅是 <code>module.exports</code> 的一个引用。在 <code>factory</code> 内部给 <code>exports</code> 重新赋值时，并不会改变 <code>module.exports</code> 的值。因此给 <code>exports</code> 赋值是无效的，不能用来更改模块接口。</p><p>我说句简单的话：exports和module.exports，都是地址，指向同一个内容，如果你给exports赋值了一个新对象，他指向的内容就完全变了，和module.exprots就指向不是同一个地方了</p><h2 id="module"><a href="#module" class="headerlink" title="module"></a>module</h2><p>modeule是一个对象，存储与当前模块相关联的一些属性和方法，默认为{}</p><p>module:function</p><p>module.id:String模块标识</p><p>module.url：String返回绝对路径（默认id=url，除非手写id）</p><p>module.dependencies:Array模块依赖</p><p>module.export:Object 大部分情况下和exports通用，但如果模块是一个类，就应该直接赋值给module.exports，这样调用就是一个类的构造器，可以直接new实例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">module.exports=new Person();</span><br><span class="line">const p = require(./xxx.js);</span><br><span class="line">p.say();</span><br><span class="line">//or</span><br><span class="line">exports.p = new Person();</span><br><span class="line">const &#123;p&#125; = require(./xxxjs);</span><br><span class="line">p.say();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;AMD:Asynchronous Module Definition (RequireJS)&lt;/p&gt;
&lt;p&gt;CMD:&lt;a href=&quot;https://github.com/cmdjs/specification/blob/master/draft/module.md&quot; ta
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://zehai.info/categories/JavaScript/"/>
    
    
      <category term="other" scheme="http://zehai.info/tags/other/"/>
    
  </entry>
  
</feed>
