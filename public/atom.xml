<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zehai&#39;blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zehai.info/"/>
  <updated>2020-03-06T09:46:43.499Z</updated>
  <id>http://zehai.info/</id>
  
  <author>
    <name>Zhang Zehai</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2020-03-06-BinaryTreeInorderTraversal</title>
    <link href="http://zehai.info/2020/03/06/2020-03-06-BinaryTreeInorderTraversal/"/>
    <id>http://zehai.info/2020/03/06/2020-03-06-BinaryTreeInorderTraversal/</id>
    <published>2020-03-06T03:55:16.000Z</published>
    <updated>2020-03-06T09:46:43.499Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Problem94"><a href="#Problem94" class="headerlink" title="Problem94"></a>Problem94</h1><p>Given a binary tree, return the <em>inorder</em> traversal of its nodes’ values.</p><blockquote><p>给定一二叉树，中序遍历输出</p><p>ps:preorder,inorder,postorder，前中后</p></blockquote><h1 id="Key"><a href="#Key" class="headerlink" title="Key"></a>Key</h1><h2 id="recursive-approach"><a href="#recursive-approach" class="headerlink" title="recursive approach"></a>recursive approach</h2><p>利用递归解决B树的遍历问题，这种问题的代码其实大同小异，前中后的遍历输出，只需要调整递归部分即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//preorder</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preorder</span><span class="params">(node t)</span></span></span><br><span class="line"><span class="function"><span class="title">if</span> <span class="params">(t != <span class="keyword">null</span>)</span> </span>&#123;</span><br><span class="line">System.out.print(t.value + <span class="string">" "</span>);</span><br><span class="line">preorder(t.left);</span><br><span class="line">preorder(t.right);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//inorder</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inorder</span><span class="params">(node t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (t != <span class="keyword">null</span>) &#123;</span><br><span class="line">inorder(t.left);</span><br><span class="line">System.out.print(t.value + <span class="string">" "</span>);</span><br><span class="line">inorder(t.right);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//postorder</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postorder</span><span class="params">(node t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (t != <span class="keyword">null</span>) &#123;</span><br><span class="line">        postorder(t.left);</span><br><span class="line">        postorder(t.right);</span><br><span class="line">        System.out.print(t.value + <span class="string">" "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//leverorder</span></span><br></pre></td></tr></table></figure><p>Solution</p><blockquote><p>Runtime: 0 ms, faster than 100.00% of Java online submissions for Binary Tree Inorder Traversal.</p><p>Memory Usage: 37.9 MB, less than 5.11% of Java online submissions for Binary Tree Inorder Traversal.</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        List &lt; Integer &gt; res = <span class="keyword">new</span> ArrayList &lt; &gt; ();</span><br><span class="line">        inorder(root, res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inorder</span><span class="params">(TreeNode root, List &lt; Integer &gt; res)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root != <span class="keyword">null</span>) &#123;</span><br><span class="line">            inorder(root.left, res);</span><br><span class="line">            res.add(root.val);</span><br><span class="line">            inorder(root.right, res);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Complexity Analysis</p><ul><li>Time complexity : O(n)<em>O</em>(<em>n</em>). The time complexity is O(n)<em>O</em>(<em>n</em>) because the recursive function is T(n) = 2 \cdot T(n/2)+1<em>T</em>(<em>n</em>)=2⋅<em>T</em>(<em>n</em>/2)+1.</li><li>Space complexity : The worst case space required is O(n)<em>O</em>(<em>n</em>), and in the average case it’s O(\log n)<em>O</em>(log<em>n</em>) where n<em>n</em> is number of nodes.</li></ul><h2 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h2><p>solution还提供了另外一种方法通过stack pop的方式来完成：</p><p><a href="https://leetcode.com/problems/binary-tree-inorder-traversal/solution/" target="_blank" rel="noopener"><a href="https://leetcode.com/problems/binary-tree-inorder-traversal/solution/" target="_blank" rel="noopener">https://leetcode.com/problems/binary-tree-inorder-traversal/solution/</a></a></p><h2 id="Morris"><a href="#Morris" class="headerlink" title="Morris"></a>Morris</h2><p>同上</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Problem94&quot;&gt;&lt;a href=&quot;#Problem94&quot; class=&quot;headerlink&quot; title=&quot;Problem94&quot;&gt;&lt;/a&gt;Problem94&lt;/h1&gt;&lt;p&gt;Given a binary tree, return the &lt;em&gt;inorde
      
    
    </summary>
    
      <category term="LeetCode" scheme="http://zehai.info/categories/LeetCode/"/>
    
    
      <category term="Medium" scheme="http://zehai.info/tags/Medium/"/>
    
  </entry>
  
  <entry>
    <title>2020-03-05-hexoNexTv7.7.2</title>
    <link href="http://zehai.info/2020/03/05/2020-03-05-hexoNexTv7-7-2/"/>
    <id>http://zehai.info/2020/03/05/2020-03-05-hexoNexTv7-7-2/</id>
    <published>2020-03-05T06:42:08.000Z</published>
    <updated>2020-03-05T07:12:14.229Z</updated>
    
    <content type="html"><![CDATA[<p>I find hexo’s theme:nexT v7.7.2 has some new features</p><h2 id="native-dark-mode"><a href="#native-dark-mode" class="headerlink" title="native dark mode"></a>native dark mode</h2><p>we can set </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">darkmode:true</span><br></pre></td></tr></table></figure><p>to open native dark mode</p><p>and there are other features like </p><ul><li><a href="https://docs.mathjax.org/en/latest/upgrading/whats-new-3.0.html" target="_blank" rel="noopener">support MathJax v3.0</a>,we use $$</li><li>add next_config helper</li></ul><h1 id="how-to-update-newest-version"><a href="#how-to-update-newest-version" class="headerlink" title="how to update newest version"></a>how to update newest version</h1><p>1.git clone <a href="https://github.com/theme-next/hexo-theme-next" target="_blank" rel="noopener">https://github.com/theme-next/hexo-theme-next</a> themes/next</p><p>or in releases to download newest source code</p><p>2.copy file to hexo/theme/ such as :</p><p>/themes/hexo-theme-next-7.7.2/</p><p>3.open hexo’s _config.yml,and change theme’s value to hexo-theme-next-7.7.2 and u change your them successfully</p><p>4.update /themes/hexo-theme-next-7.7.2/_config.yml</p><p>Last , u can create new post to log your daily life</p><p>and these days ,zehai.info ,may Expired ,sad </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I find hexo’s theme:nexT v7.7.2 has some new features&lt;/p&gt;
&lt;h2 id=&quot;native-dark-mode&quot;&gt;&lt;a href=&quot;#native-dark-mode&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
      <category term="others" scheme="http://zehai.info/categories/others/"/>
    
    
      <category term="NexT" scheme="http://zehai.info/tags/NexT/"/>
    
  </entry>
  
  <entry>
    <title>2020-02-28-JS相关技术名词</title>
    <link href="http://zehai.info/2020/02/28/2020-02-28-JS%E7%9B%B8%E5%85%B3%E6%8A%80%E6%9C%AF%E5%90%8D%E8%AF%8D/"/>
    <id>http://zehai.info/2020/02/28/2020-02-28-JS相关技术名词/</id>
    <published>2020-02-28T12:07:43.000Z</published>
    <updated>2020-03-06T09:58:09.823Z</updated>
    
    <content type="html"><![CDATA[<p>今天中午有收到Egg团队公开的文件调查，提及了很多技术名词，虽然不一定用到，但我也觉得列举出来会方便大家了解和比较，后续可能更新我用过的部分</p><h1 id="代码检查工具"><a href="#代码检查工具" class="headerlink" title="代码检查工具"></a>代码检查工具</h1><ul><li style="list-style: none"><input type="checkbox" checked> ESLint</li><li style="list-style: none"><input type="checkbox"> JSCS</li><li style="list-style: none"><input type="checkbox"> JSHint</li><li style="list-style: none"><input type="checkbox"> JSDoc</li><li style="list-style: none"><input type="checkbox"> Standard</li><li style="list-style: none"><input type="checkbox"> TSLint</li><li style="list-style: none"><input type="checkbox"> Flow</li></ul><table><thead><tr><th style="text-align:left"></th><th>引入目的：规范代码</th></tr></thead><tbody><tr><td style="text-align:left">ESLint</td><td>通过extend继承某一个大类，然后配置rules来进行代码规范</td></tr><tr><td style="text-align:left">JSCS</td><td></td></tr><tr><td style="text-align:left">JSHint</td><td></td></tr><tr><td style="text-align:left">JSDoc</td><td></td></tr><tr><td style="text-align:left">Standard</td><td></td></tr><tr><td style="text-align:left">TSLint</td><td></td></tr><tr><td style="text-align:left">Flow</td></tr></tbody></table><h2 id="使用感受"><a href="#使用感受" class="headerlink" title="使用感受"></a>使用感受</h2><p>解决了以下问题</p><ul><li>node是一门弱语言，进行校验（非变量类型校验，仅校验变量是否声明，是否可改等）</li><li>node在use strict模式下，eslint可以校验</li><li>团队合作，防止队友挖坑</li></ul><p>其实ESLint只是一种语法校验，更多的还有流程上的规范，就像网传阿里的开发规范一样，就好比node中你可以用类的语法糖，也可以用原型，当一件事情有多种实现方式时，需要规范来选择一个普遍公用的，易维护，易扩展的方案</p><p>除去语法校验，还有TS的类型校验，比如GIT的分支规范，如master,staging,backup,develop,other branch</p><h1 id="转义语言"><a href="#转义语言" class="headerlink" title="转义语言"></a>转义语言</h1><ul><li>[ x ] TS</li><li style="list-style: none"><input type="checkbox"> ClojureScript</li><li style="list-style: none"><input type="checkbox"> CoffeeScript</li><li style="list-style: none"><input type="checkbox"> Dart</li><li style="list-style: none"><input type="checkbox"> Elm</li><li style="list-style: none"><input type="checkbox"> Scala.js</li><li style="list-style: none"><input type="checkbox"> Haxe</li><li style="list-style: none"><input type="checkbox"> Nim</li><li style="list-style: none"><input type="checkbox"> PureScript</li><li style="list-style: none"><input type="checkbox"> Reason</li></ul><p>转移语言是2019年聊的比较多的，解决问题：</p><ul><li>类型校验，能够很好解决JS开发中，你不知道这个object里面有什么key，或者某个对象里面有什么方法（egg.js实际开发过程中，ctx.service.v1.handlexxx()就ctrl跳转不了，也不会有提示）</li></ul><h1 id="WEB框架"><a href="#WEB框架" class="headerlink" title="WEB框架"></a>WEB框架</h1><ul><li style="list-style: none"><input type="checkbox" checked> Express</li><li style="list-style: none"><input type="checkbox" checked> Koa</li><li style="list-style: none"><input type="checkbox" checked> Egg</li><li style="list-style: none"><input type="checkbox"> Nest.js</li><li style="list-style: none"><input type="checkbox"> Next.js</li><li style="list-style: none"><input type="checkbox"> Fastify.js</li><li style="list-style: none"><input type="checkbox"> Hapi.js</li><li style="list-style: none"><input type="checkbox"> Restify.js</li><li style="list-style: none"><input type="checkbox"> Loopback.io</li><li style="list-style: none"><input type="checkbox"> Sails.js</li><li style="list-style: none"><input type="checkbox"> Midway.js</li></ul><p>面试常被问到框架的问题，因为很多公司不会将项目搭建在原生的node服务上</p><ul><li>缺少约束，合作模式下，个人有个人的风格</li><li>项目配置繁琐，很多东西配置零散堆放</li><li>重复造轮子，框架提供较好的轮子</li><li>安全事宜，框架处理</li><li>etc</li></ul><p>一个好的框架事半功倍，<br><a href="https://expressjs.com/" target="_blank" rel="noopener">express</a>是一个非常轻量的框架</p><ul><li>fast</li><li>unopinionated(干净的)</li><li>minimalist</li></ul><p><a href="https://eggjs.org/" target="_blank" rel="noopener">Egg</a>是一个企业级框架，约定大于配置</p><ul><li>Provide capability to <a href="https://eggjs.org/en/advanced/framework.html" target="_blank" rel="noopener">customizd framework</a> base on Egg（可扩展）</li><li>Highly extensible <a href="https://eggjs.org/en/basics/plugin.html" target="_blank" rel="noopener">plugin mechanism</a>（插件牛逼）</li><li>Built-in <a href="https://eggjs.org/en/advanced/cluster-client.html" target="_blank" rel="noopener">cluster</a>（多进程牛逼）</li><li>Based on <a href="http://koajs.com/" target="_blank" rel="noopener">Koa</a> with high performance（企业级别性能优异）</li><li>Stable core framework with high test coverage（稳定）</li><li><a href="https://eggjs.org/en/tutorials/progressive.html" target="_blank" rel="noopener">Progressive development</a>（业务迭代，代码可以渐进继承）</li></ul><h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><ul><li style="list-style: none"><input type="checkbox" checked> MySQL</li><li style="list-style: none"><input type="checkbox" checked> PostgreSql</li><li style="list-style: none"><input type="checkbox" checked> Redis</li><li style="list-style: none"><input type="checkbox" checked> MongoDB</li><li style="list-style: none"><input type="checkbox"> SQL Server</li><li style="list-style: none"><input type="checkbox"> SQLLite</li><li style="list-style: none"><input type="checkbox"> influxdb</li><li style="list-style: none"><input type="checkbox"> HBASE</li><li style="list-style: none"><input type="checkbox"> TiDB</li><li style="list-style: none"><input type="checkbox"> Oracle</li><li style="list-style: none"><input type="checkbox"> DB2</li></ul><p>数据库是仅此于语言本身，另外的考点了，因为没有一个服务不涉猎存储，而</p><h1 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h1><ul><li style="list-style: none"><input type="checkbox"> Nginx</li><li style="list-style: none"><input type="checkbox"> Tomcat</li><li style="list-style: none"><input type="checkbox"> Apache</li></ul><h1 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h1><ul><li style="list-style: none"><input type="checkbox"> Docker</li><li style="list-style: none"><input type="checkbox"> PM2</li><li style="list-style: none"><input type="checkbox"> forever</li><li style="list-style: none"><input type="checkbox"> naught</li><li style="list-style: none"><input type="checkbox"> node-supervisor</li><li style="list-style: none"><input type="checkbox"> Supervisord(Unix)</li></ul><h1 id="RPC方式"><a href="#RPC方式" class="headerlink" title="RPC方式"></a>RPC方式</h1><ul><li style="list-style: none"><input type="checkbox"> HTTP</li><li style="list-style: none"><input type="checkbox"> Thrift</li><li style="list-style: none"><input type="checkbox"> gRPC</li><li style="list-style: none"><input type="checkbox"> dubbo</li><li style="list-style: none"><input type="checkbox"> MQ</li></ul><h1 id="开发场景"><a href="#开发场景" class="headerlink" title="开发场景"></a>开发场景</h1><ul><li style="list-style: none"><input type="checkbox"> 服务端API</li><li style="list-style: none"><input type="checkbox"> SSR应用</li><li style="list-style: none"><input type="checkbox"> Proxy层</li><li style="list-style: none"><input type="checkbox"> BFF层</li><li style="list-style: none"><input type="checkbox"> 代码片段，如Spark代码片段</li><li style="list-style: none"><input type="checkbox"> CLI &amp; 工具</li></ul><h4 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h4><ul><li style="list-style: none"><input type="checkbox"> </li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天中午有收到Egg团队公开的文件调查，提及了很多技术名词，虽然不一定用到，但我也觉得列举出来会方便大家了解和比较，后续可能更新我用过的部分&lt;/p&gt;
&lt;h1 id=&quot;代码检查工具&quot;&gt;&lt;a href=&quot;#代码检查工具&quot; class=&quot;headerlink&quot; title=&quot;代码
      
    
    </summary>
    
    
      <category term="List" scheme="http://zehai.info/tags/List/"/>
    
  </entry>
  
  <entry>
    <title>2020-01-31-JS设计模式</title>
    <link href="http://zehai.info/2020/01/31/2020-01-31-JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://zehai.info/2020/01/31/2020-01-31-JS设计模式/</id>
    <published>2020-01-31T08:39:11.000Z</published>
    <updated>2020-01-31T08:50:38.390Z</updated>
    
    <content type="html"><![CDATA[<p>模式共计八种：</p><ul><li>单例模式</li><li>构造器模式</li><li>建造者模式</li><li>代理模式</li><li>外观模式</li><li>观察者模式</li><li>策略模式</li><li>迭代器模式</li></ul><p>设计模式的提出，为了更好的解耦，可拓展，服务可靠，不限定某种语言的实现</p><h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>一个类只有一个实例，如果存在就不实例化，如果不存在则new，以保证<strong>一个类只有一个实例</strong></p><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><ul><li>模块间通信</li><li>保证某个类的对象的唯一性</li><li>防止变量污染</li></ul><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul><li>this的使用</li><li>闭包容易stack over flow需要及时清理</li><li>创建新对象成本较高</li></ul><h2 id="实际案例"><a href="#实际案例" class="headerlink" title="实际案例"></a>实际案例</h2><p>如网站的计数器，多线程的线程池</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 养鱼游戏</span></span><br><span class="line">  <span class="keyword">let</span> fish = <span class="literal">null</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">catchFish</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 如果鱼存在,则直接返回</span></span><br><span class="line">    <span class="keyword">if</span>(fish) &#123;</span><br><span class="line">      <span class="keyword">return</span> fish</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 如果鱼不存在,则获取鱼再返回</span></span><br><span class="line">      fish = <span class="built_in">document</span>.querySelector(<span class="string">'#cat'</span>)</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        fish,</span><br><span class="line">        water: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">let</span> water = <span class="keyword">this</span>.fish.getAttribute(<span class="string">'weight'</span>)</span><br><span class="line">          <span class="keyword">this</span>.fish.setAttribute(<span class="string">'weight'</span>, ++water)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 每隔3小时喂一次水</span></span><br><span class="line">  setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    catchFish().water()</span><br><span class="line">  &#125;, <span class="number">3</span>*<span class="number">60</span>*<span class="number">60</span>*<span class="number">1000</span>)</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><h1 id="构造器模式"><a href="#构造器模式" class="headerlink" title="构造器模式"></a>构造器模式</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;模式共计八种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单例模式&lt;/li&gt;
&lt;li&gt;构造器模式&lt;/li&gt;
&lt;li&gt;建造者模式&lt;/li&gt;
&lt;li&gt;代理模式&lt;/li&gt;
&lt;li&gt;外观模式&lt;/li&gt;
&lt;li&gt;观察者模式&lt;/li&gt;
&lt;li&gt;策略模式&lt;/li&gt;
&lt;li&gt;迭代器模式&lt;/li&gt;
&lt;/ul
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>2020-01-31-RomanToInteger</title>
    <link href="http://zehai.info/2020/01/31/2020-01-31-RomanToInteger/"/>
    <id>http://zehai.info/2020/01/31/2020-01-31-RomanToInteger/</id>
    <published>2020-01-31T03:17:45.000Z</published>
    <updated>2020-01-31T04:29:47.236Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Leetcode13"><a href="#Leetcode13" class="headerlink" title="Leetcode13"></a>Leetcode13</h1><p>Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.</p><p>Symbol Value<br>I 1<br>V 5<br>X 10<br>L 50<br>C 100<br>D 500<br>M 1000<br>For example, two is written as II in Roman numeral, just two one’s added together. Twelve is written as, XII, which is simply X + II. The number twenty seven is written as XXVII, which is XX + V + II.</p><p>Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:</p><p>I can be placed before V (5) and X (10) to make 4 and 9.<br>X can be placed before L (50) and C (100) to make 40 and 90.<br>C can be placed before D (500) and M (1000) to make 400 and 900.<br>Given a roman numeral, convert it to an integer. Input is guaranteed to be within the range from 1 to 3999.</p><p>Example 1:</p><p>Input: “III”<br>Output: 3<br>Example 2:</p><p>Input: “IV”<br>Output: 4<br>Example 3:</p><p>Input: “IX”<br>Output: 9<br>Example 4:</p><p>Input: “LVIII”<br>Output: 58<br>Explanation: L = 50, V= 5, III = 3.<br>Example 5:</p><p>Input: “MCMXCIV”<br>Output: 1994<br>Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>题目意思其实很简单，掌握了计算方法其实很简单</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">romanToInt</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> nums[]=<span class="keyword">new</span> <span class="keyword">int</span>[s.length()];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)&#123;</span><br><span class="line">        <span class="keyword">switch</span> (s.charAt(i))&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'M'</span>:</span><br><span class="line">                nums[i]=<span class="number">1000</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'D'</span>:</span><br><span class="line">                nums[i]=<span class="number">500</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'C'</span>:</span><br><span class="line">                nums[i]=<span class="number">100</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'L'</span>:</span><br><span class="line">                nums[i]=<span class="number">50</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'X'</span> :</span><br><span class="line">                nums[i]=<span class="number">10</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'V'</span>:</span><br><span class="line">                nums[i]=<span class="number">5</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'I'</span>:</span><br><span class="line">                nums[i]=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[i]&lt;nums[i+<span class="number">1</span>])</span><br><span class="line">            sum-=nums[i];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            sum+=nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum+nums[nums.length-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Leetcode13&quot;&gt;&lt;a href=&quot;#Leetcode13&quot; class=&quot;headerlink&quot; title=&quot;Leetcode13&quot;&gt;&lt;/a&gt;Leetcode13&lt;/h1&gt;&lt;p&gt;Roman numerals are represented by seve
      
    
    </summary>
    
      <category term="LeetCode" scheme="http://zehai.info/categories/LeetCode/"/>
    
    
      <category term="Easy" scheme="http://zehai.info/tags/Easy/"/>
    
  </entry>
  
  <entry>
    <title>2020-01-31-内网穿透</title>
    <link href="http://zehai.info/2020/01/31/2020-01-31-%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
    <id>http://zehai.info/2020/01/31/2020-01-31-内网穿透/</id>
    <published>2020-01-31T02:16:51.000Z</published>
    <updated>2020-01-31T02:41:23.349Z</updated>
    
    <content type="html"><![CDATA[<h1 id="why"><a href="#why" class="headerlink" title="why"></a>why</h1><p>解决公网访问自己的内网设备（大部分公司，小区都是在内网中，IPv4历史原因导致），解决方案：</p><ul><li>路由器新增端口映射</li><li>花生壳动态解析软件</li><li>natapp等免费软件提供的内网映射服务</li><li>基于ngrok（不荐）或者frp自建内网映射服务</li></ul><h1 id="how"><a href="#how" class="headerlink" title="how"></a>how</h1><p>目前推荐使用frp搭建穿透服务，支持HTTP，SSH,TCP UDP FTP</p><p><img src="..\img\frp.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;why&quot;&gt;&lt;a href=&quot;#why&quot; class=&quot;headerlink&quot; title=&quot;why&quot;&gt;&lt;/a&gt;why&lt;/h1&gt;&lt;p&gt;解决公网访问自己的内网设备（大部分公司，小区都是在内网中，IPv4历史原因导致），解决方案：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;路由器新增端
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>2020-01-18-plugins</title>
    <link href="http://zehai.info/2020/01/18/2020-01-18-plugins/"/>
    <id>http://zehai.info/2020/01/18/2020-01-18-plugins/</id>
    <published>2020-01-18T15:58:31.000Z</published>
    <updated>2020-01-31T03:53:24.884Z</updated>
    
    <content type="html"><![CDATA[<p>最近更新hexo比较频繁，发现频繁性的推送master分支以及source源文件备份，比较繁琐，查询了官方文档，可以写一些监听函数，实现一些自动化部署，hexo默认将脚本放置在scripts文件夹下，以下代码可以在hexo new的时候自动打开默认编辑软件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var spawn = require(&apos;child_process&apos;).exec;</span><br><span class="line"></span><br><span class="line">hexo.on(&apos;new&apos;, function(data)&#123;</span><br><span class="line">  spawn(&apos;start  &quot;markdown编辑器绝对路径.exe&quot; &apos; + data.path);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>非常的方便，省去了我打开typora的时间</p><p>以及以下的代码可以实现自动部署source分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">require(&apos;shelljs/global&apos;);//记得安装包</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">hexo.on(&apos;deployAfter&apos;, function() &#123;//当deploy完成后执行备份</span><br><span class="line">run();</span><br><span class="line">&#125;);</span><br><span class="line">&#125; catch (e) &#123;</span><br><span class="line">console.log(&quot;You make a wrong：&quot; + e.toString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function run() &#123;</span><br><span class="line">if (!which(&apos;git&apos;)) &#123;</span><br><span class="line">echo(&apos;Sorry, this script requires git&apos;);</span><br><span class="line">exit(1);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">echo(&quot;======================Auto Backup Begin===========================&quot;);</span><br><span class="line">cd(&apos;./&apos;);</span><br><span class="line">if (exec(&apos;git add --all&apos;).code !== 0) &#123;</span><br><span class="line">echo(&apos;Error: Git add failed&apos;);</span><br><span class="line">exit(1);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">if (exec(&apos;git commit -am &quot;Form auto backup script\&apos;s commit&quot;&apos;).code !== 0) &#123;</span><br><span class="line">echo(&apos;Error: Git commit failed&apos;);</span><br><span class="line">exit(1);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">if (exec(&apos;git push origin source&apos;).code !== 0) &#123;</span><br><span class="line">echo(&apos;Error: Git push failed&apos;);</span><br><span class="line">exit(1);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">echo(&quot;==================Auto Backup Complete============================&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="https://hexo.io/zh-cn/docs/plugins#%E5%B7%A5%E5%85%B7" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/plugins#%E5%B7%A5%E5%85%B7</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近更新hexo比较频繁，发现频繁性的推送master分支以及source源文件备份，比较繁琐，查询了官方文档，可以写一些监听函数，实现一些自动化部署，hexo默认将脚本放置在scripts文件夹下，以下代码可以在hexo new的时候自动打开默认编辑软件&lt;/p&gt;
&lt;fig
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>2020-01-17-ImplementStr</title>
    <link href="http://zehai.info/2020/01/17/2020-01-17-ImplementStr/"/>
    <id>http://zehai.info/2020/01/17/2020-01-17-ImplementStr/</id>
    <published>2020-01-17T10:25:30.000Z</published>
    <updated>2020-01-17T10:41:37.267Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode28"><a href="#LeetCode28" class="headerlink" title="LeetCode28"></a>LeetCode28</h1><p>Implement strStr().</p><p>Return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.</p><p>Example 1:</p><p>Input: haystack = “hello”, needle = “ll”<br>Output: 2<br>Example 2:</p><p>Input: haystack = “aaaaa”, needle = “bba”<br>Output: -1<br>Clarification:</p><p>What should we return when needle is an empty string? This is a great question to ask during an interview.</p><p>For the purpose of this problem, we will return 0 when needle is an empty string. This is consistent to C’s strstr() and Java’s indexOf().</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>如果不考虑java偷懒的写法当然可以想到indexof的想法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">strStr</span><span class="params">(String haystack, String needle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> haystack.indexOf(needle);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Runtime: <span class="number">1</span> ms</span><br></pre></td></tr></table></figure></p><p>先按照题意写了如下代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">strStr</span><span class="params">(String haystack, String needle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(needle.length()==<span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(haystack.length()==<span class="number">0</span>)<span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> index =-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;haystack.length();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(haystack.charAt(i)==needle.charAt(<span class="number">0</span>))&#123;</span><br><span class="line">                flag=<span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j =<span class="number">0</span>;j&lt;needle.length();j++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(i+j&gt;=haystack.length())&#123;</span><br><span class="line">                        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(haystack.charAt(i+j)!=needle.charAt(j))&#123;</span><br><span class="line">                        flag=<span class="keyword">false</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">                    <span class="keyword">return</span>  i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>  index;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Runtime: <span class="number">4</span> ms</span><br><span class="line">Memory Usage: <span class="number">42.7</span> MB</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;LeetCode28&quot;&gt;&lt;a href=&quot;#LeetCode28&quot; class=&quot;headerlink&quot; title=&quot;LeetCode28&quot;&gt;&lt;/a&gt;LeetCode28&lt;/h1&gt;&lt;p&gt;Implement strStr().&lt;/p&gt;
&lt;p&gt;Return the 
      
    
    </summary>
    
      <category term="LeetCode" scheme="http://zehai.info/categories/LeetCode/"/>
    
    
      <category term="Easy" scheme="http://zehai.info/tags/Easy/"/>
    
  </entry>
  
  <entry>
    <title>2020-01-15-sqrtx</title>
    <link href="http://zehai.info/2020/01/15/2020-01-15-sqrtx/"/>
    <id>http://zehai.info/2020/01/15/2020-01-15-sqrtx/</id>
    <published>2020-01-15T14:04:46.000Z</published>
    <updated>2020-01-15T15:02:18.884Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode-69"><a href="#LeetCode-69" class="headerlink" title="LeetCode-69"></a>LeetCode-69</h1><p>Implement int sqrt(int x).</p><p>Compute and return the square root of x, where x is guaranteed to be a non-negative integer.</p><p>Since the return type is an integer, the decimal digits are truncated and only the integer part of the result is returned.</p><p>Example 1:</p><p>Input: 4<br>Output: 2<br>Example 2:</p><p>Input: 8<br>Output: 2<br>Explanation: The square root of 8 is 2.82842…, and since<br>             the decimal part is truncated, 2 is returned.</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>就是手写一个根号源码，首先想到的就是通过平方来做</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">mySqrt</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">46340</span>;i&lt;<span class="number">46341</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(x&gt;=(<span class="keyword">long</span>)i*i&amp;&amp;x&lt;(<span class="keyword">long</span>)(i+<span class="number">1</span>)*(i+<span class="number">1</span>))&#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">Runtime: <span class="number">22</span> ms</span><br><span class="line">Memory Usage: <span class="number">34</span> MB</span><br></pre></td></tr></table></figure><p>如果不遵循题目的要求，使用Math函数，所以我们的目标大概是3ms附近</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">mySqrt</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> (<span class="keyword">int</span>)Math.sqrt(Double.parseDouble(String.valueOf(x)));</span><br><span class="line">    &#125;</span><br><span class="line">Runtime: <span class="number">3</span> ms</span><br></pre></td></tr></table></figure><p>解法粗暴，遇到大数的时候会从0重新开始计算，复杂度O(N)</p><h2 id="第一次优化"><a href="#第一次优化" class="headerlink" title="第一次优化"></a>第一次优化</h2><p>思路就是避免做两次乘法然后去比较，这个地方可以去优化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int mySqrt(int x) &#123;</span><br><span class="line">        long n = 1;</span><br><span class="line">        while(n * n &lt;= x) &#123;</span><br><span class="line">            n++;</span><br><span class="line">        &#125;</span><br><span class="line">        return (int) n - 1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Runtime: 11 ms</span><br></pre></td></tr></table></figure><h2 id="第二次优化"><a href="#第二次优化" class="headerlink" title="第二次优化"></a>第二次优化</h2><p>可以使用二分法来逐步逼近i，没有必要从1开始顺序遍历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">mySqrt</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">if</span> (x == <span class="number">0</span> || x == <span class="number">1</span>) <span class="keyword">return</span> x;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> right = x;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> midPoint = (left + right) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (midPoint == x / midPoint) &#123;</span><br><span class="line">                <span class="keyword">return</span> midPoint;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (midPoint &gt; x / midPoint) &#123;</span><br><span class="line">                right = midPoint;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (midPoint &lt; x / midPoint) &#123;</span><br><span class="line">                left = midPoint + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> left - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Runtime: <span class="number">1</span> ms</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;LeetCode-69&quot;&gt;&lt;a href=&quot;#LeetCode-69&quot; class=&quot;headerlink&quot; title=&quot;LeetCode-69&quot;&gt;&lt;/a&gt;LeetCode-69&lt;/h1&gt;&lt;p&gt;Implement int sqrt(int x).&lt;/p&gt;
&lt;p&gt;
      
    
    </summary>
    
      <category term="LeetCode" scheme="http://zehai.info/categories/LeetCode/"/>
    
    
      <category term="Easy" scheme="http://zehai.info/tags/Easy/"/>
    
  </entry>
  
  <entry>
    <title>2020-01-11-SameTree</title>
    <link href="http://zehai.info/2020/01/11/2020-01-11-SameTree/"/>
    <id>http://zehai.info/2020/01/11/2020-01-11-SameTree/</id>
    <published>2020-01-11T07:45:18.000Z</published>
    <updated>2020-01-11T07:48:43.532Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode-100"><a href="#LeetCode-100" class="headerlink" title="LeetCode 100"></a>LeetCode 100</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">Given two binary trees, write a function to check if they are the same or not.</span><br><span class="line"></span><br><span class="line">Two binary trees are considered the same if they are structurally identical and the nodes have the same value.</span><br><span class="line"></span><br><span class="line">Example 1:</span><br><span class="line"></span><br><span class="line">Input:     1         1</span><br><span class="line">          / \       / \</span><br><span class="line">         2   3     2   3</span><br><span class="line"></span><br><span class="line">        [1,2,3],   [1,2,3]</span><br><span class="line"></span><br><span class="line">Output: true</span><br><span class="line">Example 2:</span><br><span class="line"></span><br><span class="line">Input:     1         1</span><br><span class="line">          /           \</span><br><span class="line">         2             2</span><br><span class="line"></span><br><span class="line">        [1,2],     [1,null,2]</span><br><span class="line"></span><br><span class="line">Output: false</span><br><span class="line">Example 3:</span><br><span class="line"></span><br><span class="line">Input:     1         1</span><br><span class="line">          / \       / \</span><br><span class="line">         2   1     1   2</span><br><span class="line"></span><br><span class="line">        [1,2,1],   [1,1,2]</span><br><span class="line"></span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>题目其实很简单的一个递归Recursion,我们很轻松可以通过递归来解决<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">  public boolean isSameTree(TreeNode p, TreeNode q) &#123;</span><br><span class="line">    // p and q are both null</span><br><span class="line">    if (p == null &amp;&amp; q == null) return true;</span><br><span class="line">    // one of p and q is null</span><br><span class="line">    if (q == null || p == null) return false;</span><br><span class="line">    if (p.val != q.val) return false;</span><br><span class="line">    return isSameTree(p.right, q.right) &amp;&amp;</span><br><span class="line">            isSameTree(p.left, q.left);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>时间复杂度为O(n)，控件复杂度为O(logn)~O(n)之间，这道题就不考虑其他解法了，recursion目前看来是最优解</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;LeetCode-100&quot;&gt;&lt;a href=&quot;#LeetCode-100&quot; class=&quot;headerlink&quot; title=&quot;LeetCode 100&quot;&gt;&lt;/a&gt;LeetCode 100&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="LeetCode" scheme="http://zehai.info/categories/LeetCode/"/>
    
    
      <category term="Medium" scheme="http://zehai.info/tags/Medium/"/>
    
  </entry>
  
  <entry>
    <title>2020-01-10-MatrixZero</title>
    <link href="http://zehai.info/2020/01/10/2020-01-10-MatrixZero/"/>
    <id>http://zehai.info/2020/01/10/2020-01-10-MatrixZero/</id>
    <published>2020-01-10T15:15:26.000Z</published>
    <updated>2020-01-10T15:50:04.238Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode-73"><a href="#LeetCode-73" class="headerlink" title="LeetCode 73"></a>LeetCode 73</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">Given a m x n matrix, if an element is 0, set its entire row and column to 0. Do it in-place.</span><br><span class="line"></span><br><span class="line">Example 1:</span><br><span class="line"></span><br><span class="line">Input: </span><br><span class="line">[</span><br><span class="line">  [1,1,1],</span><br><span class="line">  [1,0,1],</span><br><span class="line">  [1,1,1]</span><br><span class="line">]</span><br><span class="line">Output: </span><br><span class="line">[</span><br><span class="line">  [1,0,1],</span><br><span class="line">  [0,0,0],</span><br><span class="line">  [1,0,1]</span><br><span class="line">]</span><br><span class="line">Example 2:</span><br><span class="line"></span><br><span class="line">Input: </span><br><span class="line">[</span><br><span class="line">  [0,1,2,0],</span><br><span class="line">  [3,4,5,2],</span><br><span class="line">  [1,3,1,5]</span><br><span class="line">]</span><br><span class="line">Output: </span><br><span class="line">[</span><br><span class="line">  [0,0,0,0],</span><br><span class="line">  [0,4,5,0],</span><br><span class="line">  [0,3,1,0]</span><br><span class="line">]</span><br><span class="line">Follow up:</span><br><span class="line"></span><br><span class="line">A straight forward solution using O(mn) space is probably a bad idea.</span><br><span class="line">A simple improvement uses O(m + n) space, but still not the best solution.</span><br><span class="line">Could you devise a constant space solution?</span><br></pre></td></tr></table></figure><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>一开始以为递归可以解决，可以将矩阵一层层拆开，写下了如下的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">public void setZeroes(int[][] matrix) &#123;</span><br><span class="line">    int rows = matrix.length-1;</span><br><span class="line">    int cols = matrix[0].length-1;</span><br><span class="line">    regression(matrix, rows&gt;=cols?cols:rows);</span><br><span class="line">&#125;</span><br><span class="line">public void regression(int[][] matrix,int index)&#123;</span><br><span class="line">    if(index&lt;0)&#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    boolean flag = false;</span><br><span class="line">    for(int i =index;i&lt;matrix[0].length;i++)&#123;</span><br><span class="line">        if(matrix[index][i]==0)</span><br><span class="line">        &#123;</span><br><span class="line">            handleZero(matrix,i);</span><br><span class="line">            flag=true;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if(flag==false)&#123;</span><br><span class="line">        for(int j =index;j&lt;matrix.length;j++)&#123;</span><br><span class="line">            if(matrix[j][index]==0)</span><br><span class="line">            &#123;</span><br><span class="line">                handleZero(matrix,j);</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    regression(matrix, --index);</span><br><span class="line">&#125;</span><br><span class="line">private void handleZero(int[][] matrix,int pos) &#123;</span><br><span class="line"></span><br><span class="line">    for(int i=matrix[0].length-1;i&gt;=pos;i--)&#123;</span><br><span class="line">        matrix[pos][i]=0;</span><br><span class="line">    &#125;</span><br><span class="line">    for(int j=matrix.length-1;j&gt;=pos;j--)&#123;</span><br><span class="line">        matrix[j][pos]=0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>写完后很快发现不能够实现，原因就在于他只能管理到内层，外层标为0后，没办法做额外的标记（其实生产代码可以打一些标记），所以只能抛弃这个本以为很简单的方法，该用了set合集去记录要设置0行列的行号或者列号，这个复杂度并不是很复杂，但是执行完发现代码的效率还是很低，先放代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">  public void setZeroes(int[][] matrix) &#123;</span><br><span class="line">    int R = matrix.length;</span><br><span class="line">    int C = matrix[0].length;</span><br><span class="line">    Set&lt;Integer&gt; rows = new HashSet&lt;Integer&gt;();</span><br><span class="line">    Set&lt;Integer&gt; cols = new HashSet&lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line">    for (int i = 0; i &lt; R; i++) &#123;</span><br><span class="line">      for (int j = 0; j &lt; C; j++) &#123;</span><br><span class="line">        if (matrix[i][j] == 0) &#123;</span><br><span class="line">          rows.add(i);</span><br><span class="line">          cols.add(j);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for (int i = 0; i &lt; R; i++) &#123;</span><br><span class="line">      for (int j = 0; j &lt; C; j++) &#123;</span><br><span class="line">        if (rows.contains(i) || cols.contains(j)) &#123;</span><br><span class="line">          matrix[i][j] = 0;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>代码低效的原因在于动用了两层循环，时间复杂度非常低，题目的置0是有规律的，不是无规律的，所以我开始寻求更新简单的方法,先贴最优解，要睡觉了，我的头发啊</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public void setZeroes(int[][] matrix) &#123;</span><br><span class="line">int R = matrix.length;</span><br><span class="line">int C = matrix[0].length;</span><br><span class="line">boolean isCol = false;</span><br><span class="line"></span><br><span class="line">for(int i=0; i&lt;R; i++) &#123;</span><br><span class="line">if (matrix[i][0] == 0) &#123;</span><br><span class="line">        isCol = true;</span><br><span class="line">    &#125;</span><br><span class="line">for(int j=1; j&lt;C; j++) &#123;</span><br><span class="line">if(matrix[i][j]==0) &#123;</span><br><span class="line">matrix[0][j] = 0;</span><br><span class="line">matrix[i][0] = 0;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Iterate over the array once again and using the first row and first column, update the elements.</span><br><span class="line">for(int i=1; i&lt;R; i++) &#123;</span><br><span class="line">for(int j=1; j&lt;C; j++) &#123;</span><br><span class="line">if(matrix[i][0]==0 || matrix[0][j]==0) &#123;</span><br><span class="line">matrix[i][j] = 0;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// See if the first row needs to be set to zero as well</span><br><span class="line">if(matrix[0][0]==0) &#123;</span><br><span class="line">for(int j=0; j&lt;C; j++) &#123;</span><br><span class="line">matrix[0][j] = 0;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// See if the first column needs to be set to zero as well</span><br><span class="line">if(isCol) &#123;</span><br><span class="line">for(int i=0; i&lt;R; i++) &#123;</span><br><span class="line">matrix[i][0] = 0;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;LeetCode-73&quot;&gt;&lt;a href=&quot;#LeetCode-73&quot; class=&quot;headerlink&quot; title=&quot;LeetCode 73&quot;&gt;&lt;/a&gt;LeetCode 73&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;tabl
      
    
    </summary>
    
      <category term="LeetCode" scheme="http://zehai.info/categories/LeetCode/"/>
    
    
      <category term="Medium" scheme="http://zehai.info/tags/Medium/"/>
    
  </entry>
  
  <entry>
    <title>2020-01-09-RedisTransaction</title>
    <link href="http://zehai.info/2020/01/09/2020-01-09-RidisTransaction/"/>
    <id>http://zehai.info/2020/01/09/2020-01-09-RidisTransaction/</id>
    <published>2020-01-09T14:42:06.000Z</published>
    <updated>2020-01-15T14:05:40.329Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>官网doc：<a href="https://redis.io/topics/transactions" target="_blank" rel="noopener">https://redis.io/topics/transactions</a></p><p>本文纯属阅读笔记，无学术参考价值</p></blockquote><h1 id="what"><a href="#what" class="headerlink" title="what"></a>what</h1><p>事务（transaction）的本质就是处理好几个动作，要么都成功，要么其中一个失败就全部回滚</p><p>每门语言都会有事务的支持，node也有async的方法实现事务几个动作串行，或者并行，一个失败全部回滚，之前写过支付的例子，使用async.waterfall,购买会员后</p><p>1.查询支付宝返回支付是否成功</p><p>2.获取用户所买会员的等级及相关权限</p><p>3.将权益插入用户表中</p><p>4.将订单数据记录到订单表中，方便后台查看订单量</p><p>大致步骤就是这些</p><p>Redis主要使用MULTI ,EXEC,DISCARD WATCH来实现事务的功能</p><p>遵循以下原则：</p><ul><li>所有命令被序列化后顺序执行，且执行期间不接受其他请求，保证隔离性</li><li>EXEC命令触发事务中所有命令的执行，因此，如果客户端调用MULTI命令之前失去连接，则不执行任何操作。如果EXEC命令调用过，则所有的命令都会被执行</li></ul><h1 id="how"><a href="#how" class="headerlink" title="how"></a>how</h1><p>MULTI输入事务以OK答复，此时用户可以发送多个命令，Redis都不会执行，而是排队，一旦调用EXEC，则将会执行所有命令，调用DISCARD将刷新（Flush？清空？重新执行？）事务队列并退出事务</p><p>示例代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; MULTI</span><br><span class="line">OK</span><br><span class="line">&gt; INCR foo</span><br><span class="line">QUEUED</span><br><span class="line">&gt; INCR bar</span><br><span class="line">QUEUED</span><br><span class="line">&gt; EXEC</span><br><span class="line">1) (integer) 1</span><br><span class="line">2) (integer) 1</span><br></pre></td></tr></table></figure><p>可以看出EXEC返回一个数组，其中每个元素都是事务中单个命令的答复，其发出顺序与命令相同</p><p>当Reids连接处于MULTI的请求时，所有的命令都将以字符串queued答复，当EXEC时，将顺序执行</p><h2 id="errors"><a href="#errors" class="headerlink" title="errors"></a>errors</h2><p>可能存在两种命令错误：</p><ul><li>命令可能无法排队，因此在EXEC之前可能有错误（包括命令语法错误）</li><li>调用EXEC后，命令执行失败</li></ul><p>客户端通过检查已排队（queued）的命令返回值来判断第一种错误，另外从2.6.5开始，服务器将记住在命令排队期间发生的错误，并且拒绝执行事务，返回错误并自动丢弃事务</p><p><strong>EXEC执行后错误不会特殊处理，所有的命令都将被执及时有些命令失败</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">MULTI</span><br><span class="line">+OK</span><br><span class="line">SET a abc</span><br><span class="line">+QUEUED</span><br><span class="line">LPOP a</span><br><span class="line">+QUEUED</span><br><span class="line">EXEC</span><br><span class="line">*2</span><br><span class="line">+OK</span><br><span class="line">-ERR Operation against a key holding the wrong kind of value</span><br></pre></td></tr></table></figure><p><strong>即时命令失败，队列里的其他命令也会处理</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    name:stu</span><br><span class="line">    time:1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;官网doc：&lt;a href=&quot;https://redis.io/topics/transactions&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://redis.io/topics/transactions&lt;/a&gt;
      
    
    </summary>
    
      <category term="Redis" scheme="http://zehai.info/categories/Redis/"/>
    
    
      <category term="Transaction" scheme="http://zehai.info/tags/Transaction/"/>
    
  </entry>
  
  <entry>
    <title>2020-01-08-SortColors</title>
    <link href="http://zehai.info/2020/01/08/2020-01-08-SortColors/"/>
    <id>http://zehai.info/2020/01/08/2020-01-08-SortColors/</id>
    <published>2020-01-08T14:42:06.000Z</published>
    <updated>2020-01-09T15:11:01.324Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Leetcode-75"><a href="#Leetcode-75" class="headerlink" title="Leetcode-75"></a>Leetcode-75</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Given an array with n objects colored red, white or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white and blue.</span><br><span class="line"></span><br><span class="line">Here, we will use the integers 0, 1, and 2 to represent the color red, white, and blue respectively.</span><br><span class="line"></span><br><span class="line">Note: You are not suppose to use the library&apos;s sort function for this problem.</span><br><span class="line"></span><br><span class="line">Example:</span><br><span class="line"></span><br><span class="line">Input: [2,0,2,1,1,0]</span><br><span class="line">Output: [0,0,1,1,2,2]</span><br><span class="line">Follow up:</span><br><span class="line"></span><br><span class="line">A rather straight forward solution is a two-pass algorithm using counting sort.</span><br><span class="line">First, iterate the array counting number of 0&apos;s, 1&apos;s, and 2&apos;s, then overwrite array with total number of 0&apos;s, then 1&apos;s and followed by 2&apos;s.</span><br><span class="line">Could you come up with a one-pass algorithm using only constant space?</span><br></pre></td></tr></table></figure><h1 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h1><p>题目乍一看非常简单,但确实说使用简单的sort方法以及o(n^2)的排序确实会浪费时间复杂度，本着好奇心，我试了一下，果然成了吊车尾</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sortColors</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;nums.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;nums.length;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[i]&gt;nums[j])&#123;</span><br><span class="line">                    <span class="keyword">int</span> tmp=nums[i];</span><br><span class="line">                    nums[i]=nums[j];</span><br><span class="line">                    nums[j]=tmp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Runtime: <span class="number">1</span> ms, faster than <span class="number">6.35</span>% of Java online submissions <span class="keyword">for</span> Sort Colors.</span><br></pre></td></tr></table></figure><p>该题优化的核心位置是该数组是一个一维数组，设置两个指针，左边遍历0，遇到0往左放，遇到2往右放，r和l为左右分界线，index记录最后一个0的位置<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sortColors</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> r = nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(l &lt;= r) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[l] == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(l &gt; index) &#123;</span><br><span class="line">                    <span class="keyword">int</span> tmp = nums[index];</span><br><span class="line">                    nums[index] = nums[l];</span><br><span class="line">                    nums[l] = tmp;</span><br><span class="line">                    index++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    l++;</span><br><span class="line">                    index++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[l] == <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> tmp = nums[r];</span><br><span class="line">                nums[r] = <span class="number">2</span>;</span><br><span class="line">                nums[l] = tmp;</span><br><span class="line">                r--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> l++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Leetcode-75&quot;&gt;&lt;a href=&quot;#Leetcode-75&quot; class=&quot;headerlink&quot; title=&quot;Leetcode-75&quot;&gt;&lt;/a&gt;Leetcode-75&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;tabl
      
    
    </summary>
    
      <category term="LeetCode" scheme="http://zehai.info/categories/LeetCode/"/>
    
    
      <category term="Medium" scheme="http://zehai.info/tags/Medium/"/>
    
  </entry>
  
  <entry>
    <title>2020-01-08-MinimunPathSum</title>
    <link href="http://zehai.info/2020/01/08/2020-01-08-MinimumPathSum/"/>
    <id>http://zehai.info/2020/01/08/2020-01-08-MinimumPathSum/</id>
    <published>2020-01-08T14:42:06.000Z</published>
    <updated>2020-01-09T15:11:05.059Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Leetcode-64"><a href="#Leetcode-64" class="headerlink" title="Leetcode-64"></a>Leetcode-64</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.</span><br><span class="line"></span><br><span class="line">Note: You can only move either down or right at any point in time.</span><br><span class="line"></span><br><span class="line">Example:</span><br><span class="line"></span><br><span class="line">Input:</span><br><span class="line">[</span><br><span class="line">  [1,3,1],</span><br><span class="line">  [1,5,1],</span><br><span class="line">  [4,2,1]</span><br><span class="line">]</span><br><span class="line">Output: 7</span><br><span class="line">Explanation: Because the path 1→3→1→1→1 minimizes the sum.</span><br></pre></td></tr></table></figure><h1 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h1><p>解法为简单的动态规划，只要找到比较该元素，上方和左方的值的最小值，然后与该值相加，就可以得到解</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int minPathSum(int[][] grid) &#123;</span><br><span class="line">        for(int i=1; i&lt;grid.length; i++) grid[i][0] += grid[i-1][0];</span><br><span class="line">        for(int j=1; j&lt;grid[0].length; j++) grid[0][j] += grid[0][j-1];</span><br><span class="line">        for (int i=1; i&lt;grid.length; i++) &#123;</span><br><span class="line">            for (int j=1; j&lt;grid[0].length; j++) &#123;</span><br><span class="line">                grid[i][j] = Math.min(grid[i][j-1], grid[i-1][j]) + grid[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return grid[grid.length-1][grid[0].length-1];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Leetcode-64&quot;&gt;&lt;a href=&quot;#Leetcode-64&quot; class=&quot;headerlink&quot; title=&quot;Leetcode-64&quot;&gt;&lt;/a&gt;Leetcode-64&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;tabl
      
    
    </summary>
    
      <category term="LeetCode" scheme="http://zehai.info/categories/LeetCode/"/>
    
    
      <category term="Medium" scheme="http://zehai.info/tags/Medium/"/>
    
  </entry>
  
  <entry>
    <title>2020-01-07-关于Promise的思考</title>
    <link href="http://zehai.info/2020/01/07/2020-01-07-%E5%85%B3%E4%BA%8EPromise%E7%9A%84%E6%80%9D%E8%80%83/"/>
    <id>http://zehai.info/2020/01/07/2020-01-07-关于Promise的思考/</id>
    <published>2020-01-07T14:42:06.000Z</published>
    <updated>2020-01-08T08:36:47.390Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>（这道题在互联网上已经有了）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">可以添加任务，任务包含任务数据，任务延迟触发的等待时间。</span><br><span class="line">在任务到达触发时间点时，自动触发执行此任务。</span><br><span class="line">队列中任务保持先进先出原则：假设 A 任务的触发等待时间为 X，B 任务的触发等待时间为 Y，B 在 A 之后被添加入队列，则 A 的前驱任务执行完成后等待时间 X 后，才执行 A，同理在 A 执行完成后，等待时间 Y，才执行 B。</span><br></pre></td></tr></table></figure><h1 id="思路过程"><a href="#思路过程" class="headerlink" title="思路过程"></a>思路过程</h1><h2 id="1-Java上线"><a href="#1-Java上线" class="headerlink" title="1.Java上线"></a>1.Java上线</h2><p>读题目就是<strong>延时队列</strong>的特征，Java有锁，有多线程，写起来多方便</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.BlockingQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.DelayQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Delayed;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HandWritingQueue</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> BlockingQueue&lt;DelayedElement&gt; deque = <span class="keyword">new</span> DelayQueue&lt;&gt;();</span><br><span class="line">        Runnable producerRunnable = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">true</span> &amp;&amp; i&gt;<span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        --i;</span><br><span class="line">                        System.out.println(<span class="string">"producing "</span>+i+<span class="string">",wait "</span>+i+<span class="string">" seconds"</span>);</span><br><span class="line">                        deque.put(<span class="keyword">new</span> DelayedElement(<span class="number">1000</span> * i, <span class="string">"i="</span> + i));</span><br><span class="line">                        Thread.sleep(<span class="number">200</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Runnable customerRunnable = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        System.out.println(<span class="string">"consuming:"</span> + deque.take().msg);</span><br><span class="line">                        <span class="comment">//Thread.sleep(500);</span></span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        Runnable getSize= <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="string">"size="</span>+deque.size());</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread(producerRunnable);</span><br><span class="line">        thread1.start();</span><br><span class="line"></span><br><span class="line">        Thread thread2 = <span class="keyword">new</span> Thread(customerRunnable);</span><br><span class="line">        thread2.start();</span><br><span class="line"></span><br><span class="line">        Thread thread3 = <span class="keyword">new</span> Thread(getSize);</span><br><span class="line">        thread3.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DelayedElement</span> <span class="keyword">implements</span> <span class="title">Delayed</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> expire;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> String msg;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">DelayedElement</span><span class="params">(<span class="keyword">long</span> delay, String msg)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.msg = msg;</span><br><span class="line">            expire = System.currentTimeMillis() + delay;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getDelay</span><span class="params">(TimeUnit unit)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> unit.convert(<span class="keyword">this</span>.expire - System.currentTimeMillis(), TimeUnit.MILLISECONDS);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Delayed o)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span>  -<span class="number">1</span>;<span class="comment">//FIFO</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-Node上线"><a href="#2-Node上线" class="headerlink" title="2.Node上线"></a>2.Node上线</h2><p>被提醒该题目可以用node实现，且不需要借助redis来做，然后我上手就是一把操作：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DelayElement</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(data, expire) &#123;</span><br><span class="line">    <span class="keyword">this</span>.data = data;</span><br><span class="line">    <span class="keyword">this</span>.expire = expire;<span class="comment">//second</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> delayArray = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">//push two element in delayArray</span></span><br><span class="line">delayArray.push(<span class="keyword">new</span> DelayElement(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">delayArray.push(<span class="keyword">new</span> DelayElement(<span class="number">2</span>, <span class="number">1</span>));</span><br><span class="line"><span class="keyword">let</span> length = delayArray.length;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> time_cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (delayArray.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> de = delayArray.shift();</span><br><span class="line">  time_cnt += de.expire;<span class="comment">//serial</span></span><br><span class="line">  (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'expire data is :'</span> + de.data + <span class="string">',expire time is :'</span> + de.expire);</span><br><span class="line">    &#125;, time_cnt * <span class="number">1000</span>);</span><br><span class="line">  &#125;)();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我以为设计的考点也就是立即执行函数，延时的使用，但是这里的for循环是个伪串行，实际上是并发的，也为第三步的修改提供了bug</p><h2 id="3-Promise时代"><a href="#3-Promise时代" class="headerlink" title="3.Promise时代"></a>3.Promise时代</h2><p>一开始我是想把async函数放进去，写了如下的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"><span class="keyword">const</span> delayArray = [];</span><br><span class="line"><span class="keyword">const</span> daPush = <span class="function">(<span class="params">data, expire</span>) =&gt;</span> &#123;</span><br><span class="line">  delayArray.push(<span class="keyword">async</span> () =&gt;  &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'data is '</span> + data + <span class="string">' and expire is '</span> + expire);</span><br><span class="line">    &#125;, expire * <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line">daPush(<span class="number">1</span>, <span class="number">4</span>);<span class="comment">//2 seconds</span></span><br><span class="line">daPush(<span class="number">2</span>, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> da <span class="keyword">of</span> delayArray) &#123;</span><br><span class="line">    <span class="keyword">await</span> da();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>发现代码还是串行的，然后查了一下可能的问题（以下为个人猜测，欢迎指正）async声明的函数会包装成Promise不假，但是for循环会并发去执行await中的async</p><p>4.正解</p><p><del>promise执行会阻塞主线程</del></p><p>Macrotasks和Microtasks 都属于上述的异步任务中的一种，他们分别有如下API：<br><strong>macrotasks:</strong> setTimeout, setInterval, setImmediate, I/O, UI rendering<br><strong>microtasks:</strong> process.nextTick, Promise, MutationObserver</p><p>任务队列中，在每一次事件循环中，<strong>macrotask</strong>只会<strong>提取一个执行</strong>，而<strong>microtask</strong>会<strong>一直</strong>提取，直到microsoft队列<strong>为空</strong>为止。</p><p>也就是说如果某个microtask任务被推入到执行中，那么当主线程任务执行完成后，会循环调用该队列任务中的下一个任务来执行，直到该任务队列到最后一个任务为止。</p><p>而事件循环每次只会入栈一个macrotask,<strong>主线程</strong>执行完成该任务后又会检查<strong>microtasks</strong>队列并完成里面的所有任务后再执行<strong>macrotask</strong>的任务。</p><p>以及macrotask应该对应的是check队列（该行未验证）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"><span class="keyword">const</span> delayArray = [];</span><br><span class="line"><span class="keyword">const</span> daPush = <span class="function">(<span class="params">data, expire</span>) =&gt;</span> &#123;</span><br><span class="line">  delayArray.push(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span>(data)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'data is '</span> + data + <span class="string">' and expire is '</span> + expire);</span><br><span class="line">        resolve(<span class="literal">true</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span>&#123;</span><br><span class="line">        reject(<span class="string">'there is nodata'</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, expire * <span class="number">1000</span>);</span><br><span class="line">  &#125;));</span><br><span class="line">&#125;;</span><br><span class="line">daPush(<span class="number">1</span>, <span class="number">4</span>);<span class="comment">//2 seconds</span></span><br><span class="line">daPush(<span class="number">2</span>, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> da <span class="keyword">of</span> delayArray) &#123;</span><br><span class="line">    da().then(<span class="function">(<span class="params">value</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="comment">// console.log(value);</span></span><br><span class="line">    &#125;).catch(<span class="function">(<span class="params">value</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(value);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//没有28-33，只35行也可以</span></span><br><span class="line">    <span class="comment">// await da();</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;（这道题在互联网上已经有了）&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td clas
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>2020-01-07-SetTimeout</title>
    <link href="http://zehai.info/2020/01/07/2020-01-07-SetTimeout/"/>
    <id>http://zehai.info/2020/01/07/2020-01-07-SetTimeout/</id>
    <published>2020-01-07T05:01:52.000Z</published>
    <updated>2020-01-07T15:33:02.795Z</updated>
    
    <content type="html"><![CDATA[<p>执行了一下程序：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">while(true)&#123;</span><br><span class="line">    setTimeout(()=&gt;&#123;</span><br><span class="line">        console.log(1)</span><br><span class="line">    &#125;,0)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回了一下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;--- Last few GCs ---&gt;</span><br><span class="line"></span><br><span class="line">[12308:000001E565C2F6F0]    14167 ms: Mark-sweep 1395.9 (1425.2) -&gt; 1395.9 (1423.7) MB, 1754.1 / 0.0 ms  (+ 0.0 ms in 39 steps since start of marking, biggest step 0.0 ms, walltime since start of marking 1764 ms) (average mu = 0.105, current mu = 0.020) a[12308:000001E565C2F6F0]    14175 ms: Scavenge 1397.3 (1423.7) -&gt; 1397.3 (1425.2) MB, 7.0 / 0.0 ms  (average mu = 0.105, current mu = 0.020) allocation failure</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;--- JS stacktrace ---&gt;</span><br><span class="line"></span><br><span class="line">==== JS stack trace =========================================</span><br><span class="line"></span><br><span class="line">    0: ExitFrame [pc: 000002AFCABDC5C1]</span><br><span class="line">Security context: 0x037b5391e6e9 &lt;JSObject&gt;</span><br><span class="line">    1: /* anonymous */ [0000016D4360B9A1] [D:\working\h3yun\test.3.js:~1] [pc=000002AFCAC7210F](this=0x016d4360bad1 &lt;Object map = 000001F79EE82571&gt;,exports=0x016d4360bad1 &lt;Object map = 000001F79EE82571&gt;,require=0x016d4360ba91 &lt;JSFunction require (sfi = 00000397F3EC6A31)&gt;,module=0x016d4360ba09 &lt;Module map = 000001F79EED3DA1&gt;,__filename=0x0397f3ece219 &lt;Strin...</span><br><span class="line"></span><br><span class="line">FATAL ERROR: Ineffective mark-compacts near heap limit Allocation failed - JavaScript heap out of memory</span><br><span class="line"> 1: 00007FF7C7BFC6AA v8::internal::GCIdleTimeHandler::GCIdleTimeHandler+4506</span><br><span class="line"> 2: 00007FF7C7BD7416 node::MakeCallback+4534</span><br><span class="line"> 3: 00007FF7C7BD7D90 node_module_register+2032</span><br><span class="line"> 4: 00007FF7C7EF189E v8::internal::FatalProcessOutOfMemory+846</span><br><span class="line"> 5: 00007FF7C7EF17CF v8::internal::FatalProcessOutOfMemory+639</span><br><span class="line"> 6: 00007FF7C80D7F94 v8::internal::Heap::MaxHeapGrowingFactor+9620</span><br><span class="line"> 7: 00007FF7C80CEF76 v8::internal::ScavengeJob::operator=+24550</span><br><span class="line"> 8: 00007FF7C80CD5CC v8::internal::ScavengeJob::operator=+17980</span><br><span class="line"> 9: 00007FF7C80D6317 v8::internal::Heap::MaxHeapGrowingFactor+2327</span><br><span class="line">10: 00007FF7C80D6396 v8::internal::Heap::MaxHeapGrowingFactor+2454</span><br><span class="line">11: 00007FF7C8200637 v8::internal::Factory::NewFillerObject+55</span><br><span class="line">12: 00007FF7C827D826 v8::internal::operator&lt;&lt;+73494</span><br><span class="line">13: 000002AFCABDC5C1</span><br></pre></td></tr></table></figure><h1 id="why"><a href="#why" class="headerlink" title="why"></a>why</h1><p>因为业务代码阻塞住，没有进入timer_handler的循环，所以1虽然进入了timer的红黑树中，但是不可能输出，不像之前for循环会有一个截止条件，后续的定时器还是可以生效的</p><p>另外有一个地方记混了，遍历回调的时候，会执行直到回调为空或者最大执行回调数量，而业务代码只会在这里阻塞不会停止，这也是为何出现GC的日志</p><h1 id="what"><a href="#what" class="headerlink" title="what"></a>what</h1><p>setimeout是JS前端常用的控件用来延时执行一个函数（回调），当执行业务代码的时候我们会将settimeout，setImmediate，nextTick，setInterval插入timer_handler的不同队列中（详见左侧node分支，且文章也在更新中），当JS单线程执行完业务代码后，才开始eventloop查找观察者来进行回调，当然也存在延时不精确的可能</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;执行了一下程序：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>2020-01-06-gRPC</title>
    <link href="http://zehai.info/2020/01/06/2020-01-06-gRPC/"/>
    <id>http://zehai.info/2020/01/06/2020-01-06-gRPC/</id>
    <published>2020-01-06T12:55:51.000Z</published>
    <updated>2020-01-06T14:55:50.255Z</updated>
    
    <content type="html"><![CDATA[<h1 id="why"><a href="#why" class="headerlink" title="why"></a>why</h1><p>gRPC是任何环境都可以运行的高性能开源框架，他可以通过pluggable support来高效实现负载均衡，心跳检测和授权，他也可以应用于分布式计算的最后一个流程（连接各个端到后端）</p><ul><li>简单的服务定义</li><li>快速启动易扩展</li><li>跨语言，跨平台</li><li>双向流和鉴权</li></ul><h1 id="feature"><a href="#feature" class="headerlink" title="feature"></a>feature</h1><ul><li><p>gRPC可以通过protobuf来定义接口，从而可以有更加严格的接口约束条件。关于protobuf可以参见笔者之前的小文<a href="https://www.jianshu.com/p/b723053a86a6" target="_blank" rel="noopener">Google Protobuf简明教程</a> </p></li><li><p>另外，通过protobuf可以将数据序列化为二进制编码，这会大幅减少需要传输的数据量，从而大幅提高性能。</p></li><li><p>gRPC可以方便地支持流式通信(理论上通过http2.0就可以使用streaming模式, 但是通常web服务的restful api似乎很少这么用，通常的流式数据应用如视频流，一般都会使用专门的协议如HLS，RTMP等，这些就不是我们通常web服务了，而是有专门的服务器应用。）</p></li></ul><h1 id="node"><a href="#node" class="headerlink" title="node"></a>node</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ # Clone the repository to get the example code</span><br><span class="line">$ git clone -b v1.25.0 https://github.com/grpc/grpc</span><br><span class="line">$ # Navigate to the dynamic codegen &quot;hello, world&quot; Node example:</span><br><span class="line">$ cd grpc/examples/node/dynamic_codegen</span><br><span class="line">$ # Install the example&apos;s dependencies</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;why&quot;&gt;&lt;a href=&quot;#why&quot; class=&quot;headerlink&quot; title=&quot;why&quot;&gt;&lt;/a&gt;why&lt;/h1&gt;&lt;p&gt;gRPC是任何环境都可以运行的高性能开源框架，他可以通过pluggable support来高效实现负载均衡，心跳检测和授权，他也可
      
    
    </summary>
    
      <category term="gRPC" scheme="http://zehai.info/categories/gRPC/"/>
    
    
      <category term="network" scheme="http://zehai.info/tags/network/"/>
    
  </entry>
  
  <entry>
    <title>2020-01-03-SearchInsertPosition</title>
    <link href="http://zehai.info/2020/01/03/2020-01-03-SearchInsertPosition/"/>
    <id>http://zehai.info/2020/01/03/2020-01-03-SearchInsertPosition/</id>
    <published>2020-01-03T09:01:03.000Z</published>
    <updated>2020-01-03T09:23:21.572Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode38"><a href="#LeetCode38" class="headerlink" title="LeetCode38"></a>LeetCode38</h1><p>Easy</p><p>Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.</p><p>You may assume no duplicates in the array.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,3,5,6], 5</span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,3,5,6], 2</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,3,5,6], 7</span><br><span class="line">Output: 4</span><br></pre></td></tr></table></figure><p><strong>Example 4:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,3,5,6], 0</span><br><span class="line">Output: 0</span><br></pre></td></tr></table></figure><p>离职后的第一题想先简单点热个身（后面有个难的目前还没做出来），就是说给一个target，返回它在数组中的位置</p><h1 id="How"><a href="#How" class="headerlink" title="How"></a>How</h1><p>该题目一上脑子就可以写下如下的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">searchInsert</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (target &gt; nums[nums.length - <span class="number">1</span>]) &#123;</span><br><span class="line">        <span class="keyword">return</span> nums.length;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> pos =<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;nums.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">         <span class="keyword">if</span>(nums[i]&lt;target &amp;&amp; nums[i+<span class="number">1</span>]&gt;=target)&#123;</span><br><span class="line">            pos = ++i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>  pos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但转念一想，题目中给定的是一个sorted array这是一个优化的切口，可以将O(n)的复杂度降低到O(logn),通过递归来拆解完成这道题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">searchInsert</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (low+high)/<span class="number">2</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (target &lt; nums[mid]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mid == <span class="number">0</span> || target &gt; nums[mid-<span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> searchInsert(nums, target, low, mid-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (target &gt; nums[mid]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mid == nums.length-<span class="number">1</span> || target &lt; nums[mid+<span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">return</span> mid+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> searchInsert(nums, target, mid+<span class="number">1</span>, high);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> mid;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;LeetCode38&quot;&gt;&lt;a href=&quot;#LeetCode38&quot; class=&quot;headerlink&quot; title=&quot;LeetCode38&quot;&gt;&lt;/a&gt;LeetCode38&lt;/h1&gt;&lt;p&gt;Easy&lt;/p&gt;
&lt;p&gt;Given a sorted array and a
      
    
    </summary>
    
      <category term="LeetCode" scheme="http://zehai.info/categories/LeetCode/"/>
    
    
      <category term="easy" scheme="http://zehai.info/tags/easy/"/>
    
  </entry>
  
  <entry>
    <title>2019-12-22-SpringBoot概要</title>
    <link href="http://zehai.info/2019/12/16/2019-12-22-SpringBoot%E6%A6%82%E8%A6%81%20/"/>
    <id>http://zehai.info/2019/12/16/2019-12-22-SpringBoot概要 /</id>
    <published>2019-12-16T12:37:30.000Z</published>
    <updated>2019-12-22T06:33:11.205Z</updated>
    
    <content type="html"><![CDATA[<p>含义：spring 的简化配置版本（继承父类依赖，拥有父类的所有配置）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--你的项目pom文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--点开spring-boot-starter-parent，文件相对位置\org\springframework\boot\spring-boot-starter-parent\2.0.4.RELEASE--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../../spring-boot-dependencies<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><p>微服务</p><p>AOP</p><p>简化部署，可以再pom.xml中配置plugins来实现导出jar包，方便执行</p><p>Features:</p><ul><li>starter</li><li>入口类标记@SpringBootApplication</li><li>SpringBoot配置类@SpringBootConfiguration</li><li>配置类@Configuration</li><li>开启自动配置@EnableAutoConfiguration</li><li>自动配置包@AutoConfigurationPackage</li><li>导入组件@Import</li></ul><p>疑惑</p><ul><li>为什么使用注解</li><li>为什么需要AOP</li><li>为什么选择springboot</li><li></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;含义：spring 的简化配置版本（继承父类依赖，拥有父类的所有配置）&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;
      
    
    </summary>
    
      <category term="SpringBoot" scheme="http://zehai.info/categories/SpringBoot/"/>
    
    
      <category term="introduction" scheme="http://zehai.info/tags/introduction/"/>
    
  </entry>
  
  <entry>
    <title>2019-12-22-zookeeper概要</title>
    <link href="http://zehai.info/2019/12/16/2019-12-22-zookeeper%E6%A6%82%E8%A6%81/"/>
    <id>http://zehai.info/2019/12/16/2019-12-22-zookeeper概要/</id>
    <published>2019-12-16T12:37:30.000Z</published>
    <updated>2019-12-22T06:08:56.344Z</updated>
    
    <content type="html"><![CDATA[<p>含义：动物管理员，管理节点</p><p>作用：开源的分布式应用程序协调服务（简单来说，就是一个抽象出来，专门管理各个服务的管理员，发现服务，注册服务，以实现分布式应用的联合工作）</p><p>feature</p><ul><li>树状目录结构，节点称作znode</li><li>持久节点（客户端断开仍然存在）</li><li>临时节点（断开消失）</li><li>节点监听（通过get exists,getchildren来实行监听）</li></ul><p>应用：</p><ul><li>分布式锁</li></ul><table><thead><tr><th></th><th>描述</th></tr></thead><tbody><tr><td>问题场景</td><td>我们有一个服务C，将A系统的订单数据，发送到B系统进行财务处理，但这个服务部C署了三个服务器来进行并发，其中有些数据在传送处理时会new一个objectid，如果不添加锁，该数据可能被两个服务同时调起，在B服务中生成两条记录</td></tr><tr><td>解决方案</td><td>我们同步数据时候，需要给同一个数据加锁，防止该数据同时被两个服务调起，服务访问某条订单数据时候，需要先获得锁，操作完后释放锁</td></tr><tr><td>实现方式</td><td>每个服务连接一个znode的下属有序临时节点，并监听上个节点的变化，编号最小的临时节点获得锁，操作资源，来实现</td></tr></tbody></table><ul><li>服务注册和发现</li></ul><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>问题场景</td><td>我们同步数据的服务C（上个表格中描述）,可能是部署在一个机器上的多进程，也可能是部署在多个物理ip上的服务，他是动态变化的，如果没有zookeeper类的软件，可能我每改一次ip，都需要重启一下服务，服务宕机了，也要改ip（不然404）</td></tr><tr><td>解决方案</td><td>我们需要有个服务来管理应用状态，知道服务的运行状态，这样，当其他服务调起这个服务的时候，才能通过zookeeper提供的地址进行同行</td></tr><tr><td>实现方式</td><td>服务启动会注册到zookeeper，并保持心跳，其他服务想要调用某服务的时候，询问zookeeper拿到地址，然后发送请求报文（例如RPC）</td></tr><tr><td></td><td>1.每个应用创建一个持久节点，每个服务在持久节点下建立临时节点，不同应用间会有监听，A服务如果变动，B服务会收到订阅</td></tr><tr><td></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;含义：动物管理员，管理节点&lt;/p&gt;
&lt;p&gt;作用：开源的分布式应用程序协调服务（简单来说，就是一个抽象出来，专门管理各个服务的管理员，发现服务，注册服务，以实现分布式应用的联合工作）&lt;/p&gt;
&lt;p&gt;feature&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;树状目录结构，节点称作znode&lt;/
      
    
    </summary>
    
      <category term="zookeeper" scheme="http://zehai.info/categories/zookeeper/"/>
    
    
      <category term="introduction" scheme="http://zehai.info/tags/introduction/"/>
    
  </entry>
  
</feed>
